<%args>
	$tz
	$account
	$name
	$start
	$end
	$reg_start
	$reg_end
	$frozen
	$judge
	$drops
	$fines
	$circuit_string
	$site_id => undef
	$site_name => undef
	$state => undef
	$country => undef
</%args>
<%init>

	unless ($site_name || $site_id) { 
		my $return = "You must select an existing site, or give your site a name";
		$m->redirect("location.mhtml?name=$name&start=$start&end=$end&reg_start=$reg_start&reg_end=$reg_end&drops=$drops&judge=$judge&frozen=$frozen&fines=$fines&circuit_string=$circuit_string&state=$state&country=$country&error=$return");
	}

	my @circuits;

	foreach my $circuit_id (split(/-/, $circuit_string)) { 
		 push(@circuits, Tab::Circuit->retrieve($circuit_id));
	}

	my $default_circuit = $circuits[0];

	my $startdt = DateTime::Format::MySQL->parse_datetime($start);
	my $enddt = DateTime::Format::MySQL->parse_datetime($end);
	my $reg_startdt = DateTime::Format::MySQL->parse_datetime($reg_start);
	my $reg_enddt = DateTime::Format::MySQL->parse_datetime($reg_end);
	my $frozendt = DateTime::Format::MySQL->parse_datetime($frozen);
	my $finesdt = DateTime::Format::MySQL->parse_datetime($fines);
	my $judgedt = DateTime::Format::MySQL->parse_datetime($judge);
	my $dropsdt = DateTime::Format::MySQL->parse_datetime($drops);

	my $site = Tab::Site->retrieve($site_id) if $site_id;

	unless ($site) { 

		$site = Tab::Site->create({
			circuit => $default_circuit->id,
			host => $account->id,
			name => $site_name
		});

	}

	my $tourn = Tab::Tourn->create( { 
		name => $name,
		start => $startdt,
		end => $enddt,
		reg_start => $reg_startdt,
		reg_end => $reg_enddt,
		freeze_deadline => $frozendt,
		fine_deadline => $finesdt,
		judge_deadline => $judgedt,
		drop_deadline => $dropsdt,
		approved => 0,
		hidden => 0
	});

	my $join = Tab::TournSite->create ({
		tournament => $tourn->id,
		site => $site_id
	});

	$join = Tab::TournAdmin->create ({
		tournament => $tourn->id,
		account => $account->id
	});

	foreach my $circuit (@circuits) { 

		my $join = Tab::TournCircuit->create ({
			tournament => $tourn->id,
			circuit => $circuit->id
		});
	}

	# Send email to the circuit administrators

	foreach my $circuit (@circuits) { 
		foreach my $admin ($circuit->admins) { 

			my $subject =  $circuit->short_name." Tournament Requested";

			my $body = "\n";

			$body .=$account->first." ".$account->last." <".$account->email."> has requested approval for a tournament on tabroom.com in the circuit:\n\n".$circuit->name."\n\n";

			$body .= "Tournament information:\n\n";

			$body .= "\tName: ".$tourn->name."\n";
			$body .= "\tStart Date: ".Tab::nicedate($tourn->start)."\n";
			$body .= "\tEnd Date: ".Tab::nicedate($tourn->end)."\n";
			$body .= "\tLocation: ".$site->name." \n";
			$body .= "\tOnline Registration opens ".Tab::nicedt($tourn->reg_start->set_time_zone($tz))."\n\n";

			$body .="A circuit administrator (such as yourself) must approve this tournament before it can open for online registration. To do so, go to:\n\n".$Tab::url_prefix."/circuit/approvals.mhtml?circuit_id=".$circuit->id."\n\nOr, you can log into Tabroom and click on the Tournaments Pending Approval button on the right.\n\n";


			$m->comp( "/funclib/send_email.mas", from => $account, to => $admin, subject => $subject, body => $body );

		}
	}

	$m->redirect("$Tab::url_prefix/user/request/confirm.mhtml?tourn_id=".$tourn->id);

</%init>

