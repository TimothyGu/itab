<%args>
	$clone
	$start
	$end
	$name
	$webname
</%args>
<%perl>

	return unless $clone;

	my $old_tourn = Tab::Tourn->retrieve($clone);

	# Convert the dates for registration opening & closing to be the same time
	# from the old tournament.
	my $reg_start_diff = $old_tourn->start - $old_tourn->reg_start;
	my $new_reg_start = $start - $reg_start_diff;

	my $reg_end_diff = $old_tourn->end - $old_tourn->reg_end;
	my $new_reg_end = $end - $reg_end_diff;

	my $tourn = Tab::Tourn->create({ 
		name => $name,
		start => $start,
		end => $end,
		reg_start => $new_reg_start,
		reg_end => $new_reg_end,
		webname => $webname,
		location => $old_tourn->location,
		tz => $old_tourn->tz
	});

	#Settings
	foreach my $setting ($old_tourn->settings) {

		$nsetting = $setting->copy;
		$nsetting->tourn($tourn->id);

		if ($nsetting->value eq "date") { 
			$nsetting_diff = $old_tourn->start - $nsetting->value;
			$nsetting_new = $tourn->start - $nsetting_diff;
		}

		$nsetting->date($nsetting_new);
		$nsetting->update;
	}

	#Circuits
	foreach my $circuit ($old_tourn->tourn_circuits) { 
		$ncircuit = $circuit->copy;
		$ncircuit->tourn($tourn->id);
		$ncircuit->update;
	}

	#Tiebreakers and sets
	my %tb_set_translator = ();
	foreach my $tb_set ($old_tourn->tiebreak_sets) {

		my $ntb_set = $tb_set->copy;
		$ntb_set->tourn($tourn->id);
		$ntb_set->update;

		foreach my $tb ($tb_set->tiebreaks) { 
			$ntb = $tb->copy;
			$ntb->tb_set($ntb_set->id);
			$ntb->update;
		}

		$tb_set_translator{$tb_set->id} = $ntb_set->id;

	}

	#Housing slots

	foreach my $housing ($old_tourn->housing_slots) { 

		my $nhousing = $housing->copy;
		$nhousing->tourn($tourn->id);

		$night_diff = $old_tourn->end - $nhousing->night;
		$night_new = $tourn->end - $nhousing_diff;
		$nhousing->night($night_new);

		$nhousing->update;
	}


	#Limits on Double Entry
	my %event_double_translator = ();
	foreach my $ed ($old_tourn->event_doubles) { 
		my $ned = $ed->copy;
		$ned->tourn($tourn->id);
		$ned->update;
		$event_double_translator{$ed->id} = $ned->id;
	}

	#Tournament Sites
	foreach my $tournsite ($old_tourn->tourn_sites) {
		my $ntournsite = $tournsite->copy;
		$ntournsite->tourn($tourn->id);
		$ntournsite->update;
	}


	#Concessions
	foreach my $concession ($tourn->concessions) {

		my $nconcession = $concession->copy;
		$nconcession->tourn($tourn->id);

		$concession_diff = $old_tourn->start - $concession->deadline;
		$deadline_new = $tourn->start - $concession_diff;
		$nconcession->deadline($deadline_new);

		$nconcession->update;
	}

	#Rating/Preference Tiers
	foreach my $rating_tier ($tourn->rating_tiers) {
		my $nrating_tier = $concession->copy;
		$nrating_tier->tourn($tourn->id);
		$nrating_tier->update;
	}

	#Tournament Standing Fees
	foreach my $tourn_fee ($tourn->tourn_fees) {
		my $ntourn_fee = $tourn_fee->copy;
		$ntourn_fee->tourn($tourn->id);

		$tourn_fee_diff = $old_tourn->start - $tourn_fee->start;
		$start_new = $tourn->start - $tourn_fee_diff;
		$ntourn_fee->start($start_new);

		$tourn_fee_diff = $old_tourn->start - $tourn_fee->end;
		$end_new = $tourn->start - $tourn_fee_diff;
		$ntourn_fee->end($deadline_new);

		$ntourn_fee->update;
	}

	#Followers of this tournament, if it's actually the same tournament.
	if ($webname eq $old_tourn->webname) {
		foreach my $follower (Tab::Follow_Tourn->search( tourn => $old_tourn->id )) { 
			$nfollow = $follower->copy;
			$nfollow->tourn($tourn->id);
			$nfollow->update;
		}
	}

	#Timeslots

	my %timeslot_translator = ();

	foreach my $ts ($old_tourn->timeslots) { 

		my $nts = $ts->copy;
		$nts->tourn($tourn->id);

		my $ntstart = $nts->start;
		my $ntend = $nts->end;

		my $ntstart_days_offset = $ntstart->delta_days($ostart);
		my $ntend_days_offset = $ntend->delta_days($ostart);

		$ntstart->set( day => $start->day);
		$ntstart->set( month => $start->month);
		$ntstart->set( year => $start->year);

		$ntend->set( day => $start->day);
		$ntend->set( month => $start->month);
		$ntend->set( year => $start->year);

		$ntstart->add_duration( $ntstart_days_offset );
		$ntend->add_duration( $ntend_days_offset );

		$nts->start($ntstart);
		$nts->end($ntend);
		$nts->update;

		$timeslot_translator{$ts->id} = $nts->id;

	}

	#Judge Groups
	my %judge_group_translator = ();

	foreach my $jg ($old_tourn->judge_groups) { 

		$njg = $jg->copy;
		$njg->tourn($tourn->id);

		$deadline_diff = $old_tourn->start - $jg->deadline;
		$deadline_new = $tourn->start - $deadline_diff;
		$njg->deadline($deadline_new);

		$njg->update;

		#Settings
		foreach my $setting ($jg->settings) {

			$nsetting = $setting->copy;
			$nsetting->judge_group($njg->id);

			if ($nsetting->value eq "date") { 
				$nsetting_diff = $jg->start - $nsetting->value;
				$nsetting_new = $njg->start - $nsetting_diff;
			}

			$nsetting->date($nsetting_new);
			$nsetting->update;
		}

	}

	#Events


		#Pools
		my %pool_translator = ();
		foreach my $op ($old_tourn->pools) {
			my $np = $op->copy;
			$np->tournament($tourn->id);
			$np->update;
			$pool_translator{$op->id} = $np->id;
		}

		#Items/Concessions
		foreach my $ocon ($old_tourn->items) {
			my $ncon = $ocon->copy;
			$ncon->tournament($tourn->id);
			$ncon->update;
		}

		#Sweep points
		foreach my $osw ($old_tourn->sweeps) {
			my $nsw = $osw->copy;
			$nsw->tournament($tourn->id);
			$nsw->update;
		}

		my %event_translator = ();

		#Judge groups

		foreach my $jg ($old_tourn->groups) { 

			my $njg = $jg->copy;

			$njg->tournament($tourn->id);

			if ($njg->deadline) { 
				my $deadline = $njg->deadline;
				my $days_offset = $deadline->delta_days($ostart);

				$deadline->set( month => $start->month);
				$deadline->set( day => $start->day);
				$deadline->set( year => $start->year);
				$deadline->subtract_duration($days_offset);

				$njg->deadline($deadline);
			}
	
			if ($njg->strike_reg_opens) { 
				my $strike_reg_opens = $njg->strike_reg_opens;
				my $days_offset = $strike_reg_opens->delta_days($ostart);
				$strike_reg_opens->set( month => $start->month);
				$strike_reg_opens->set( day => $start->day);
				$strike_reg_opens->set( year => $start->year);
				$strike_reg_opens->subtract_duration($days_offset);
				$njg->strike_reg_opens($strike_reg_opens);
			}

			if ($njg->strike_reg_closes) { 
				my $strike_reg_closes = $njg->strike_reg_closes;
				my $days_offset = $strike_reg_closes->delta_days($ostart);
				$strike_reg_closes->set( month => $start->month);
				$strike_reg_closes->set( day => $start->day);
				$strike_reg_closes->set( year => $start->year);
				$strike_reg_closes->subtract_duration($days_offset);
				$njg->strike_reg_closes($strike_reg_closes);
			}

			$njg->update;

			#Qualification Subsets
			my %subset_translator = ();

			#Quals
			foreach my $oq ($jg->quals) {
				my $nq = $oq->copy;
				$nq->judge_group($njg->id);
				$nq->tournament($tourn->id);
				$nq->update;
			}

			foreach my $qsb (Tab::QualSubset->search( judge_group => $jg->id) ) { 
				my $nqsb = $qsb->copy;
				$nqsb->judge_group($njg->id);
				$nqsb->update;
				$subset_translator{$qsb->id} = $nqsb->id;
			}

			#Registration pools
			foreach my $opg (Tab::PoolGroup->search( judge_group => $jg->id) ) {
				my $npg = $opg->copy;
				$npg->judge_group($njg->id);
				$npg->pool($pool_translator{$opg->pool->id});
				$npg->update;
			}

			#Registration time bins
			foreach my $obin ($jg->bins) { 

				my $nbin = $obin->copy;
				$nbin->judge_group($njg->id);

				my $nstart = $nbin->start;
				my $nend = $nbin->end;

				#Offset in days from the start of the old tournament
				my $nstart_days_offset = $nstart->delta_days($ostart);
				my $nend_days_offset = $nend->delta_days($ostart);

				#Set to the first day of the new tournament
				$nstart->set( month => $start->month);
				$nstart->set( day => $start->day);
				$nstart->set( year => $start->year);

				$nend->set( month => $start->month);
				$nend->set( day => $start->day);
				$nend->set( year => $start->year);

				#Add in the offset
				$nstart->add_duration( $nstart_days_offset );
				$nend->add_duration( $nend_days_offset );

				#Set the new date/time
				$nbin->start($nstart);
				$nbin->end($nend);
				$nbin->update;	
			}
		
			#Events
			foreach my $ev ($jg->events) { 
				my $nev = $ev->copy;
				$nev->tournament($tourn->id);
				$nev->judge_group($njg->id);
				$nev->qual_subset($subset_translator{$ev->qual_subset->id}) if $ev->qual_subset;
		
				if ($nev->deadline) { 
					my $deadline = $nev->deadline;
					my $days_offset = $deadline->delta_days($ostart);
					$deadline->set( month => $start->month);
					$deadline->set( day => $start->day);
					$deadline->set( year => $start->year);
					$deadline->subtract_duration($days_offset);
					$nev->deadline($deadline);
					$njg->update;
				}

				$nev->update;

				$event_translator{$ev->id} = $nev->id;

				# Make the event directory
				system "/bin/mkdir -p $Tab::file_root/files/".$circuit->id."/tournaments/".$tourn->id."/events/".$nev->id;

				# Copy the ballots from the old tournament into it
				system "/bin/cp $Tab::file_root/files/".$circuit->id."/tournaments/".$tourn->id."/events/".$ev->id."/".$ev->ballot." $Tab::file_root/files/".$circuit->id ."/tournaments/". $tourn->id."/events/".$nev->id."/".$nev->ballot;

				#Copy the room pool assignments over
				foreach my $pool ($ev->room_pools) { 
					my $npo = $pool->copy;
					$npo->tournament($tourn->id);
					$npo->event($event_translator{$npo->event->id});
					$npo->update;
				}

			} # End of events

		}
		 # End of judge groups

		# Timeslots

		# These must be translated to the new day, but not the hour.  In order.

		my @ndays;

		foreach my $ots (sort {$a->start->epoch <=> $b->start->epoch} $old_tourn->timeslots) { 
	
			my $nts = $ots->copy;
			$nts->tournament($tourn->id);

			my $ntstart = $nts->start;
			my $ntend = $nts->end;
			my $ntstart_days_offset = $ntstart->delta_days($ostart);
			my $ntend_days_offset = $ntend->delta_days($ostart);

			Tab::log($start);

			$ntstart->set( day => $start->day);
			$ntstart->set( month => $start->month);
			$ntstart->set( year => $start->year);

			$ntend->set( day => $start->day);
			$ntend->set( month => $start->month);
			$ntend->set( year => $start->year);

			$ntstart->add_duration( $ntstart_days_offset );
			$ntend->add_duration( $ntend_days_offset );

			$nts->start($ntstart);
			$nts->end($ntend);
			$nts->update;

			# Rounds
			foreach my $or ($ots->rounds) { 

				my $nr = $or->copy;
				$nr->event($event_translator{$or->event->id});
				$nr->pool($pool_translator{$or->pool->id}) if $or->pool;
				$nr->preset(1) if $nr->type ne "prelim";
				$nr->timeslot($nts->id);
				$nr->site($or->site->id);
				$nr->update;

			}

		}

	} else { 

        my $join = Tab::TournSite->create ({
            tournament => $tourn->id,
            site => $site_id
        });

	}

	# Send email to the circuit administrators

	foreach my $admin ($circuit->admins) { 
	
		my $subject =  $circuit->short_name." Tournament Requested";

		my $body = "
".$account->first." ".$account->last." <".$account->email."> has requested approval for a tournament on tabroom.com in the circuit:\n\n".$circuit->name."\n
Tournament information:\n\n";

		$body .= "\tName: ".$tourn->name."\n";
		$body .= "\tStart Date: ".Tab::nicedate($tourn->start)."\n";
		$body .= "\tEnd Date: ".Tab::nicedate($tourn->end)."\n";
		$body .= "\tLocation: ".$site->name." \n";
		$body .= "\tOnline Registration opens ".Tab::nicedt($tourn->reg_start->set_time_zone($tz))."\n\n";

		$body .="A circuit administrator (such as yourself) must approve this tournament before it can open for online registration. To do so, go to:\n\n".$Tab::url_prefix."/circuit/approvals.mhtml?circuit_id=".$circuit->id."\n\nOr, you can log into Tabroom and click on the Tournaments Pending Approval button on the right.\n\n";


		$m->comp( "/funclib/send_email.mas", from => $account, to => $admin, subject => $subject, body => $body );

	}

	$m->redirect("$Tab::url_prefix/user/request/confirm.mhtml?tourn_id=".$tourn->id);

</%perl>
