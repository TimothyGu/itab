<%args>
	$session
	$tourn_id
	$account
</%args>
<%init>

	# Make sure the user has access to that tournament through whatever pathway.
	my $tourn = Tab::Tourn->retrieve($tourn_id);

    Tab::Tourn->set_sql( by_director => "
        select distinct tourn.* 
        from tourn, tourn_admin
        where tourn.id = tourn_admin.tourn
        and tourn_admin.account = ? 
        order by tourn.end DESC");

	my @auth_tourns = Tab::Tourn->search_by_director($account->id);

    Tab::Circuit->set_sql(by_admin => "
        select distinct circuit.* 
        from circuit, circuit_admin
        where circuit.id = circuit_admin.circuit
        and circuit_admin.account = ? 
        order by circuit.name");

	my @auth_circuits = Tab::Circuit->search_by_admin($account->id);

	my $ok;

	if ($tourn) { 

		my $ncfl;

		$ok++ if $account->site_admin;

		$ok++ if grep $_->id eq $tourn->id, @auth_tourns;

		foreach my $circuit ($m->comp("/funclib/tourn_circuits.mas", tourn => $tourn)) { 
			$ok++ if grep $_->id eq $circuit->id, @auth_circuits;
			$ncfl++ if $tourn->setting("ncfl");	
		}

		if ($ok) { 
		
			$session->tourn($tourn->id);
			$session->update;

			if ($ncfl) { 

				$m->redirect("/register/diocese/dioceses.mhtml");

			} else { 
			
				$m->redirect("/register/index.mhtml");

			}

		} else { 

			my $err = "You do not have administrative access to that tournament.  Please contact the tournament director";
			$err .= "or your circuit administrators if you think this in error";
			$m->redirect("$Tab::url_prefix/user/home.mhtml?err=$err");
		}


	} else { 

		$m->print("<p>That tournament doesn't exist.  Quit messing around with the system.</p>");
		$m->abort;

	}


</%init>
