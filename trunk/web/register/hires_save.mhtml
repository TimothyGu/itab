<%args>
	$tourn
	$group_id
</%args>
<%init>

	my $group = Tab::JudgeGroup->retrieve($group_id);
    my @classes = $group->classes;


	my @judges_by_code = Tab::Judge->search( tournament => $tourn->id, {order_by => "code"});

        my $last_code;

        if (@judges_by_code) {

            my $last_code_judge = pop @judges_by_code;
            $last_code = $last_code_judge->code;
            $last_code++;

        } else {
            $last_code = 100;
        }



	foreach my $tick (1 .. 10) { 

		my $first_key = "first_".$tick;
		my $last_key = "last_".$tick;
		my $notes_key = "notes_".$tick;
		my $special_key = "special_".$tick;
		my $active_key = "active_".$tick;

		$last_code++;

		my $active = $ARGS{$active_key};
		$active = 0 unless $active;

		if ($ARGS{$first_key}) { 

			my $judge = Tab::Judge->create({
				
				first 	=> $ARGS{$first_key},
				last 	=> $ARGS{$last_key},
				notes 	=> $ARGS{$notes_key},
				special => $ARGS{$special_key},
				active 	=> $active,
				spare_pool 	=> 1,
				judge_group => $group->id,
				tournament	=> $tourn->id,
				code 		=> $last_code

			});

        	foreach my $class (@classes) {
			
            	my $qual_key = "class_qual_".$class->id."_".$tick;
            	my $qual_id = $ARGS{$qual_key};

            	my $judge_class = Tab::JudgeClass->create({
                	tournament => $tourn->id,
                	judge => $judge->id,
                	class => $class->id,
                	qual => $qual_id

            	});

			}

		}

	}

	$m->redirect("$Tab::url_prefix/register/hires.mhtml?group_id=$group_id");


</%init>
