<%args> 
	$account
	$entry_id
	$tourn
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);

	my $event = $entry->event;
	my $school = $entry->school;

	my @ballots = $entry->ballots;

	foreach (@ballots) {
		$_->delete;
	}

	my $entry_code = $entry->code;

	my @students = $m->comp("/funclib/entry_students.mas", entry => $entry);

	my $regline = "Entry ".$m->comp('/funclib/entry_code.mas', full => 1, entry => $entry)." dropped in ".$entry->event->abbr;;

	my $change = Tab::TournChange->create({
		tourn => $tourn->id,
		school => $entry->school->id,
		type => "registration",
		text => $regline,
		account => $account->id
	}); 

	system "$Tab::eventlogger $regline";

	$entry->delete;

	# Delete housing requests unless the student(s) are entered in other events

	if ($tourn->setting("housing")) { 
		foreach my $student (@students) { 
		
		unless ($m->comp("/funclib/student_entries.mas", tourn => $tourn)) { 

			my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);
	   		my $day_before = $days[0]->clone;
			$day_before->subtract( days => 1);
			push (@days, $day_before);

			foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {

				foreach my $housing ($student->housing($tourn,$day)) { 

					$housing->delete if $housing;

				}
			}
		} 
		}
	}


	my $msg = "Entry ". $entry_code ." deleted";

	$m->redirect("$Tab::url_prefix/register/school/entries.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");

</%init>
