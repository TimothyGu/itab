<%args>
	$tourn
	$event_id
	$school_id
	$account
	$title => undef
	$seed => undef
	$code => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	my $school = Tab::School->retrieve($school_id);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	
    my $now = DateTime->now;
    $now->set_time_zone($tz);

    my $fine_deadline = $tourn->setting("fine_deadline");
    $fine_deadline->set_time_zone($tz) if $fine_deadline;
	my $fine_amount = $tourn->setting("add_fine") if $now > $fine_deadline;

	my $minimum = $event->setting("min_entry");

	my %already;

	my $err;
	
	foreach my $slot (1 .. $event->setting("max_entry")) { 

		if ($slot < $minimum && not defined $ARGS{$slot}) { 
			$err = "You did not enter enough students for a valid entry";
			$m->redirect("entries.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		if ($already{$ARGS{$slot}}) { 
			$err = "You entered the same student twice.  Please try again";
			$m->redirect("entries.mhtml?school_id=$school_id&event_id=$event_id&err=$err");
		}

		$already{$ARGS{$slot}}++;

	}

	my $entry = Tab::Entry->create({ 
		tourn         => $tourn->id,
		school        => $school_id,
		event         => $event_id,
		title		  => $title,
		reg_time 	  => $now,
		reg_by		  => $account->id,
		dropped       => 0
	});

	my @students;

	foreach my $student_id (keys %already) { 
		$entry->add_student($student_id);
		push (@students, Tab::Student->retrieve($student_id));
	}

	if ($now > $fine_deadline) { 

		my $add_reason = "Late Add in ". $entry->event->abbr;

		my $fine = Tab::SchoolFine->create({ 
			school => $school_id,
			amount => $fine_amount,
			reason => $add_reason,
			levied_on => $now,
			levied_by => $account->id
		}) if $fine_amount > 0;
		
	}

	my $codes = $event->setting("code_style");

	my $name;

	if ($codes eq "numbers") { 
		$code = $m->comp("/funclib/event_code.mas", event => $event);

	} elsif ($codes eq "school_number") { 

		$code = $school->code." ".$m->comp("/funclib/event_code.mas", event => $event);

	} elsif ($codes eq "initials" || $codes eq "register") { 

		$code = $school->code;
		$code = $m->comp("/funclib/school_codename.mas", school => $school) unless $code;
		$code = $m->comp("/funclib/school_codename.mas", school => $school) if $tourn->setting('school_codes') eq "incremental";
		$code.= " ";

		my $initials;

		if (scalar @students == 1) { 
			$initials .= ucfirst substr($students[0]->first, 0, 1). ucfirst substr($students[0]->last, 0, 1);
		} else {
			foreach my $student (@students) {
				$initials .= ucfirst substr ($student->last, 0, 1);
			}
		}
		
		my $other = Tab::Entry->search( code => $code.$initials, school => $school->id, event => $event->id )->first;

		my $counter;

		while ($other) {
			$counter++;	
			undef $other;
			$other = Tab::Entry->search( code => $code.$initials.$counter, school => $school->id, event => $event->id )->first;
		}

		$err .= "Code $initials already existed. You can choose another or keep $code$initials$counter as the code" if $counter;
		$err = "Enter a designation for this entry.  Limit of 10 characters for the code." if $codes eq "register";
		$code .= $initials.$counter;

	}

	if (scalar @students > 2) { 

		$name = $school->short_name." ";
		foreach my $stud (@students) { 
			$name .= ucfirst substr($stud->last,0,1) if $stud;
		}

	} else { 

		$name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
		$name = $students[0]->last." & ".$students[1]->last if scalar @students == 2;
	}

	$entry->name($name);
	$entry->code($code);
	$entry->update;
	
	my $msg = "Competitor entered late in ". $event->name." with code $code";
	$m->redirect("code_duplicate.mhtml?school_id=$school_id&event_id=$event_id&savemsg=$msg");

</%init>


