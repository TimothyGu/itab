<%args> 
	$account
	$comp_id
	$tourn
	$from => undef
</%args>

<%init>
#/
	my $comp = Tab::Entry->retrieve($comp_id);

	my $c_tourn = $comp->tournament;
	my $school_id = $comp->school->id;
	my $event_id = $comp->event->id;

	unless ($c_tourn->id eq $tourn->id) { 

		my $err = "That competitor does not belong to your tournament";
		$m->redirect("Tab::url_prefix/register/entries.mhtml?err=$err&school_id=$school_id");

	}

	my @ballots = $comp->ballots;

	foreach (@ballots) {

		$_->delete;

	}

	my $comp_code = $comp->code;
	my $student = $comp->student;
	my $partner = $comp->partner;

	my $regline = $account->first." ".$account->last." dropped entry in ".$comp->event->abbr." ".$comp->code;

	my $change = Tab::Change->create({
		tournament => $tourn->id,
		school => $school_id,
		type => "registration",
		regline => $regline
	}); 

	system "$Tab::eventlogger $regline";

	$comp->delete;

	# Delete housing requests unless the student(s) are entered in other events
	
	if ($student) {
		
		unless ($student->entries($tourn)) { 

			my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);
	   		my $day_before = $days[0]->clone;
			$day_before->subtract( days => 1);
			push (@days, $day_before);

			foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {

				foreach my $housing ($student->housing($tourn,$day)) { 

					$housing->delete if $housing;

				}
			}
		} 
	}

	if ($partner) {
		
		unless ($partner->entries($tourn)) { 
			foreach my $housing ($partner->housing($tourn)) { 
				$housing->delete if $housing && $housing->id;
			}
		} 
	}

	my $err = "Entryetitor ". $comp_code ." deleted";

	$m->redirect("$Tab::url_prefix/register/comp_enter.mhtml?err=$err&school_id=$school_id&event_id=$event_id") if $from eq "comp_enter";

	$m->redirect("$Tab::url_prefix/register/entries.mhtml?err=$err&school_id=$school_id");


</%init>
