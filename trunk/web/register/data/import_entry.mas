<%args>
	$circuit
	$tourn
</%args>

<%init>

# Get the upload and create the file handle.

	my $upload_file = $r->upload;
	my $upload_fh = $upload_file->fh;
	my @entries;

	# Fix line breaks

	while (<$upload_fh>) {
		s/\015\012?|\r\n?|\012|\n|\015/\n/g;
		s/\n\s?\n\s?\n\s?/\n/g;
		push @entries, $_;  
	}

	my $count;

ENTRY:
	foreach my $entry (@entries) { 

		my @fields = split(/,/,$entry);

		my $event_name = shift @fields;
		chomp $event_name;

		my @events = Tab::Event->search( name => $event_name, tournament => $tourn->id );

		next ENTRY unless (@events);

		my $event = shift @events;


		if ($event->team == 1) { 		
	
			my ($firstname, $lastname, $school_name) = @fields;
			
			chomp $firstname;
			chomp $lastname;
			chomp $school_name;

			my @schools = Tab::School->search( name => $school_name, tournament => $tourn->id );

			my $school;
			my $chapter;

			unless (@schools) { 

				$chapter = Tab::Chapter->create({

					name => $school_name

				});

				$school = Tab::School->create({ 

					name => $school_name,
					chapter => $chapter->id,
					region => $chapter->region($circuit)->id,
					tournament => $tourn->id

				});


			} else { 

				$school = shift @schools;
				$chapter = $school->chapter;

			}
			
			my @students = Tab::Student->search( first => $firstname, last => $lastname, chapter => $chapter->id );
			my $student = shift (@students);

			if ($student) { 

				# A student may not be entered in the same event twice

				my @existing_entries = Tab::Entry->search( event => $event->id, student => $student->id );
				next ENTRY if (@existing_entries);

			}
			
			unless ($student) { 

				$student = Tab::Student->create({

					first => $firstname,
					last => $lastname,
					chapter => $chapter->id

				});

			}

			my @code_order = Tab::Entry->search( event => $event->id, {order_by => "code"} );

			my $code;
			if (@code_order) { 
				my $last_code = pop @code_order;
				$code = $last_code->code;
				$code++;
			} else { 

				$code = $event->code;

			}

			my $comp = Tab::Entry->create({ 
		
				tournament => $tourn->id,
				school => $school->id,
				event => $event->id,
				code => $code,
				student => $student->id,
				dropped => 0
			});

			$count++;
		}

		if ($event->team == 2) { 

			my ($firstname1, $lastname1, $firstname2, $lastname2, $school_name) = @fields;
			
			chomp $firstname1;
			chomp $lastname1;
			chomp $firstname2;
			chomp $lastname2;
			chomp $school_name;

			my @schools = Tab::School->search( name => $school_name, tournament => $tourn->id );
			
			my $chapter;
			my $school;

			unless (@schools) { 

				$chapter = Tab::Chapter->create({

					name => $school_name

				});

				$school = Tab::School->create({ 

					name => $school_name,
					chapter => $chapter->id,
					tournament => $tourn->id

				});


			} else { 

				$school = shift @schools;
				$chapter = $school->chapter;

			}


			my @students = Tab::Student->search( first => $firstname1, last => $lastname1, chapter => $chapter->id );
			my $student = shift (@students);

			my @partners = Tab::Student->search( first => $firstname2, last => $lastname2, chapter => $chapter->id );
			my $partner = shift (@partners);

			if ($student) { 

				# A student may not be entered in the same event twice

				my @existing_entries = Tab::Entry->search( event => $event->id, student => $student->id );
				push (@existing_entries, Tab::Entry->search( event => $event->id, partner => $student->id ));
				next ENTRY if (@existing_entries);

			}
			
			unless ($student) { 

				$student = Tab::Student->create({

					first => $firstname1,
					last => $lastname1,
					chapter => $chapter->id

				});

			}

			if ($partner) { 

				# A partner may not be entered in the same event twice

				my @existing_entries = Tab::Entry->search( event => $event->id, student => $partner->id );
				push (@existing_entries, Tab::Entry->search( event => $event->id, partner => $partner->id ));
				next ENTRY if (@existing_entries);

			}
			
			unless ($partner) { 

				$partner = Tab::Student->create({

					first => $firstname2,
					last => $lastname2,
					chapter => $chapter->id

				});

			}
			

			my @code_order = Tab::Entry->search( event => $event->id, {order_by => "code"} );

			my $code;
			if (@code_order) { 
				my $last_code = pop @code_order;
				$code = $last_code->code;
				$code++;
			} else { 

				$code = $event->code;

			}
			
			my $comp = Tab::Entry->create({ 
		
				tournament => $tourn->id,
				school => $school->id,
				event => $event->id,
				code => $code,
				student => $student->id,
				partner => $partner->id,
				dropped => 0

			});

			$count++;


		}

		if ($event->team == 3) { 

			my ($team_name, $school_name) = @fields;

			my @schools = Tab::School->search( name => $school_name, tournament => $tourn->id );

			my $chapter;
			my $school;

			unless (@schools) { 

				$chapter = Tab::Chapter->create({

					name => $school_name

				});

				$school = Tab::School->create({ 

					name => $school_name,
					chapter => $chapter->id,
					tournament => $tourn->id

				});


			} else { 

				$school = shift @schools;
				$chapter = $school->chapter;

			}
			

			my @existing_comp = Tab::Entry->search( name => $team_name, school => $schools[0]->id );

			next ENTRY if (@existing_comp);

			my @code_order = Tab::Entry->search( event => $event->id, {order_by => "code"} );
			
			my $code;

			if (@code_order) { 

				my $last_code = pop @code_order;
				$code = $last_code->code;
				$code++;
			
			} else { 

				$code = $event->code;

			}

			
			my $comp = Tab::Entry->create({ 

				name => $team_name,
				tournament => $tourn->id,
				school => $school->id,

			});

			$count++;


		}


	}	

	my $err = "$count entries uploaded into database";

	$m->redirect("$Tab::url_prefix/register/import.mhtml?err=$err&save_file=import");


</%init>
