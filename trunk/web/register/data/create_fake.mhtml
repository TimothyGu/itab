<%args>
	$circuit
	$tourn
	$num_schools
	$num_kids
</%args>
<%init>

	my @regions = $circuit->regions if $tourn->setting("regions");

	my $length = $#regions;

	my %kids_by_event =();

#	this will be the grad year of all your fake kids
	my $year = DateTime->now->year;
	$year++;

	my $judge_code = 1;

	my @events = $m->comp("/funclib/tourn_events.mas", tourn => $tourn);
	my @groups = $tourn->groups;
	my $max = (3 * $num_kids) / $num_schools;

	$m->print("Maximum is $max <br>\n");

	my $default_qual = $tourn->method->default_qualification->id if $tourn->method->judge_quality_system;
	
	foreach (1 .. $num_schools) { 
	
		my $chapter = Tab::Chapter->create({
			name => "Chapter $_"
		});

		my $chap_memb = Tab::ChapterCircuit->create({
			chapter => $chapter->id,
			circuit => $circuit->id,
			full_member => 1,
			active => 1 
		});

		if (@regions) { 
			#picks a random region and then throws the chapter into it. 	
			$chap_memb->region($regions[int rand($#regions)]->id);
			$chap_memb->update;
		}

		my $school = Tab::School->create({
			tournament => $tourn->id,
			chapter => $chapter->id,
		});	

		foreach my $event (@events) { 

			my $kids = int rand($max);

			$m->print("Event ".$event->name." for school ". $chapter->name .": $kids kids\n<br>"); 
#			$m->print("Event full: ". $kids_by_event{$event->id}." \n <br>");

			next if ( ($kids + $kids_by_event{$event->id}) > $num_kids );

			$kids_by_event{$event->id} = $kids_by_event{$event->id} + $kids;
			
			foreach (1 .. $kids) {

				my $student = Tab::Student->create({
					first => $chapter->name,
					last  => $_,
					chapter => $chapter->id,
					grad_year => $year 
				});

				my $entry = Tab::Entry->create({ 
					code => $event->next_code,
					tournament => $tourn->id,
					school => $school->id,
					event => $event->id,
					student => $student->id });

				if ($event->team == 2) { 

					my $partner = Tab::Student->create({
						first => $chapter->name,
						last => $_.".2",
						chapter => $chapter->id,
						grad_year => $year
					});

					$entry->partner($partner->id);
					$entry->update;
				} # end of if duo event.

			} # end of foreach kid
		}# end of foreach event;

		my $judge_letter = "A";
		foreach my $group (@groups) { 

			my @classes = $group->classes;

			my $judge_obl = $m->comp("/funclib/judge_obligation.mas", circuit => $circuit, school => $school, group => $group);	

			foreach (1 .. $judge_obl) { 

				my $judge = Tab::Judge->create({
					first => $chapter->name,
					last  => $judge_letter,
					code  =>$judge_code,
					school => $school->id,
					judge_group => $group->id,
					active => 1
				});

				if ($default_qual) { 
					foreach my $class (@classes) { 
						my $jc = Tab::JudgeClass->create({ 
							judge => $judge->id,
							class => $class->id,
							qual => $default_qual,
							tournament => $tourn->id
						});
					}
				}
		
			$judge_letter++;
			$judge_code++;
			
			} #end of foreach judge obl.
		} #end of foreach group
	} # end of foreach school

	

</%init>
