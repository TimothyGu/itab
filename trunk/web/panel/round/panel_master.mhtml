<%args>
	$tourn
	$event_id => undef
	$round_id => undef
	$all => undef
</%args>
<%init>

	my @events;
	my @rounds;

	my %num_panels_by_event = ();
	my %num_panels_by_round = ();

	if ($round_id) { 

		my $round = Tab::Round->retrieve($round_id);
		$num_panels_by_round{$round->id} = scalar $round->panels;
		push (@rounds, $round);
		push (@events, $round->event);

	} elsif ($all) { 

		foreach my $event ($tourn->events) { 
			next unless $ARGS{"do_".$event->id};
			push (@events, $event);
			$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$event->id};
			$num_panels_by_event{$event->id} = $ARGS{"force_num_panels_".$event->id} if $ARGS{"force_num_panels_".$event->id};
		}

	} else { 

		my $event = Tab::Event->retrieve($event_id);

		push (@events, $event);

		foreach my $round ($event->rounds) { 
			next unless $ARGS{"do_".$round->id};
			push (@rounds, $round);
			$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};
			$num_panels_by_round{$round->id} = $ARGS{"force_num_panels_".$round->id} if $ARGS{"force_num_panels_".$round->id};
		}

	}

	my @judge_me;
	my @groups;

	foreach my $event (@events) { 

		my $num_panels = $num_panels_by_event{$event->id};

		if ($event->type eq "speech") { 

			my @event_rounds = @rounds if @rounds;
			@event_rounds = $event->rounds(type => "prelim") unless @event_rounds;

			foreach my $round (@event_rounds) { 

				$num_panels = $num_panels_by_round{$round->id} if $num_panels_by_round{$round->id};
				$m->comp("pair_speech.mas", round => $round, num_panels => $num_panels) if $round && $num_panels;

				if ($ARGS{"room_".$event->id}) {
				

					my @panels = sort {$a->letter cmp $b->letter} $round->panels;

					foreach my $panel (@panels) { 
						my @rooms = $m->comp("/funclib/clean_rooms.mas", panel => $panel);
						my $room = shift @rooms;
						$panel->room($room->id) if $room;
						$panel->update;
					}

				}

				push (@judge_me, $round) if $ARGS{"judge_".$event->id};
				push (@groups, $event->judge_group) if $ARGS{"judge_".$event->id};

				$m->print("Done.</p>");

			}

		} elsif ($event->type eq "congress") { 

			my @event_rounds = @rounds if @rounds;
			@event_rounds = $event->rounds(type => "prelim") unless @event_rounds;

			foreach my $round (@event_rounds) { 
				$num_panels = $num_panels_by_round{$round->id} if $num_panels_by_round{$round->id};
				$m->comp("pair_congress.mas", round => $round, num_panels => $num_panels);
			}

		} else { 

			my @event_rounds = @rounds if @rounds;
			@event_rounds = $event->rounds(type => "preset") unless @event_rounds;

			foreach my $round (@event_rounds) { 
				$num_panels = $num_panels_by_round{$round->id} if $num_panels_by_round{$round->id};
				$m->comp("pair_debate.mas", round => $round, flighting => $num_panels);
			}

		}


	}

	my %gseen = (); 
	@groups = grep { ! $gseen{$_->id} ++ } @groups;

	foreach my $group (@groups) { 
		$m->print("Judging up group ".$group->name);
		$m->comp("tourn_judges.mas", group => $group, roundref => \@judge_me, tourn => $tourn) if @judge_me;
	}

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round_id) if $round_id;
	$m->redirect("/panel/report/disasters.mhtml?event_id=".$event_id);

</%init>
