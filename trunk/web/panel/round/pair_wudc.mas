<%args>
	$round
	$debug => 0
	$entries_ref => undef
</%args>
<%perl>

	use POSIX;
	use List::Util 'shuffle';
	my $event = $round->event;

	my @entries = ${$entries_ref} if $entries_ref;

	@entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 ) unless @entries;

	Tab::BallotValue->set_sql( get_ranks => "
		select distinct ballot_value.*, entry.id as entryid
		from ballot, entry, ballot_value
		where entry.event = ? 
		and entry.id = ballot.entry
		and ballot.id = ballot_value.ballot
		and ballot_value.tag = \"rank\"
		order by entry.id
	");
	
	my @values = Tab::BallotValue->search_get_ranks($event->id);

	my %entry_score = ();

	foreach my $value (@values) { 
		$entry_score{$value->entryid} += (4 - $value->value);
	}

	my @position_array = shuffle( 1, 2, 3, 4);

	my %positions = ();
	my @other_ballots = $m->comp("/funclib/other_ballots.mas", round => $round);



	foreach my $ballot (@other_ballots) { 
		next unless $ballot->chair;
		$positions{$ballot->entry->id."-".$ballot->speakerorder}++;
	}

	my %can_do = ();

	foreach my $entry (@entries) { 

		my %position_count = ();

		my $min_count;

		foreach my $position ( @position_array ) {

			if ($positions{$entry->id."-".$position}) { 
				$position_count{$position}++;
			}

			$min_count = $position_count{$position} if $min_count > $position_count{$position};
		}


		foreach my $position (@position_array) { 
			if ($position_count{$position} == $min_count) { 
				$can_do{$entry->id."-".$position}++;
			}

		}

	}

	my %panels = ();
	my $panel_count;

	@entries = shuffle(@entries);
	@entries = sort {$entry_score{$b->id} <=> $entry_score{$a->id}} @entries;

	my @used;
	my %used_position;
	my %used_panel;

	while (@entries) {

		$panel_count++;
		my $min_score = $entry_score{$entries[3]->id} ;


		foreach my $position (@position_array) { 

			next unless @entries;
			my $victim;
			my $index = 0;
			
			ENTRY:
			foreach my $entry (@entries) { 
				if ($can_do{$entry->id."-".$position} && $entry_score{$entry->id} >= $min_score) {
					$victim = $entry;
					last ENTRY;
				} else {
					$index++;
				}
			}

			my $swap;
			my $swap_position;

			unless ($victim) { 

				my $swapdex;
			
				USED:
				foreach my $used (@used) { 
					
					next if $used_position{$used->id} == $position;

					if ($entry_score{$used->id} == $min_score && ($can_do{$used->id."-".$position})) { 

						$swapdex = 0;

						foreach my $entry (@entries) { 
							if ($can_do{$entry->id."-".$used_position{$used->id}} && $entry_score{$entry->id} >= $min_score) {
								$victim = $used;
								$swap = $entry;
								last USED;
							} else { 
								$swapdex++;
							}
						}
					}
				}

				if ($swap) { 
				

					$panels{$panel_count."-".$position} = $victim;
					$panels{$used_panel{$victim->id}."-".$used_position{$victim->id}} = $swap;

					push (@used, $swap); #I FEEL SO USED;
					splice @entries, $swapdex, 1 unless $swapdex > scalar @entries;

					$used_position{$swap->id} = $used_position{$victim->id};
					$used_panel{$swap->id} = $used_panel{$victim->id};

					$used_position{$victim->id} = $used_position{$position};
					$used_panel{$victim->id} = $used_panel{$panel_count};

				} else { 
				
				
					# If we haven't found someone within the appropriate bracket
					# who can speak here, just pick some poor sucker.

					$index = 0;

					ENTR1:
					foreach my $entry (@entries) { 
						if ($entry_score{$entry->id} >= $min_score) {
							$victim = $entry;
							last ENTR1;
						} else {
							$index++;
						}
					}

					unless ($victim) { 
					

						$index = 0;

						ENTR2:
						foreach my $entry (@entries) { 
							if ($entry_score{$entry->id} >= $min_score - 1) {
								$victim = $entry;
								last ENTR2;
							} else {
								$index++;
							}
						}
					}

				}

			}

			unless ($swap) {
				splice @entries, $index, 1 unless $index > scalar @entries;
				$panels{$panel_count."-".$position} = $victim;
				push (@used, $victim); #I FEEL SO USED;
				$used_position{$victim->id} = $position;
				$used_panel{$victim->id} = $panel_count;
			}
		}
	}

	#Out with the old.

	Tab::BallotValue->set_sql( delete_round => "
		delete ballot_value from ballot_value, ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
	");

	Tab::Ballot->set_sql( delete_round => "
		delete ballot from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
	");

	Tab::Panel->set_sql( delete_round => "
		delete from panel where round = ?
	");

	Tab::BallotValue->sql_delete_round->execute($round->id);
	Tab::Ballot->sql_delete_round->execute($round->id);
	Tab::Panel->sql_delete_round->execute($round->id);

	foreach my $key (1 .. $panel_count) { 

		my $bracket;

		foreach my $position (@position_array) { 
			my $entry = $panels{$key."-".$position};
			$bracket = $entry_score{$entry->id} if $bracket < $entry_score{$entry->id};
		}

		$bracket = 0 unless $bracket;
		
		my $panel = Tab::Panel->create({
			round => $round->id,
			letter => $key,
			bracket => $bracket
		});

		foreach my $position (@position_array) { 

			my $entry = $panels{$key."-".$position};

			if ($entry) { 
				my $ballot = Tab::Ballot->create({
					panel => $panel->id,
					judge => 0,
					entry => $entry,
					speakerorder => $position
				})
			}
		}
	}

	return;

</%perl>
