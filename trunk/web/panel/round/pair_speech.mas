<%args>
	$round
	$num_panels
	$debug => 1
</%args>
<%perl>

	use POSIX;

	my $event = $round->event;

	Tab::debuglog("Paneling ".$round->realname." of ".$event->name) if $debug;

	my @all_entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 );

	my $panel_size = ceil(scalar @all_entries / $num_panels);
	my %panel_cohorts = ();

	my $count;
	my $cohort = 1;

	#Prime the panel scorer 
	my @other_ballots = $m->comp("/funclib/other_ballots.mas", round => $round);
	Tab::debuglog("I have found ".scalar @other_ballots." other ballots.") if $debug;

	my %panels_by_id = ();
	my %panels_by_entry = ();

	foreach my $ob (@other_ballots) { 
		push (@{$panels_by_id{$ob->panel->id}}, $ob->entry->id);
		push (@{$panels_by_entry{$ob->entry->id}}, $ob->panel->id);
	}

	my %entry_hits = ();
	my %school_hits = ();
	my %own_school_hits = ();
	my %size_of_school = ();

	my %school_by_entry = ();
	my @schools;

	Tab::debuglog("Hashing entries!") if $debug;

	foreach my $entry (@all_entries) { 

		$school_by_entry{$entry} = $entry->school->id;

		push (@schools, $school_by_entry{$entry});
		$size_of_school{$school_by_entry{$entry}}++;

		foreach my $panel_id (@{$panels_by_entry{$entry->id}}) {

			foreach my $other_id (@{$panels_by_id{$panel_id}}) { 
				
				next if $other_id <= $entry->id; #Avoid myself and double counting

				$entry_hits{$entry->id."-".$other_id}++;
				$school_hits{$entry->id."-".$school_by_entry{$other_id}}++;

				if ($school_by_entry{$other_id} == $school_by_entry{$entry}) { 
					$own_school_hits{$entry->id}++;
				}

			}
		}
	}

	my %sseen = (); 
	@schools = grep { ! $sseen{$_} ++ } @schools;
	@schools = sort {$size_of_school{$b} <=> $size_of_school{$a}} @schools;
	my %school_rank = ();

	my $ranker = 1;
	foreach (@schools) { 
		$school_rank{$_} = $ranker++;
	}

	Tab::debuglog("Setting up initial panels") if $debug;

	@all_entries = sort { $school_rank{$school_by_entry{$b}} <=> $school_rank{$school_by_entry{$a->id}} } @all_entries;

	#Set up the initial panels
	my $max_size = ceil(scalar @all_entries / $num_panels);
	my $min_size = floor(scalar @all_entries/ $num_panels);
	my $remainder = (scalar @all_entries - ($num_panels * $min_size));

	Tab::debuglog("Max is $max_size, min is $min_size, remainder is $remainder on ".scalar @all_entries." entries");

	my %panels = ();

	use List::Util 'shuffle';
	my @keys =  shuffle( 1 .. $num_panels);

	foreach my $entry (@all_entries) { 

		my $score = "3141592653";
		my $picked_key;

		KEY:
		foreach my $key (@keys) { 

			next if $score == 0;

			my @panel = @{$panels{$key}} if $panels{$key};
			next KEY if (scalar @panel == $max_size);

			if (scalar @panel == $min_size) {
				next KEY unless $remainder > 0;
			}

			if (@panel) { 

				push (@panel, $entry);
			
				Tab::debuglog("Scoring panel $key") if $entry->id == "342971" ;
				my $new_score = score_panel(\@panel, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry);
				$new_score = score_panel(\@panel, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry, $key) if $entry->id == 342971;;
				Tab::debuglog("Panel score is $new_score") if $entry->id == "342971" ;

				if ($new_score < $score) { 

					Tab::debuglog("$new_score is picked over $score") if $entry->id == "342971" ;

					$picked_key = $key;
					$score = $new_score;
					last KEY if $score == 0;
				}

			} else {
					
				Tab::debuglog("Panel was empty.  Shove it in") if $entry->id == "342971" ;
				$picked_key = $key;
				$score = 0;
				last KEY;
			}

		}

		$remainder-- if $panels{$picked_key} && scalar @{$panels{$picked_key}} == $min_size;
		push (@{$panels{$picked_key}}, $entry);

		my $k = shift @keys;
		push (@keys, $k);

	}

	foreach my $key (sort {$a <=> $b} keys %panels) {
	
		my $panel_string;

		foreach (@{$panels{$key}}) { 
			$panel_string .= " ".$_->code;
		}
	
		Tab::debuglog("Panel $key: $panel_string")
	}

	my $counter;

	foreach $counter (1) { 

		Tab::debuglog("Here we go! Count is at ".$counter);

		my $touched;
		my $no_improvement = 0;

		foreach my $panel_key (sort {$a <=> $b} keys %panels) { 
		
			my @panel = @{$panels{$panel_key}};

			my $entry_panel1_score = score_panel(\@panel, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry);
			next if $entry_panel1_score == 0;

			foreach my $entry (@panel) { 
			
				Tab::debuglog("Swapping for entry 113.  Current score is $entry_panel1_score") if $entry->id == "342971" ;

				my @panel1 = @panel; 							# Remove the candidate for a test array of original panel
				my $index = 0;
				$index++ until $panel1[$index]->id == $entry->id;
				splice(@panel1, $index, 1);

				my $swap_panel;
				my $swap_entry;
				my $current_swap_score;

				my @new_entry_panel;
				my @new_swap_panel;
	
				OTHERPANEL:
				foreach my $other_key (keys %panels) { 

					next if $swap_entry && $current_swap_score == 0;

					next if $other_key == $panel_key; 				# Can't switch to the same panel

					Tab::debuglog("Checking out $other_key") if $entry->id == "342971" ;

					my @panel2 = @{$panels{$other_key}}; 			# Find the other panel for scoring
					my $other_panel2_score = score_panel(\@panel2, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry);

					push (@panel2, $entry);							# Put me into this panel for testing

					my (@scores);

					OTHERENTRY:
					foreach my $other_entry (@{$panels{$other_key}}) {
						
						next if $swap_entry && $current_swap_score == 0;

						push (@panel1, $other_entry);				# Add swap candidate to original panel
						my $other_panel1_score = score_panel(\@panel1, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry);

						my $index = 0;								# Remove swap candidate from the panel
						$index++ until $panel2[$index]->id == $other_entry->id;
						splice(@panel2, $index, 1);
						my $entry_panel2_score = score_panel(\@panel2, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry);

						my $swap_score = $entry_panel2_score + $other_panel1_score;
						my $squo_score = $entry_panel1_score + $other_panel2_score;

						my $replace = pop(@panel1);  #remove me from this panel
						push (@panel2, $replace);    #put me back from whence I came

						if ( ($current_swap_score && $swap_score < $current_swap_score) || 
							 ($current_swap_score < 1 && $swap_score < $squo_score) ) {

							Tab::debuglog("Picking $swap_score over $current_swap_score and $squo_score") if $debug;

							$current_swap_score = $swap_score;
							$swap_entry = $other_entry;
							$swap_panel = $other_key;

							last OTHERENTRY if $swap_score == 0;  # If we're in nirvana, look no further
							last OTHERPANEL if $swap_score == 0;

						}

					}

				}

				if ($swap_entry) { 

					Tab::debuglog("Swapped ".$swap_entry->code." in for ".$entry->code.".  New score $current_swap_score") if $debug;
					my @panel2 = @{$panels{$swap_panel}};

					push (@panel1, $swap_entry);

					my $swapdex = 0;
					$swapdex++ until $panel2[$swapdex]->id == $swap_entry->id;
					splice(@panel2, $swapdex, 1);

					push (@panel2, $entry);

					my $panel1_string = "Size ".scalar @panel1;
					my $panel2_string = "Size ".scalar @panel2;
					
					foreach (@panel1) { 
						$panel1_string .= " ".$_->code; 
					}

					foreach (@panel2) { 
						$panel2_string .= " ".$_->code; 
					}

					Tab::debuglog("Panel1 is now ".$panel1_string) if $debug;
					Tab::debuglog("Panel2 is now ".$panel2_string) if $debug;

					$no_improvement++;  # Fail
					@{$panels{$panel_key}} = @panel1;
					@{$panels{$swap_panel}} = @panel2;

					@panel = @panel1;

				}
			}
		}
	}

	my @judges = $m->comp("/funclib/round_judges.mas", round => $round);
	my @judge_keys;

	my %judge_panel = ();
	foreach my $judge (@judges) { 
		push (@{$judge_panel{$judge->panelid}}, $judge->id);
		push (@judge_keys, $judge->panelid);
	}

	my %jseen = (); 
	@judge_keys = grep { ! $jseen{$_->id} ++ } @judge_keys;

	my @rooms = $m->comp("/funclib/round_rooms.mas", round => $round);

	#Clear out the old

	Tab::BallotValue->set_sql( delete_round => "
		delete ballot_value from ballot_value, ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
	");

	Tab::Ballot->set_sql( delete_round => "
		delete ballot from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
	");

	Tab::Panel->set_sql( delete_round => "
		delete from panel where round = ?
	");

	Tab::BallotValue->sql_delete_round->execute($round->id);
	Tab::Ballot->sql_delete_round->execute($round->id);
	Tab::Panel->sql_delete_round->execute($round->id);

	my $letter = 1;

	Tab::debuglog("Writing panels") if $debug;

	foreach my $panel_key (keys %panels) { 

		my $room = shift @rooms if @rooms;
		my $room_id = 0;
		$room_id = $room->id if $room;

		my $jpanel = shift @judge_keys if @judge_keys;
		my @judge_ids = @{$judge_panel{$jpanel}} if $jpanel;
		@judge_ids = ("0") unless @judge_ids;

		my @entries = @{$panels{$panel_key}};
		my $pan_ent;
		
		my $score = score_panel(\@entries, \%entry_hits, \%school_hits, \%own_school_hits, \%school_by_entry, $panel_key);

		my $panel = Tab::Panel->create({
			round => $round->id,
			room => $room_id,
			letter => $panel_key,
			score => $score
		});

		foreach my $judge_id (@judge_ids) { 

			foreach my $entry (@entries) { 

				next unless $entry && $entry->id;
				$pan_ent .= " ".$entry->code;

				my $ballot = Tab::Ballot->create({
					panel => $panel->id,
					judge => $judge_id,
					entry => $entry->id
				})

			}
		
		}

		$letter++;
	}

	return;

	sub score_panel {

		my ($panref, $entref, $schref, $ownschref, $schent, $pankey) = @_;

		my @pan_entries = @$panref;
		my %entry_hits = %$entref;

		my %school_hits = %$schref;
		my %own_school_hits = %$ownschref;
		my %school_by_entry = %$schent;

		my $score = 0;
		my $tick;

		foreach my $entry (@pan_entries) { 

			foreach my $other (@pan_entries) { 
				next if $other <= $entry;
				if ($school_by_entry{$other} == $school_by_entry{$entry}) { 
					$score += 10000;
					$score += 10000 if $own_school_hits{$entry};
				}
				$score += 100 if $entry_hits{$entry."-".$other};
				$score += 1 if $school_hits{$entry."-".$school_by_entry{$other}};
			}
		}

		Tab::debuglog("Score for panel $pankey is $score") if $pankey;
		return $score;

	}

</%perl>
