<%args>
	$round
	$admin
	$sort_by => "letter"
	$seeds   => undef
	$nowarn  => undef
</%args>
<%init>

	my $event = $round->event;
	my $anonymize if $event->setting("anonymize");
	my $round_robin++ if $event->setting("round_robin");
	my $tab_ratings = $event->judge_group->setting("tab_ratings");
	my $use_commitment = $event->judge_group->setting("rounds_per"); #is the burden method rds per entry? >0 => yes

	my $judge_use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);			
	my %judge_use = %{$judge_use_ref};

	my $rounds_per++ if $event->judge_group->setting("rounds_per");
		
	my $last_round_name = $round->name - 1;
	my $last_round = Tab::Round->search( event => $round->event->id, name => $last_round_name)->first;

	my %entry_wins = $m->comp("/funclib/entry_wins.mas", event => $round->event, round => $last_round);
	my %entry_losses = $m->comp("/funclib/entry_losses.mas", event => $round->event, round => $last_round);

	my $tourn = $event->tourn;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	
	Tab::Panel->columns(TEMP => "roomname");

	Tab::Panel->set_sql( schemat => "
		select panel.*, room.name as roomname
		from panel, room
		where panel.round = ? 
		and panel.room = room.id
		order by panel.letter");

	Tab::Panel->set_sql( schemat_roomless => "
		select panel.*, \"None\" as roomname
		from panel
		where panel.round = ? 
		and not exists ( 
			select distinct room.id
			from room
			where room.id = panel.room
		)
		group by panel.id
	");

	my @panels = Tab::Panel->search_schemat($round->id);
	push (@panels, Tab::Panel->search_schemat_roomless($round->id));

	my @entries = $m->comp("/funclib/round_entries.mas", round => $round);
	my @judges = $m->comp("/funclib/round_judges.mas", round => $round);
	my @ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	my %entry_code = map {$_->id => $_->code} @entries;

	my %pod_name;

	if ($round_robin) { 
		foreach my $entry (@entries) { 
			next if $pod_name{$entry->pair_seed};
			$pod_name{$entry->pair_seed} = $event->setting("pod_".$entry->pair_seed);
			$pod_name{$entry->pair_seed} = "Pod ".$entry->pair_seed unless $pod_name{$entry->pair_seed};
		}
	}

	my %judge_by_id = map {$_->id => $_} @judges;

	my %pref_record = ();

	my $prefs = $event->judge_group->setting("prefs");

	if ($prefs eq "ordinals") { 
		%pref_record = $m->comp("/funclib/round_ordinals.mas", round => $round);
	} elsif ($prefs && $prefs ne "none") { 
		%pref_record = $m->comp("/funclib/round_mjp.mas", round => $round);
	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();
	my %judges_by_panel = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
		push (@{$judges_by_panel{$ballot->panel->id}}, $judge_by_id{$ballot->judge->id});
	}

	@panels = sort {$a->flight cmp $b->flight} @panels;
	@panels = sort {$a->roomname cmp $b->roomname} @panels;
	@panels = sort {$b->bracket <=> $a->bracket } @panels;
	@panels = sort {$a->started cmp $b->started } @panels;
	@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;

	Tab::Entry->set_sql( duplicated =>  "
		select distinct entry.id
		from entry, ballot, panel, ballot b2, panel p2
		where entry.id = ballot.entry
		and entry.id = b2.entry
		and ballot.panel = panel.id
		and b2.id = p2.id
		and p2.round = ?
		and p2.round = panel.round
		and panel.id = p2.id
	" );

	Tab::Entry->set_sql( missing =>  " 
		select distinct entry.id
		from entry
		where entry.dropped = 0
		and entry.waitlist = 0
		and entry.unconfirmed = 0
		and entry.event = ? 
		and not exists ( 
			select distinct ballot.id
			from ballot, panel
			where ballot.panel = panel.id
			and ballot.entry = entry.id
			and panel.round = ?
		)
	" );

	my @duplicated = Tab::Entry->search_duplicated( $round->id ) unless ($round->type eq "elim" || $round->type eq "final");
	my @missing = Tab::Entry->search_missing( $event->id, $round->id ) unless ($round->type eq "elim" || $round->type eq "final");

	my $sides_not_set++ if $event->setting("sides_not_set") == $round->id;
	undef $sides_not_set if $round->type eq "elim" || $round->type eq "final";

</%init>

	<& /funclib/tablesorter.mas, table => "sortme" &>

%	if (@missing && not defined $nowarn) { 
		<div class="dkred block centeralign">
			<% scalar @missing %> debaters left off pairing.   

%			foreach my $miss (@missing) { 
				<a class="inline white " style="color: #fcfcfc;" href="/panel/manipulate/debate_round_edit.mhtml?entry_id=<%$miss%>&round_id=<% $round->id %>">Schedule <% $entry_code{$miss} %></a>
%			}
		</div>
		<br />
%	}

%	if ($sides_not_set) { 
		<div class="lirdrow block centeralign">
			<h5>Warning: You have not set sides for this debate:</h5>
			<a class="dkred inline padmore" href="/panel/manipulate/snake_sides.mas?round_id=<% $round->id %>">Snake Sides</a>
		</div>
		<br />

%	}

%	if (@duplicated) { 
		<div class="dkred block centeralign">
			<% scalar @duplicated %> debaters scheduled in more than one debate.  
%			foreach my $miss (@duplicated) { 
				<% $entry_code{$miss} %> <% $miss %>
%			}
			How'd you pull that off?  Please re-pair round.
		</div>
		<br />
%	}

	<table cellpadding="0" cellspacing="1" width="100%" id="sortme"> 

		<thead>
		
		<tr class="yellowrow">

			<th class="smallish <% $round_robin ? "" : "smallcell" %>">
				<% $round_robin ? "Pod" : ""%>
			</td>

%			if ($round->flighted > 1) { 
				<th class="smaller centeralign padless">
					Flt
				</th>
%			}
			
			<th class="centeralign smallish">
				<span class="block padless">
					Room
				</span>
			</th>

			<th class="centeralign smallish">
				<span class="block padless">
				<% $event->type eq "pf" ? "Flip" : "Aff" %>
				</span>
			</th>

			<th class="centeralign smallish">
				<span class="block padless">
				<% $event->type eq "pf" ? "Flip" : "Neg" %>
				</span>
			</th>

			<th class="centeralign smaller" title="Numbers preceding name are obligation in the left/used/owed format.  Numbers following name are ratings.">
				<span class="block padless">
					Use
				</span>
			</th>


			<th class="centeralign smallish">
				<span class="block padless">
					Judge<% $round->judges > 1 ? "s" : "" %>
				</span>
			</th>

%			if ($prefs eq "ordinals" && 1 == 1) { 
				<th class="nosort">
				</th>
%			}

			<th>
			</th>
		</tr>

		</thead>

		<tbody>
		
%		my $switch = 1;

%		use Data::Dumper;

% 		foreach my $panel (@panels) { 

<%perl>

			next unless $entries_by_panel{$panel->id} && @{$entries_by_panel{$panel->id}};

			my $aff;
			my $neg;

			foreach my $pc (@{$entries_by_panel{$panel->id}}) { 
				if ($ballots_by_entry{$pc->id}) { 
					$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
					$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
				}
			}

			foreach my $pc (@{$entries_by_panel{$panel->id}}) { 
				if ($ballots_by_entry{$pc->id}) { 

					unless ($aff) {
						$aff = $pc unless $neg && $pc->id == $neg->id;
					} else { 
						$neg = $pc unless $aff && $pc->id == $aff->id;
					}
				}
			}
</%perl>

			<tr>

				<td class="smaller <% $round_robin ? "" : "smallcell" %> centeralign padno">
					<% $round_robin && $aff ? $pod_name{$aff->pair_seed} : $panel->letter %>
				</td>
			
%				if ($round->flighted > 1) { 
					<td class="centeralign smaller padno">
						<% $panel->flight %>
					</td>	
%				}

				<td class="smaller">
					<span class="hidden"><% $panel->roomname %><% $panel->flight %></span>
					<a class="white padless block" href="panel_view.mhtml?panel_id=<% $panel->id %>">
						<% ($panel->bye) ? "BYE" :  $panel->roomname %>
					</a>
				</td>

%				if ($panel->bye) { 

%					my @byes = @{$entries_by_panel{$panel->id}};

%					foreach my $bye (@byes) { 
						<td class="smaller padless" <% scalar @byes == 1 ? 'colspan="2"' : "" %> >
							<a class="white block padless" href="/panel/manipulate/entry_edit.mhtml?round_id=<% $round->id %>&entry_id=<% $bye->id %>">
								<% $bye->code %>
							</a>
						</td>
%					} 

%				} else { 

%					my $round_name = $round->name - 1;

					<td class="smaller padless <% $aff && $aff->pullup ? "liblrow" : "" %> ">
%						if ($aff) { 
							<% $seeds ? $aff->pair_seed : "" %>
							<a class="white block nowrap padless" href="/panel/manipulate/entry_edit.mhtml?round_id=<% $round->id %>&entry_id=<% $aff->id %>">
%								unless ($round_robin || $round_name == 0 || $round->type eq "elim" || $round->type eq "final") {
									<span class="tinierspan">
										<% $entry_wins{$aff->id} ? $entry_wins{$aff->id} : 0 %>-<% $entry_losses{$aff->id} ? $entry_losses{$aff->id} : 0 %>
									</span>
%								} 
								<span class="hundo nowrap padno" title="<% ($anonymize) ? $aff->id : $aff->code %>">
									<% ($anonymize) ? $aff->id : $aff->code %>
								</span>
							</a>
%						} 
					</td>

%					if ($neg) { 
						<td class="smaller padless <% $neg && $neg->pullup ? "liblrow" : "" %> ">
							<% $seeds ? $neg->pair_seed : "" %>
							<a class="white nowrap padless block" href="/panel/manipulate/entry_edit.mhtml?round_id=<% $round->id %>&entry_id=<% $neg->id %>">
%								unless ($round_robin || $round_name == 0 || $round->type eq "elim" || $round->type eq "final") {
									<span class="tinierspan">
										<% $entry_wins{$neg->id} ? $entry_wins{$neg->id} : 0 %>-<% $entry_losses{$neg->id} ? $entry_losses{$neg->id} : 0 %>
									</span>
%								}
								<span class="hundo nowrap padno" title="<% ($anonymize) ? $neg->id : $neg->code %>">
									<% ($anonymize) ? $neg->id : $neg->code %>
								</span>
							</a>
						</td>
%					} else { 
						<td>
						</td>
%					}

%				}

				<td class="smaller">
%					my $notfirst;
%					my %used;

%					foreach my $judge (@{$judges_by_panel{$panel->id}}) {

%						next unless $judge;
%						next if $used{$judge->id}++;
						<span class="thirty">
%							if ($rounds_per) { 
								<% $judge_use{$judge->id}{'left'} %>/<%($judge_use{$judge->id}{'judged_already'} + $judge_use{$judge->id}{'will_judge'}) %>/<%$judge_use{$judge->id}{'oblig'}%> <br />
%							} else { 
								<%($judge_use{$judge->id}{'judged_already'} + $judge_use{$judge->id}{'will_judge'}) %>
%							}
						</span>
%					}
				</td>

				<td class="smaller">

%					undef $notfirst;
%					undef %used;

%					foreach my $judge (@{$judges_by_panel{$panel->id}}) {

%						next unless $judge;
%						next if $used{$judge->id}++;

						<a class="white nowrap block padless " href="panel_view.mhtml?panel_id=<% $panel->id %>">
							<span class="hidden">
								<% $judge->last.", ".$judge->first %>
							</span>
							<span class="hundo padno marno">
								<% ($judge->chair) ? "*" : "" %><% $judge->last.", ".$judge->first %>
							</span>
							<span class="smallspan padno marno smaller wrap" style="padding-top: 2px">
								<% $pref_record{$judge->id."-".$panel->id} %>
								<% $tab_ratings ? $judge->tab_rating : "" %>
							</span>
						</a>
% 					}
						 
				</td>

%				if ($prefs eq "ordinals" && 1 == 1) { 
					<td class="smaller centeralign">
						<a class="white nowrap block padless " href="manual_mjp_switch.mhtml?panel_id=<% $panel->id %>">mpj</a>
					</td>
%				}
					
				<th class="smaller centeralign padno">
%					unless ($panel_undone{$panel->id}) { 
						IN
%					} elsif ($panel->started) { 
						<% Tab::shortertime($panel->started->set_time_zone($tz)) %>
%					} elsif ($round->type eq "highlow" || $round->type eq "highhigh" || $round->type eq "elim") { 
						<% $panel->bracket ? $panel->bracket : "0" %>
%					} elsif ($admin) { 
						<% $panel->score %>
%					} 
				</th>
			
			</tr>

%		}

		</tbody>

	</table>

%	undef %entries_by_panel;

