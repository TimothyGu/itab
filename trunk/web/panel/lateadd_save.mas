<%args>
	$circuit
	$tourn
	$student_id => undef
	$partner_id => undef
	$team_name => undef
	$event_id
	$school_id
</%args>
<%init>
	my $student = Tab::Student->retrieve($student_id); 
	my $event = Tab::Event->retrieve($event_id);

	unless ($student && $event) { 
		$m->print("Student and/or event not found.  Go back and try again");
		$m->abort;
	}

	my $now = DateTime->now;
	$now->set_time_zone($circuit->timezone);

	my $reg_end = $tourn->reg_end;
	$reg_end->set_time_zone($circuit->timezone);

	my $fine_amount = $tourn->method->add_fine if $now > $reg_end;

	my $e_tourn = $event->tournament;
	
	unless ($e_tourn->id eq $tourn->id) { 
		my $err = "This event is not part of your tournament.";
		$m->redirect("$Tab::url_prefix/register/schools.mhtml?err=$err");
	}
	
	my $chapter = $student->chapter;

	my @schools = Tab::School->search( tournament => $tourn->id, chapter => $chapter->id);
	
	unless (@schools) { 
	
		my $err = "That student's school is not entered in this tournament";
		$m->redirect("$Tab::url_prefix/register/schools.mhtml?err=$err");
		
	}

	my @existing_comps = Tab::Entry->search( event => $event_id, {order_by => "code DESC"} );
	
	my $code;
	
    if (@existing_comps) { 
    
    	$code = $existing_comps[0]->code;
		$code++;
	
	}  else { 
	
		$code = $event->code;
	
	}

	my $comp;	
	
	if ($event->team == 1) { 
	
		$comp = Tab::Entry->create({ 
		
			tournament => $tourn->id,
			school => $school_id,
			event => $event_id,
			code => $code,
			student => $student_id,
			dropped => 0
		
		});
			
	} 
	
	if ($event->team == 2) { 
	
		$comp = Tab::Entry->create({ 
		
			tournament => $tourn->id,
			school => $school_id,
			event => $event_id,
			code => $code,
			student => $student_id,
			partner => $partner_id,
			dropped => 0
		
		});
	
	
	}
	
	if ($event->team == 3) { 
	
		$comp = Tab::Entry->create({ 
		
			tournament => $tourn->id,
			school => $school_id,
			event => $event_id,
			code => $code,
			name => $team_name
		
		});
	
	} 


	my $add_reason = "Late Add ". $comp->code;

	if ($fine_amount > 0) { 
	my $fine = Tab::Fine->create({ 
			school => $school_id,
			amount => $fine_amount,
			reason => $add_reason,
			levied => $now
		});
	}

	my $change = Tab::Change->create({ 
		type => 'add',
		comp => $comp->id
	});
	
	my $comp_id = $comp->id;	

	$m->redirect("$Tab::url_prefix/register/comp_edit.mhtml?comp_id=$comp_id");

</%init>


