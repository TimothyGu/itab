<%args>
	$tourn_id => undef
</%args>
<%init>

	my $now = DateTime->now;

	my $end = $now->clone;

	$end->subtract(days => 1);

	my @upcoming = Tab::Tourn->search_where(
		{	end => { '>',  DateTime::Format::MySQL->format_datetime($end) },
			hidden => { '!=', "1" },
			approved => { '=', "1" }
		},
		{ 	order_by => "start" },
		{ 	limit => "50" }
	);

</%init>

	<h2>Upcoming Tournaments</h2>

%		my $date = $now->clone;
%		$date->subtract(years => 1);  #Nothing like an ugly hack to get started right.

%		foreach my $tourn (sort {$a->start->epoch <=> $b->start->epoch} @upcoming) { 

<%perl>
			#Week by week ticker

			my $distance = $tourn->start - $date;
			
			if ($distance->delta_days > 6) { 

				$date = $tourn->start;

				while ($date->day_of_week != 1) { 
					$date->subtract(days => 1);
				}


				my $date_ticker = $date->clone;
				my $sun_ticker = $date->clone;
				$sun_ticker->add(days => 6);


</%perl>
				<h5>
					<% Tab::niceshortdate($date_ticker)." - ".Tab::niceshortdate($sun_ticker) %>
				</h5>


%			}

%           if ($tourn->reg_start && $tourn->reg_end && $tourn->reg_start->epoch < $now->epoch && $tourn->reg_end->epoch > $now->epoch) { 
                <a class="blue block" href="tourn/index.mhtml?tourn_id=<% $tourn->id %>">
%			} else {
                <a class="grey block" href="tourn/index.mhtml?tourn_id=<% $tourn->id %>">
%			}

				<span class="circuit">
%					foreach my $circuit ($tourn->circuits) { 
						<% $circuit->abbr %>
%					}
				</span>

				<span class="tourn">
					<% $tourn->name %>
				</span>
			
				<br style="clear: both;">

			</a>


%		}

