<%args>
	$tourn
	$league
	$event_id => undef	
	$some => undef
	$unpublish => undef
</%args>
<%init>

	if ($tourn->results) { 

		$tourn->results("");
		$tourn->update;

		my $msg = "Tournament results unpublished ";
		$m->redirect("/results/publish.mhtml?msg=$msg");

	} else { 

	my @events = $tourn->events( type => "speech" ) unless $event_id || $some;

	push (@events, Tab::Event->retrieve($event_id)) if $event_id;

	if ($some) { 
		foreach my $event ($tourn->events) { 
			push (@events, $event) if $ARGS{$event->id};
		}
	}

	my $filepath = "results/".$tourn->league->id."/".$tourn->id;
	my $dirpath  = $Tab::file_root."/public_site/".$filepath;
	my $garbage = `rm -f $dirpath`;
    $garbage = `mkdir -p $dirpath`;

	my $indexfile = $dirpath."/index.mhtml";
	my $league_name = $league->name;
	my $tourn_name = $tourn->name;

	my $switch;

	foreach my $event (sort {$a->name cmp $b->name} @events) { 

		$switch++;

		my $eventpath = $dirpath."/".$event->id.".mhtml";

		open (EVENT, ">$eventpath ");

		print EVENT "<h2>Results from ".$tourn->name." in ".$event->name."</h2>\n";
		print EVENT "<table cellpadding=\"6\" cellspacing=\"1\" width=\"95%\">\n";

        Tab::StudentResult->set_sql( clear_out => "
			delete from student_result where event = ".$event->id );

		Tab::StudentResult->sql_clear_out->execute;

		my @elims = Tab::Panel->search( event => $event->id, type => "elim");
    	my @finals = Tab::Panel->search( event => $event->id, type => "final");

		my @comps_in_order = $m->comp("order_comps.mas", 
						tourn => $tourn, 
						event => $event, 
						basis => "final");

	    if (@comps_in_order && $event->bids) {

 			@comps_in_order = $m->comp("award_bids.mas",
           		tourn => $tourn,
                basis => "final",
                event => $event,
                ordered_comps => \@comps_in_order);
	    }

		my $count;
		my $rank = 1; 

		my $cswitch;

		foreach my $comp (@comps_in_order) { 

			$cswitch++;

			print EVENT "<tr ";
        	print EVENT ($cswitch % 2) ? "class=\"oddrow\"" : "class=\"evenrow\"";
			print EVENT "><th>";

			my @results;

			foreach my $student ($comp->members) { 

				my $student_result = Tab::StudentResult->create({
					student => $student->id,
					chapter => $student->chapter->id,
					comp => $comp->id,
					event => $comp->event->id,
					tournament => $comp->tournament->id
				});

				push (@results, $student_result);
			}

			if ($comp->event->team == 3) { 
				my $student_result = Tab::StudentResult->create({
					chapter => $comp->school->chapter->id,
					comp => $comp->id,
					event => $comp->event->id,
					tournament => $comp->tournament->id
				});
				push (@results, $student_result);
			}
		
			my $last_round = Tab::Round->retrieve($comp->last_round) 
				if $comp->last_round;

			foreach my $result (@results) { 	
		    	$result->rank($rank) if $last_round->type eq "final";
				$result->update;
			}

			print EVENT "$rank." if $last_round->type eq "final";
			print EVENT "</th><th>\n";
    		$rank++ if ($last_round->type eq "final");

			foreach my $result (@results) { 	
		    	$result->bid(1) if $comp->bid;
				$result->update;
			}

			print EVENT "Bid" if $comp->bid;
			print EVENT "</th>\n<td>";

			print EVENT $comp->code."</td>\n<td>";

			print EVENT $comp->team_name."</td>\n<td>";
			print EVENT $comp->school->name."</td>\n<td>";

			my @ballots = Tab::Ballot->search_ordered_by_round($comp->id);

			my $res;

			foreach my $ballot ( 
						sort {$a->panel->round->name <=> $b->panel->round->name} @ballots) { 
				$res = $res . " ".$ballot->rank;
				$res = $res . "/".$ballot->points if $ballot->points > 0;

				$res = $res . "(".$ballot->real_rank
						if $ballot->real_rank != $ballot->rank;

				$res = $res . ",".$ballot->real_points.")"
						if $ballot->real_points != $ballot->points;

				$res = $res . ")" if $ballot->real_rank != $ballot->rank;
			}

			print EVENT $res;
			print EVENT "</td>\n</tr>\n";

			foreach my $result (@results) { 
				$result->results_bar($res);
				$result->update;
			}


		}

		print EVENT "</table>\n";
		close EVENT;
	}

    $m->comp("publish_index.mas", tourn => $tourn);

	$tourn->results(1);
	$tourn->update;

	my $err = "Tournament results have been published";

	$m->redirect("$Tab::url_prefix/results/publish.mhtml?err=$err");

	}

</%init>


