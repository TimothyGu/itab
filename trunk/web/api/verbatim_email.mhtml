<%args>
	#Pass in an account and password
	$username => undef
	$password => undef
	
</%args>
<%init>

	use Crypt::PasswdMD5;

	my $now = DateTime->now;

	#Check Account
	my ($account) = Tab::Account->search( email => lc($username) );
	unless ($account) {
		$m->print("NO_SUCH_ACCOUNT");
		$m->abort;
	}

	#Check Password
	#$password =~ s/\s+$//g;
	#my $db_password = $account->passhash;
	#my $verify_password = unix_md5_crypt($password,$db_password);

	#unless($verify_password eq $db_password) {
	#	$m->print("PASSWORD_WRONG");
	#	$m->abort;
	#}

	#Initiate new XML
	use XML::Simple;
	my $xs = new XML::Simple();

	#Print the start of the XML
	$r->content_type("application/xml");
	$m->print("<?xml version='1.0' standalone='yes'?>\r\n");
	$m->print("<ROUNDS>\r\n");

	#Set SQL for searching entries by student
	Tab::Entry->set_sql ( by_student => "
		select distinct entry.*
		from entry, entry_student, student, event, tourn
		where student.last = ?
		and student.first = ?
		and student.id = entry_student.student
		and entry_student.entry = entry.id
		and entry.event = event.id
		and event.tourn = tourn.id
		order by tourn.start desc
	");

	#Get the entries for the debater with first/last from account
	my @entries = Tab::Entry->search_by_student($account->last, $account->first);

	#Get panels (rounds) for each entry and store in array
	my @panels;
	foreach my $entry (@entries) {
		my $entryid = $entry->id;
		Tab::Panel->set_sql( by_entry => "
			select distinct panel.*
			from panel, ballot, round
			where ballot.entry = $entryid
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.published = 1
			order by round.name desc
		");
		
		push( @panels, Tab::Panel->search_by_entry() );
	}

	#Only return the previous three rounds
	foreach my $panel (@panels[0 .. 2]) {
		next unless $panel->round;
		#Get date of round, split out the time
		my $startdate = $panel->round->event->tourn->start if $panel->round->event;
		next unless $startdate;
		my @datearray = split(/"T"/, $startdate);
		$startdate = $datearray[0];

		#Only include rounds from this season
		my $cutoff = "2013-09-01";
		if ($startdate gt $cutoff) {
			#Get tournament name (use UC webname for ease of reading) and round number
			my $tourn = ucfirst($panel->round->event->tourn->webname);
			my $roundname = $panel->round->name;

			#Print Round XML
			my $xml_round = {
				TOURNAMENT => $tourn,
				ROUND_NUM => $roundname
			};
			$m->print("<ROUND>\n");
			$m->print($xs->XMLout($xml_round, RootName => "", NoAttr => 1, XMLDecl => 0));

			#Get student names
			foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
				my $moi;
			
				#Loop through students for each entry - if opponent, look up email and save name
				foreach my $student ($entry->students) {
					my $oppfirstname = $student->first;
					my $opplastname = $student->last;
					if ($oppfirstname . $opplastname eq $account->first . $account->last) {
						$moi++;
					} else {
						my ($studentacct) = Tab::Account->search( first => lc($oppfirstname), last => lc($opplastname) );
						if ($studentacct) {
							$m->print("<STUDENT>\n");
							my $student_entry = {
								STUDENT_NAME => $oppfirstname . " " . $opplastname,
								STUDENT_EMAIL => $studentacct->email
							};
							$m->print($xs->XMLout($student_entry, RootName => "", NoAttr => 1, XMLDecl => 0));
							$m->print("</STUDENT>\n");
						}

					}
				}
				
			}

			#Get judges
			foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {
				my ($judgeacct) = Tab::Account->search ( first => lc($judge->first), last => lc($judge->last) );
				if ($judgeacct) {
					$m->print("<JUDGE>\n");
					my $judge_entry = {
						JUDGE_NAME => $judge->first . " " . $judge->last,
						JUDGE_EMAIL => $judgeacct->email
					};
					$m->print($xs->XMLout($judge_entry, RootName => "", NoAttr => 1, XMLDecl => 0));
					$m->print("</JUDGE>\n");
				}
			}

			#Close Round
			$m->print("</ROUND>\n");		
		}
	}

	#Close XML
	$m->print("</ROUNDS>");
</%init>
