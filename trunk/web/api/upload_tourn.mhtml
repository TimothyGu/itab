<%args>
	$username => 'palmer@tabroom.com'
	$password => 'Yis*meme.'
	$tourn_id => undef
#	$xml
	$debug => 1
</%args>
<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $now = DateTime->now;

	#ACCOUNT
	my ($account) = Tab::Account->search( email => lc($username) );
	unless ($account) { 
		$m->print("NO_SUCH_ACCOUNT");
		$m->abort;
	} else { 
		$m->print("YOU ARE ".$account->first." ".$account->last."<br />") if $debug;
	}

	$m->flush_buffer;

	$password =~ s/\s+$//g;
	my $db_password = $account->passhash;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
   	unless ($verify_password eq $db_password) { 
	   	$m->print("PASSWORD_WRONG");
		$m->abort;
	} else { 
		$m->print("YOU REALLY ARE! PASSWORD IS OK</br>") if $debug;
	}

	$m->flush_buffer;

	#PROCESS THE XML

#	my $req = Apache2::Request->new($r);
#	my $xml = $req->upload(xml);

	my $xml = new XML::Simple ( ForceArray => [ qw(EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]); 
#	my $data = $xml->XMLin($xml->tempname);
	my $data = $xml->XMLin("/tmp/xmlimport.xml");

	#TOURNAMENT
	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;

	my @tourn_sets = @{$data->{TOURN_SETTING}};
	my %tourn_settings = (); 

	foreach my $ts (@tourn_sets) { 
		$tourn_settings{$ts->{TAG}} = lc($ts->{VALUE});
	}   

	unless ($tourn) { 
		$tourn_id = $data->{TOURN}->{ID};
		$tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_settings{"DownloadSite"} eq "idebate.org";
	}

	unless ($tourn) { 
		$tourn = Tab::Tourn->search(foreign_site => $tourn_settings{"DownloadSite"}, foreign_id => $tourn_id)->first;
	}

	if ($tourn) { 
		
		$m->print("THIS IS MAH TOURNAMENT!  ID is ".$tourn->id,"<br/>") if $debug;

		unless (Tab::TournAdmin->search( account => $account->id, tourn => $tourn->id) ) { 
			$m->print("NOT_AUTHORIZED");
			$m->abort;
		}

	} else { 

		$m->print("THIS IS NOT MAH TOURNAMENT!  Creating another<br/>") if $debug;

		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{TRPCDATE});

		if ($through eq "through") {
			$start = Tab::dateme($start);
			$end = Tab::dateme($end);
		} else {
			$start = Tab::dateme($data->{TOURN}->{STARTDATE});
			$end = Tab::dateme($data->{TOURN}->{ENDDATE});
		}
		
		my $reg_start = $start->clone;
		$reg_start->subtract( months => 2);

		my $reg_end = $end->clone;
		$reg_end->subtract( weeks => 1);

		$tourn = Tab::Tourn->create({
			name => $data->{TOURN}->{TOURNNAME},
			start => $start,
			end => $end,
			reg_start => $reg_start,
			reg_end => $reg_end,
			foreign_site => $tourn_settings{"DownloadSite"},
			foreign_id => $tourn_id,
			tz => $account->tz
		});

		my $tourn_admin = Tab::TournAdmin->create({
			account => $account->id,
			tourn => $tourn->id
	   });

		foreach my $ts (@tourn_sets) { 
			$tourn->setting($ts->{TAG}, lc($ts->{VALUE}));
		}   

		$m->print("Created a new tournament, ".$tourn->id," for the nonce<br />") if $debug;

		my $judge_group = Tab::JudgeGroup->create({
			name => $tourn_settings{"TourneyType"},
			tourn => $tourn->id,
			abbr => substr($tourn_settings{"TourneyType"}, 0, 3)
		});

	    #EVENTS
   		my @events = @{$data->{EVENT}};
    	my %event_by_id = ();

		foreach my $xml_event (@events) { 

			my $event = Tab::Event->create({
				tourn => $tourn->id,
				name => $xml_event->{EVENTNAME},
				type => $xml_event->{TYPE},
				abbr => $xml_event->{ABBR},
				judge_group => $judge_group->id
			});

			$event_by_id{$xml_event->{ID}} = $event;
			$m->print("Event ".$xml_event->{ID}." is in the hash<br />") if $debug;

		} 

		my @event_settings = @{$data->{EVENT_SETTING}}; 
		
		foreach my $xml_setting (@event_settings) {
			$m->print("Event setting for ".$xml_setting->{EVENT}." <br />") if $debug;
#			my $event = $event_by_id{$xml_setting->{EVENT}};
#			$event->setting( $xml_setting->{TAG}, $xml_setting->{VALUE} );
		}

	    #TIMESLOTS
		my @timeslots = sort {$a->{ID} <=> $b->{ID}} @{$data->{TIMESLOT}};
		my %timeslots_by_id = ();

		foreach my $xml_timeslot (@timeslots) {

			my $timeslot = Tab::Timeslot->create({
				name => $xml_timeslot->{NAME},
				tourn => $tourn->id
			});

			$timeslots_by_id{$xml_timeslot->{ID}} = $timeslot;

		}

	} 

	$m->print("<BR/><bR/>THE SCRIPT, SHE IS FINISHED<br />") if $debug;

</%init>

