<%args>
	$username => undef
	$password => undef
	$tourn_id => undef
	$event_id => undef
</%args>
<%init>
	use Crypt::PasswdMD5;
	use XML::Simple;
	use Data::Dumper;

	my ($account) = Tab::Account->search( email => lc($username) );

	unless ($account) { 
		$m->print("<error>No account with the email ".$username." was found.</error>");
		$m->abort;
	} 

	$password =~ s/\s+$//g;
	my $db_password = $account->passhash;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
   	unless ($verify_password eq $db_password) { 
		$m->print("<error>Password incorrect for ".$username.".</error>");
		$m->abort;
	}

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	unless ($tourn) { 
		$m->print("NO_SUCH_TOURNAMENT");
		$m->abort;
	}

	unless ($account->site_admin || Tab::TournAdmin->search( tourn => $tourn->id, account => $account->id )) { 
		$m->print("TOURN_ACCESS_DENIED");
		$m->abort;
	}

	my (@event_ids) = split (/\,/, $event_id);
	my @events;
	my @judge_groups;

	foreach my $eventid (@event_ids) { 
		my $event = Tab::Event->retrieve($eventid);
		push (@events, $event) if $event;
		push (@judge_groups, $event->judge_group) if $event;
	}

	unless (@events) { 
		$m->print("NO_EVENT_FOUND");
		$m->abort;
	}

	my %seen = (); 
	@events = grep { ! $seen{$_->id} ++ } @events;

	my %also_seen = (); 
	@judge_groups = grep { ! $also_seen{$_->id} ++ } @judge_groups;

	unless (scalar @judge_groups == 1) { 
		$m->print("MORE_THAN_ONE_JUDGE_GROUP");
		$m->abort;
	}

	my $judge_group = shift @judge_groups;

	my $xml_tourn = {
		ID => $tourn->id,
		TOURNNAME => $tourn->name,
		STARTDATE => Tab::pickerdate($tourn->start),
		ENDDATE => Tab::pickerdate($tourn->end),
		DOWNLOADSITE => "idebate.org"
	};

	my $xml_rooms = [];

	foreach my $site ($tourn->sites) { 

		foreach my $room ($site->rooms) { 

			my $inactive = "false";
			$inactive = "true" if $room->inactive;

			my $building = 0;
			$building = $room->building if $room->building;
			
			my $xml_room = {
				ID => $room->id,
				BUILDING => $building,
				ROOMNAME => $room->name,
				QUALITY => $room->quality,
				CAPACITY => $room->capacity,
				INACTIVE => $inactive,
				NOTES => $room->notes,
			};

			push (@{$xml_rooms}, $xml_room);

		}

	}

	my $tsets = [];

	foreach my $tset ($tourn->settings) { 

		my $value = $tset->value;
		$value = Tab::pickerdate($tset->value_date) if $value eq "date";
		$value = $tset->value_text if $value eq "text";
		
		my $xml_tset = {
			TAG => $tset->tag,
			VALUE => $value
		};

		push (@{$tsets}, $xml_tset);
	}

	my @entries;
	my @rounds;
	my %pref_type = ();

	my $xml_events = [];
	my $xml_esets = [];

	my $min_points;
	my $max_points;
	my $dupes_ok = "false";
	my $decimals = 0;

	my @tb_sets;

	foreach my $event (@events) { 

		push (@tb_sets, Tab::TiebreakSet->retrieve($event->setting('speaker_tbset'))) if $event->setting('speaker_tbset');

		$min_points = $event->setting("min_points");
		$max_points = $event->setting("max_points");

		$dupes_ok = "true" if $event->setting("point_ties");
		$decimals = "0.1" if $event->setting("point_increments") eq "tenths";
		$decimals = "0.5" if $event->setting("point_increments") eq "half" ;
		
		$pref_type{$event->id} = $event->judge_group->setting("prefs");


		my $xml_event = {
			ID => $event->id,
			EVENTNAME => $event->name,
			ABBR => $event->abbr,
			TYPE => $event->type
		};

		push (@{$xml_events}, $xml_event);

		push (@entries, $event->entries( dropped => 0, waitlist => 0 ));
		push (@rounds, $event->rounds);

		my $debaters = $event->setting("min_entry");

		my $numdebaters_eset = {
			ID => $event->id,
			TAG => "DebatersPerTeam",
			VALUE => $debaters,
			EVENT => $event->id
		};

		push (@{$xml_esets}, $numdebaters_eset);

		foreach my $eset ($event->settings) { 

			next if $eset->tag eq "min_entry" || $eset->tag eq "max_entry";

			my $value = $eset->value;
			$value = Tab::pickerdate($eset->value_date) if $value eq "date";
			$value = $eset->value_text if $value eq "text";
		
			my $xml_eset = { 
				ID => $eset->id,
				TAG => $eset->tag,
				VALUE => $eset->value,
				EVENT => $event->id
			};

			push (@{$xml_esets}, $xml_eset);

		}

	}

	my @schools;

	my $xml_entries = [];
	my $xml_ratings = [];
	my $xml_students = [];

	my %rating_by_id = ();

	foreach my $rt ($m->comp("/funclib/tourn_rating_tiers.mas", tourn => $tourn)) {
		$rating_by_id{$rt->id} = $rt->name;
	}

	my $prefs;

	ENTRY:
	foreach my $entry (@entries) { 

		push (@schools, $entry->school);

		my $xml_entry = {
			ID => $entry->id,
			SCHOOL => $entry->school->id,
			EVENT => $entry->event->id,
			RATING => $entry->seed,
			CODE => $entry->code,
			FULLNAME => $entry->name,
			DROPPED => $entry->dropped,
			TUBDISABILITY => $entry->ada
		};

		push (@{$xml_entries}, $xml_entry);

		foreach my $student ($m->comp("/funclib/entry_students.mas", entry => $entry)) { 

			my $xml_student = {
				ID => $student->id,
				DOWNLOADRECORD => $student->id,
				SCHOOL => $entry->school->id,
				ENTRY => $entry->id,
				FIRST => $student->first,
				LAST => $student->last
			};

			push (@{$xml_students}, $xml_student);

		}

		foreach my $rating ($entry->ratings) { 
			
			my $event = $entry->event;
			
			next ENTRY unless $pref_type{$event->id} eq "ordinals" || $pref_type{$event->id} eq "tiered";

			my $pref = $rating->ordinal if $pref_type{$event->id} eq "ordinals";

			$pref = $rating_by_id{$rating->rating_tier->id} if $pref_type{$event->id} eq "tiered";

			my $xml_rating = {
				ID => $rating->id,
				TEAM => $entry->id,
				JUDGE => $rating->judge->id,
				RATING => $pref
			};
		
			push (@{$xml_ratings}, $xml_rating);

			$prefs++;

		}

	}

	my $xml_judges = [];

	foreach my $judge ($judge_group->judges) { 

		my $school_id = $judge->school->id if $judge->school && $judge->school->id;
		$school_id = 1 unless $school_id;
		my $obligation = 9 unless $judge->obligation > 0 || $judge->hired > 0;
		$obligation = $judge->obligation if $judge->obligation > 0;

		my $stop = "false";
		$stop = "true" unless $judge->active == 1;
		$stop = "true" if $judge->dropped == 1;

		my $xml_judge = {
			ID => $judge->id,
			DOWNLOADRECORD => $judge->id,
			SCHOOL => $school_id,
			FIRST => $judge->first,
			LAST => $judge->last,
			OBLIGATION => $obligation,
			HIRED => $judge->hired,
			NOTES => $judge->notes,
			STOPSCHEDULING => $stop
		};

		push (@{$xml_judges}, $xml_judge);

	}
	
	my $xml_schools = [];

	my %schseen = (); 
	@schools = grep { ! $schseen{$_->id} ++ } @schools;

	foreach my $school (@schools) { 
		
		my $xml_school = { 
			ID => $school->id,
			DOWNLOADRECORD => $school->id,
			SCHOOLNAME => $school->short_name,
			CODE => $school->code
		};

		push (@{$xml_schools}, $xml_school);

	}

	my $xml_rounds = [];
	my $xml_panels = [];
	my $xml_ballots = [];
	my $xml_values = [];

	my @timeslots;
		
	my $judgeplace = "Random";
	$judgeplace = "TeamRating" if $prefs;

	foreach my $round (@rounds) { 

		push (@timeslots, $round->timeslot);
		push (@tb_sets, $round->tb_set);

		my $tb_set = $round->tb_set->id if $round->tb_set;
		my $ts = $round->timeslot->id if $round->timeslot;
		my $event = $round->event->id if $round->event;

		my $flighting = 1;
		$flighting = $round->flighted if $round->flighted;

		my $type = $round->type;

		$type = "Preset" if $type eq "preset" || $type eq "prelim";
		$type = "HighHigh" if $type eq "highhigh";
		$type = "HighLow" if $type eq "highlow";
		$type = "Random" if $type eq "random";
		$type = "Elim" if $type eq "elim" || $type eq "final";

		my $xml_round = {
			ID => $round->id,
			EVENT => $event,
			TIMESLOT => $ts,
			TB_SET => $tb_set,
			RD_NAME => $round->name,
			LABEL => $round->label,
			FLIGHTING => $flighting,
			JUDGESPERPANEL => $round->judges,
			PAIRINGSCHEME => $type,
			JUDGEPLACESCHEME => $judgeplace
		};

		push (@{$xml_rounds}, $xml_round);

		foreach my $panel ($round->panels) { 

			my $room = $panel->room->id if $panel->room;

			my $flight = 1; 
			$flight = $panel->flight if $panel->flight > 1;
		
			my $xml_panel = {	
				ID => $panel->id,
				ROUND => $round->id,
				ROOM => $room,
				FLIGHT => $flight	
			};

			push (@{$xml_panels}, $xml_panel);
	
			foreach my $ballot ($panel->ballots) {

				my $xml_ballot;
					
				my $entry = $ballot->entry->id if $ballot->entry;

				if ($ballot->bye) { 

					$xml_ballot = {
						ID => $ballot->id,
						JUDGE => -1,
						PANEL => $panel->id,
						ENTRY => $entry,
						SIDE => -1
					}

				} else { 

					my $judge = $ballot->judge->id if $ballot->judge;

					$xml_ballot = {
						ID => $ballot->id,
						JUDGE => $judge,
						PANEL => $panel->id,
						ENTRY => $entry,
						SIDE => $ballot->side
					};

				}

				push (@{$xml_ballots}, $xml_ballot);

				foreach my $score ($ballot->values) { 

					if ($score->tag eq "ballot") { 

						my $xml_score = {
							ID => $score->id,
							BALLOT => $ballot->id,
							RECIPIENT => $entry,
							SCORE_ID => 1,
							SCORE => $score->value
						};
	
						push (@{$xml_values}, $xml_score);
			
					} elsif ($score->tag eq "rank") { 
					
						my $student = $score->student->id if $score->student;

						my $xml_score = {
							ID => $score->id,
							BALLOT => $ballot->id,
							RECIPIENT => $student,
							SCORE_ID => 3,
							SCORE => $score->value
						};
			
						push (@{$xml_values}, $xml_score);

					} elsif ($score->tag eq "points") { 
							
						my $student = $score->student->id if $score->student;
	
						my $xml_score = {
							ID => $score->id,
							BALLOT => $ballot->id,
							RECIPIENT => $student,
							SCORE_ID => 2,
							SCORE => $score->value
						};
					
						push (@{$xml_values}, $xml_score);
				
					}
	
				}

			}

		}

	}

	my %tsseen = (); 
	@timeslots = grep { ! $tsseen{$_->id} ++ } @timeslots;

	my $xml_timeslots = [];
	
	foreach my $ts (@timeslots) { 

		my $xml_ts = {
			ID => $ts->id,
			TIMESLOTNAME => $ts->name,
			START => Tab::xmldt($ts->start),
			END => Tab::xmldt($ts->end)
		};

		push (@{$xml_timeslots}, $xml_ts);

	}

	my $xml_scores = [];
	my $xml_score_settings = [];

	my $xml_tbs = [];
	my $xml_tbsets = [];

	my %set_seen = (); 
	@tb_sets = grep { ! $set_seen{$_->id} ++ } @tb_sets;

	my $sset = 1;
	
	my $wins;
	my $points;
	my $ranks;

	foreach my $tb_set (@tb_sets) { 

		my $xml_tbset =	{
			ID => $tb_set->id,
			TBSET_NAME => $tb_set->name,
			SCOREFOR => $tb_set->type
		};

		push (@{$xml_tbsets}, $xml_tbset);


		foreach my $tiebreak ($tb_set->tiebreaks) { 

			my $score = 0;
			my $name;
			my $tag;

			my $foropp = "false";
			my $drops = 0;

			$drops = 1 if $tiebreak->highlow == 1;
			$drops = 2 if $tiebreak->highlow == 2;
	
			if ($tiebreak->name eq "winloss") { 
				$score = 1;
				$name = "Wins";
				$tag = "Wins";
				$wins++;
			}

			if ($tiebreak->name eq "points") {
				$score = 2;
				$points++;
				$name = "Total Points" if $drops == 0;
				$tag = "None" if $drops == 0;

				$name = "High-Low Speaker Points" if $drops == 1;
				$tag = "None" if $drops == 1;

				$name = "2x High-Low Speaker Points" if $drops == 2;
				$tag = "None" if $drops == 2;
			}

			if ($tiebreak->name eq "opp_wins") {
				$foropp = "true";
				$name = "Opponent Wins";
				$tag = "None";
				$score = 1;
				$wins++;
			}

			if ($tiebreak->name eq "opp_points") {
				$foropp = "true";
				$name = "Opponent Points";
				$tag = "None";
				$score = 2;
				$points++;
			}

			if ($tiebreak->name eq "ranks") { 
				$score = 3;
				$ranks++;
				$name = "Ranks" if $tiebreak->name eq "ranks";
				$tag = "None";
			}

			if ($tiebreak->name eq "judgevar" || $tiebreak->name eq "coinflip") { 
				$score = 2;
				$points++;
			}

			if ($tiebreak->name eq "MBA") {
				$score = 1;
				$name = "Opp Wins + 2H/L Points";
				$tag = "MBA";
				$foropp = "true";
				$wins++;
				$points++;
			}

			$name = "Judge Variance" if $tiebreak->name eq "judgevar";
			$tag = "JudgeVariance" if $tiebreak->name eq "judgevar";

			$name = "Random" if $tiebreak->name eq "coinflip";
			$tag = "Random" if $tiebreak->name eq "coinflip";

			my $xml_tb = {
				ID => $tiebreak->id,
				SortOrder => $tiebreak->priority,
				LABEL => $name,
				TAG => $tag,
				DROPS => $drops,
				HOWTOCALCULATE => "Sum",
				SCOREID => $score,
				FOROPPONENT => $foropp,
				TB_SET => $tb_set->id
			};

			push (@{$xml_tbs}, $xml_tb);

		}
	
		if ($wins) { 

			my $xml_winset = {
				ID => $sset++,
				SCORE => 1,
				TB_SET => $tb_set->id,
				MAX => 1,
				MIN => 0,
				DUPESOK => 'false',
				DECIMALINCREMENTS => 0
			};

			push (@{$xml_score_settings}, $xml_winset);
		}
	
		if ($points) { 
		
			my $xml_point_set = {
				ID => $sset++,
				TB_SET => $tb_set->id,
				SCORE => 2,
				MAX => $max_points,
				MIN => $min_points,
				DUPESOK => $dupes_ok,
				DECIMALINCREMENTS => $decimals
			};

			my $xml_point_tset = { 
				ID => $sset++,
				TB_SET => $tb_set->id,
				SCORE => 4,
				MAX => $max_points,
				MIN => $min_points,
				DUPESOK => $dupes_ok,
				DECIMALINCREMENTS => $decimals
			};

			push (@{$xml_score_settings}, $xml_point_set);
			push (@{$xml_score_settings}, $xml_point_tset);
	
		}

		if ($ranks) {

			my $xml_rank_set = {
				ID => $sset++,
				TB_SET => $tb_set->id,
				SCORE => 3,
				DUPESOK => 'false',
				DECIMALINCREMENTS => 0,	
				MIN => 1,
				MAX => 4
			};

			my $xml_rank_tset = { 
				ID => $sset++,
				TB_SET => $tb_set->id,
				SCORE => 5,
				DUPESOK => 'false',
				DECIMALINCREMENTS => 0,
				MIN => 1,
				MAX => 4
			};
	
			push (@{$xml_score_settings}, $xml_rank_set);
			push (@{$xml_score_settings}, $xml_rank_tset);

		}

	}

	if ($wins) { 

		my $xml_wins = {
			ID => 1,
			SCORE_NAME => "Ballot",
			SCOREFOR => "Team",
			SORTORDER => "DESC"
		};

		push (@{$xml_scores}, $xml_wins);

	}

	if ($points) { 

		my $xml_points = {
			ID => 2,
			SCORE_NAME => "Speaker Points",
			SCOREFOR => "Speaker",
			SORTORDER => "DESC"
		};

		my $xml_team_points = {
			ID => 4,
			SCORE_NAME => "Team Points",
			SCOREFOR => "Team",
			SORTORDER => "DESC"
		};

		push (@{$xml_scores}, $xml_points);
		push (@{$xml_scores}, $xml_team_points);

	}

	if ($ranks) { 

		my $xml_ranks = {
			ID => 3,
			SCORE_NAME => "Speaker Rank",
			SCOREFOR => "Speaker",
			SORTORDER => "ASC"
		};

		my $xml_team_ranks = {
			ID => 5,
			SCORE_NAME => "Team Ranks",
			SCOREFOR => "Team",
			SORTORDER => "ASC"
		};

		push (@{$xml_scores}, $xml_ranks);
		push (@{$xml_scores}, $xml_team_ranks);

	}

	my $xml_hash = {
		PANEL => $xml_panels,
		BALLOT => $xml_ballots,
		BALLOT_SCORE => $xml_values,
		TOURN => $xml_tourn,
		TOURN_SETTING => $tsets,
		EVENT => $xml_events,
		EVENT_SETTING => $xml_esets,
		ENTRY => $xml_entries,
		JUDGEPREF => $xml_ratings,
		ENTRY_STUDENT => $xml_students,
		JUDGE => $xml_judges,
		ROOM => $xml_rooms,
		SCHOOL => $xml_schools,
		ROUND => $xml_rounds,
		TIMESLOT => $xml_timeslots,
		TIEBREAK_SET => $xml_tbsets,
		TIEBREAK => $xml_tbs,
		SCORES => $xml_scores,
		SCORE_SETTING => $xml_score_settings
	};

	my $now = DateTime->now;

	my $filename = "TourneyData-$tourn_id-".$now->epoch;
	my $filepath = $Tab::file_root."tmp/".$filename;
	`rm -f $filepath.*`; 

	my $xs = new XML::Simple();
	my $xml = $xs->XMLout($xml_hash, RootName => 'TOURNAMENTRESULTS', NoAttr => 1, XMLDecl => 1, OutputFile => "$filepath.xml");

	$m->redirect("$Tab::url_prefix/tmp/$filename.xml");
	
</%init>
