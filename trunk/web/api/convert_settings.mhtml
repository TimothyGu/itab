<%init>

	my @tourns = Tab::Tourn->retrieve_all;

	foreach my $tourn (@tourns) { 

		$m->print("Processing tournament ".$tourn->id." ".$tourn->name."<br />");
		$m->flush_buffer;

		my @events = $tourn->events;

		foreach my $setting ($tourn->settings) { 

			my $tag = $setting->tag;
			my $value = $setting->value;
			
			if ($tag eq "allow_judge_own") {
				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "allow_judge_own"
					});
				}
				$setting->delete;
			}

			if ($tag eq "allow_neutral_judges") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "allow_neutral_judges"
					});
				}
				$setting->delete;

			}

			if ($tag eq "allow_school_panels") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "allow_school_panels"
					});
				}
				$setting->delete;
			}

			if ($tag eq "ask_quals") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "ask_quals"
					});
				}

				$setting->delete;
			}

			if ($tag eq "at_larges") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "at_larges"
					});
				}
				$setting->delete;

			}

			if ($tag eq "ballot_message") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "ballot_message"
					});
				}
				$setting->delete;

			}

			if ($tag eq "default_panel_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "speech";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "default_panel_size"
					});
				}
				$setting->delete;
			}

			if ($tag eq "max_panel_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "speech";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "max_panel_size"
					});
				}
				$setting->delete;
			}

			if ($tag eq "min_panel_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "speech";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "min_panel_size"
					});
				}
				$setting->delete;
			}

			if ($tag eq "default_chamber_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "congress";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "default_panel_size"
					});
				}

				$setting->delete;
			}

			if ($tag eq "max_chamber_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "congress";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "max_panel_size"
					});
				}

				$setting->delete;
			}

			if ($tag eq "min_chamber_size") {

				foreach my $event (@events) { 
					next unless $event->type eq "congress";
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "min_panel_size"
					});
				}

				$setting->delete;
			}

			if ($tag eq "elim_method") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "elim_method"
					});
				}

				$setting->delete;
			}

			if ($tag eq "honorable_mentions") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "honorable_mentions"
					});
				}
				$setting->delete;

			}

			if ($tag eq "more_quals") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "more_quals"
					});
				}

				$setting->delete;
			}

			if ($tag eq "novices") {

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event,
						value => $value,
						tag => "novices"
					});
				}

				$setting->delete;
			}
			
			my @groups = $tourn->judge_groups;

			if ($tag eq "audit_method") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value => $value,
						tag => "audit_method"
					});
				}

				$setting->delete;
			}


			if ($tag eq "judge_cells") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value => $value,
						tag => "judge_cells"
					});
				}
				$setting->delete;
			}


			if ($tag eq "judge_event_twice") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value => $value,
						tag => "judge_event_twice"
					});
				}
				$setting->delete;
			}


			if ($tag eq "judge_policy") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value => $value,
						tag => "judge_policy"
					});
				}
				$setting->delete;
			}


			if ($tag eq "judge_randomize") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value => $value,
						tag => "judge_randomize"
					});
				}
				$setting->delete;
			}


			if ($tag eq "judge_sheet_notice") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value       => $value,
						tag         => "judge_sheet_notice"
					});
				}
				$setting->delete;
			}


			if ($tag eq "no_back_to_back") {
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value       => $value,
						tag         => "no_back_to_back"
					});
				}
				$setting->delete;
			}


			if ($tag eq "track_first_year") { 
				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						value       => $value,
						tag         => "first_year_outs"
					});
				}
				$setting->delete;
			}

		}
	}

	$m->print("Done");


</%init>
