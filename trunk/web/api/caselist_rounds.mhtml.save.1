<%args>
	#Pass in a school code by chapter ID, two debater names and side in the URL parameters
	$chapter_id => undef
	$debatername1 => undef
	$debatername2 => undef
	$side => undef
	
</%args>
<%init>

	#Retrieve the chapter object by the chapter_id code
        my $chapter = Tab::Chapter->retrieve($chapter_id);
        
	#If chapter wasn't found, print an error and abort
	unless ($chapter) {
		$m->print("School not found.");
		$m->abort;
 	}

	#Initiate new XML
	use XML::Simple;
	my $xs = new XML::Simple();

	#Print the start of the XML
	$r->content_type("application/xml");
	$m->print("<?xml version='1.0' standalone='yes'?>\r\n");
	$m->print("<ROUNDS>\r\n");

	#Get all students
	my @students = $m->comp("/api/caselist_chapter_students.mas", chapter => $chapter);

	#Loop through each student and look for a match	
	my $debater1;
	my $debater2;
	foreach my $student (@students) {
		my $first = $student->first;
		my $last = $student->last;
		my $fullname = $first . " " . $last;
		if ($fullname eq $debatername1){$debater1 = $student}
		if ($fullname eq $debatername2){$debater2 = $student}
	}

	#Unless both debaters were found, print error and exit
	if ($debater1 == "" || $debater2 == "") {
		$m->print("Debater not found.");
		$m->abort;
	}

	#Set SQL for searching entries by student
	Tab::Entry->set_sql ( by_student => "
		select distinct entry.*
		from entry, entry_student, student, event, tourn
		where student.id = ?
		and student.id = entry_student.student
		and entry_student.entry = entry.id
		and entry.event = event.id
		and event.tourn = tourn.id
		order by tourn.start desc
	");

	#Get the entries for each debater
	my @entries1 = Tab::Entry->search_by_student($debater1->id);
	my @entries2 = Tab::Entry->search_by_student($debater2->id);

	#Use hashes to get the intersection of both arrays
	my %entries1 = map{$_ =>1} @entries1;
	my %entries2 = map{$_ =>1} @entries2;
	my @entries = grep( $entries1{$_}, @entries2 );

	my @rounds;

	#Get rounds for each entry and store in array
	foreach my $entry (@entries) {
		my $entryid = $entry->id;
		Tab::Round->set_sql( by_entry => "
			select distinct round.*
			from round, entry
			where entry.id = $entryid
		");
		
		push( @rounds, Tab::Round->search_by_entry($en) );
	}

	foreach my $round (@rounds) {
		print($round->realname . "\n");
	}

#	#Get all panels for debater1
#	Tab::Panel->set_sql( by_student => "
#		select panel.*, ballot.side as side, ballot.bye as bye, ballot.speakerorder as pos, entry_student.entry as entryid
#		from panel, ballot, entry_student, student, round, event, tourn
#		where student.id = ?
#		and event.tourn = tourn.id
#		and event.id = round.event
#		and round.id = panel.round
#		and round.post_results > 0
#		and panel.id = ballot.panel
#		and ballot.entry = entry_student.entry
#		and ballot.audit != 1
#		and student.id = entry_student.student
#		group by panel.id
#		order by event.id, round.name
#		");
#	my @panels = Tab::Panel->search_by_student($debater1->id);

#	foreach my $panel (@panels) {
#		print($panel->round->realname . "\n");
#	}








#		#Set variables for the XML
#		my $xml_team = {
#			TEAM_NAME => $unique[$number][0],
#			DEBATER1 => $unique[$number][1],
#			DEBATER2 => $unique[$number][2]
#		};
#
#		#Print XML
#		$m->print("<TEAM>\n");
#		$m->print($xs->XMLout($xml_team, RootName => "", NoAttr => 1, XMLDecl => 0));
#		$m->print("</TEAM>\n");		
#	}

	#Close XML
	$m->print("</ROUNDS>");
</%init>
