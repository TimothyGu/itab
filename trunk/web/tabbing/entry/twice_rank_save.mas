<%args>
	$tourn
	$judge_id
	$account
	$all => undef
	$panel_id
	$timeslot_id
	$check => undef
	$audit => "Rank"
	$next  => undef
	$debug => 1
	$display => undef
</%args>
<%init>

	my $msg;
	my $err;
	my $rank_err;

	my $judge = Tab::Judge->retrieve($judge_id);
	my $judge_code = $judge->code;
	$judge_code = $judge->first." ".$judge->first if $display eq "name";

	my $panel = Tab::Panel->retrieve($panel_id);

	my @ballots = Tab::Ballot->search( judge => $judge_id, panel => $panel_id);
	my @ballot_values = $m->comp('/funclib/panel_ballot_values.mas', panel => $panel, judge => $judge);

	my %values_by_ballot = ();

	foreach my $value (@ballot_values) {
		push @{$values_by_ballot{$value->ballot->id}}, $value;
	}

	my @missing;
	my @doubled;
	my %ranks;

	my $biggest_rank = scalar @ballots;
	my @too_large;

	Tab::debuglog(scalar @ballots." ballots found.");

	my $second_entry;
	my $alert_rank;
	my $alert_points;
	my $alert_noshow;
	my $alert_tv;

	foreach my $ballot (@ballots) {

		my @values = @{$values_by_ballot{$ballot->id}} if $values_by_ballot{$ballot->id};

		next if $ballot->entry->dropped == 1;
		my $ballot_id = $ballot->id;

		# anytime a rank changes the ballot needs to be error free against
		# the values already in the database in order to clear;

		$ballot->audit(0);

		my $rank;
		my $points;

		my $rank_value = $ARGS{"rank_$ballot_id"};
		my $points_value = $ARGS{"points_$ballot_id"};

		unless ($ballot->account) { 
			while (@values) { 
				my $value = shift @values;
				$value->delete;
			}
		}

		if (@values) { 

			if ($ballot->account && $ballot->account->id == $account->id && not defined $account->site_admin) { 
				$err = "You did the first entry. You cannot do the second.  Hand the ballot to someone else.";
				$m->redirect("index.mhtml?all=$all&timeslot_id=$timeslot_id&judge_code=$judge_code&judge_id=$judge_id&rank_err=$rank_err&err=$err&check=$check&audit=$audit");
			} 

			$second_entry++;
	
			foreach my $value (@values) {
				$rank = $value if $value->tag eq "rank";
				$points = $value if $value->tag eq "points";
			}

			$alert_rank++ if $second_entry && $rank && $rank->value != $ARGS{"rank_$ballot_id"};
			$alert_points++ if $second_entry && $points && $points->value != $ARGS{"points_$ballot_id"};

			$rank->value($ARGS{"rank_$ballot_id"}) if $rank;
			$points->value($ARGS{"points_$ballot_id"}) if $points;

			$rank->update if $rank;
			$points->update if $points;

			$alert_tv++ if $ballot->tv != $ARGS{"tv_$ballot_id"};
			$alert_noshow++ if $ballot->noshow != $ARGS{"noshow_$ballot_id"};

		} else { 

			$rank = Tab::BallotValue->create({
				ballot => $ballot,
				tag => "rank",
				value => $ARGS{"rank_$ballot_id"}
			}) if ($ARGS{"rank_$ballot_id"});

			$points = Tab::BallotValue->create({
				ballot => $ballot,
				tag => "points",
				value => $ARGS{"points_$ballot_id"}
			}) if ($ARGS{"points_$ballot_id"});

		}

		Tab::debuglog("Noshow key is noshow_$ballot_id and value is ".$ARGS{"noshow_$ballot_id"});

		$ballot->noshow($ARGS{"noshow_$ballot_id"});
		$ballot->tv($ARGS{"tv_$ballot_id"});
		$ballot->update;

		push (@missing, $ballot->entry) unless ($ballot->noshow || $rank);
		push (@doubled, $rank->value) if $rank && $ranks{$rank->value};	
		$ranks{$rank->value}++ if $rank;
		push (@too_large, $rank->value) if $rank && $rank->value > $biggest_rank;

	}

	if ($alert_rank || $alert_points || $alert_tv || $alert_noshow) {
		$rank_err .= "The second enterer did not have the same RANKS as the first" if $alert_rank;
		$rank_err .= "The second enterer did not have the same SPEAKER POINTS as the first" if $alert_points;
		$rank_err .= "The second enterer did not have the same TIME VIOLATIONS as the first" if $alert_tv;
		$rank_err .= "The second enterer did not have the same NO SHOWS MARKED as the first" if $alert_noshow;
	} 

	$rank_err .= " on Judge $judge_code ballot <br />" if $rank_err;
	
	if ($second_entry && not defined $rank_err) { 
		foreach my $ballot (@ballots) { 
			$ballot->audit(1);
			$ballot->update;
		}
	}

	unless (@too_large || @missing || @doubled ) { 
		foreach my $ballot (@ballots) { 
			$ballot->account($account->id);
			$ballot->update;
		}
	}

	if (@missing) { 
		$err = " <br>  Ballot for judge $judge_code was missing ranks for competitor(s): ";
		foreach my $mc (@missing) { $err = $err." ".$mc->code.". "; }
	} 

	if (@doubled) { 
		$err = $err ."<br>You gave more than one student ranks of @doubled from judge $judge_code.";
	}

	if (@too_large) { 
		$err = $err . "<br>   You gave ranks over the maximum: @too_large from judge $judge_code";
	}

	my $yellowmsg = "Entered judge $judge_code.  Pass the ballot to another for the second entry." unless $second_entry || $err;
	my $greenmsg = "Double checked judge $judge_code.  Ballot complete." if $second_entry && not defined $err;

	$err .= "<br />Please enter the ballot again" if $err;

	$m->redirect("index.mhtml?all=$all&timeslot_id=$timeslot_id&judge_id=$judge_id&judge_code=$judge_code&rank_err=$rank_err&err=$err&msg=$msg&check=$check&audit=$audit&greenmsg=$greenmsg&yellowmsg=$yellowmsg") if $err || $rank_err;
	$m->redirect("index.mhtml?all=$all&timeslot_id=$timeslot_id&judge_code=$next&rank_err=$rank_err&err=$err&msg=$msg&check=$check&audit=$audit&greemsg=$greenmsg&yellowmsg=$yellowmsg");

</%init>

