<%args>
	$tourn
	$account
	$judge_id
	$panel_id
	$all => undef
	$display => undef
</%args>
<%init>

	my $msg;
	my $err;
	my $rank_err;

	my $judge = Tab::Judge->retrieve($judge_id);
	my $panel = Tab::Panel->retrieve($panel_id);

	my @ballots = Tab::Ballot->search( judge => $judge_id, panel => $panel_id);
	my @ballot_values = $m->comp('/funclib/panel_ballot_values.mas', panel => $panel, judge => $judge);

	my %values_by_ballot = ();
	foreach my $value (@ballot_values) {
		push @{$values_by_ballot{$value->ballot->id}}, $value;
	}

	my $point_increments = $panel->round->event->setting("point_increments") if $panel;
	my $min = $panel->round->event->setting('min_points') if $panel;  
	my $max = $panel->round->event->setting('max_points') if $panel;

	my %team_rank;
	my %team_points;
	my %speaker_points;
	my %already;

	foreach my $ballot (@ballots) {

		foreach my $student ($ballot->entry->students) { 
			$speaker_points{$student->id} += $ARGS{"points_".$student->id};
			$team_points{$ballot->entry->id} += $ARGS{"points_".$student->id};
			$rank_err .= "Points ".$ARGS{"points_".$student->id}." are outside range" if $ARGS{"points_".$student->id} < $min || $ARGS{"points_".$student->id} > $max;
		}

		$rank_err .= " Duplicated team points of ".$team_points{$ballot->entry->id} if $already{$team_points{$ballot->entry->id}};
		$already{$team_points{$ballot->entry->id}}++;
	}

	$m->redirect("index.mhtml?all=$all&timeslot_id=".$panel->round->timeslot->id."&judge_id=$judge_id&rank_err=$rank_err&err=$err") if $rank_err;

	my %done_team;
	my %done_student;

	@ballots = sort {$team_points{$b->entry->id} <=> $team_points{$a->entry->id}} @ballots;

	my $rank;

	foreach my $ballot (@ballots) {

		$rank++;
		$team_rank{$ballot->entry->id} = $rank;

		foreach my $value (@{$values_by_ballot{$ballot->id}}) { 

			if ($value->tag eq "points") { 

				if ($value->value != $speaker_points{$value->student}) { 
					$rank_err = "Points disagreed.  Please enter again";
					$value->value($speaker_points{$value->student});
					$value->update;
				}

				$done_student{$value->student}++;
			}

			if ($value->tag eq "rank") { 

				if ($value->value != $rank) { 
					$rank_err = "Ranks disagreed.  Please enter again";
					$value->value($rank);
					$value->update;
				}

				$done_team{$ballot->entry->id}++;

			}

		}

	}

	my $undone;

	foreach my $ballot (@ballots) {

		foreach my $student ($ballot->entry->students) { 

			next if $done_student{$student->id};
			$undone++;

			Tab::BallotValue->create({
				ballot => $ballot->id,
				tag => "points",
				student => $student->id,
				value => $speaker_points{$student->id}
			});
			
		}

		next if $done_team{$ballot->entry->id};
		$undone++;

		Tab::BallotValue->create({
			ballot => $ballot->id,
			tag => "rank",
			value => $team_rank{$ballot->entry->id}
		});

	}

	$m->redirect("index.mhtml?all=$all&timeslot_id=".$panel->round->timeslot->id."&judge_id=$judge_id&rank_err=$rank_err&err=$err") if $rank_err;

	unless ($undone) {

		foreach my $ballot ($panel->ballots) { 
			$ballot->audit(1);
			$ballot->account($account->id);
			$ballot->update;
		}

		$msg = "Double check confirmed.  Ballot complete.";

	} else { 

		foreach my $ballot (@ballots) { 
			$ballot->account($account->id);
			$ballot->update;
		}

		$msg = "First entry complete.  Re-enter ballot to confirm";
	}

	my $rank_string;

	$rank_string = '<h3>Ballot first entry done.  Hand it to second entry</h3>';
	$rank_string = '<h3>Ballot confirmed</h3>' unless $undone;
	Tab::debuglog("I have ".scalar @ballots." ballots: @ballots");

	foreach my $ballot (sort {$a->speakerorder <=> $b->speakerorder} @ballots) {
		Tab::debuglog("Ranking ballot $ballot with team rank ".$team_rank{$ballot->entry->id});
		$rank_string .= '<div class="padmore grey block martop"><span class="medspan"><h4>'.$team_rank{$ballot->entry->id}.'</h4></span><span class="biggerspan">'.$ballot->entry->code."</span></div>";
	}

	$m->redirect("index.mhtml?all=$all&timeslot_id=".$panel->round->timeslot->id."&err=$err&rank_string=$rank_string&msg=$msg");

</%init>

