<%args>
	$type
	$event
	@breaks
	$numpanels
	$round
</%args>
<%init> 

	# Snaking involves putting students in panels based on power.  They should
	# already be in order by seeding.  

	# Preset panels
	my @panels = $round->panels;

	my $letter = "A";

	my %judges_by_panel = ();

	PANEL:
	foreach (1 .. $numpanels) { 

		my $key = $_ - 1;

		#If there's already a panel here, use that instead
		if ($panels[$key]) { 
			$letter = $panels[$key]->letter;
			push (@{$judges_by_panel{$panels[$key]->id}}, $panels[$key]->judges);
			next PANEL;
		}
	
		my $panel = Tab::Panel->create({ 
			letter => $letter,
			round => $round->id,
			event => $event->id,
			type => $type
		});

		$letter++;
		push (@panels, $panel); 
	} 

	my @tmp_panels;
	my $rev = 1;
	my $seed;

	foreach my $break (@breaks) {

		unless (@tmp_panels) { #if tmp_panels doesn't exist, reverse and resort

			$seed++;
			@tmp_panels = ( $rev == 0 ) ? @panels : reverse @panels;
		    $rev = ( $rev == 0 ) ? 1 : 0;

		}

		my $panel = shift @tmp_panels;

		foreach my $judge (@{$judges_by_panel{$panel->id}}) { 
	
			#Create the kid a ballot for each preset judge

			my $ballot = Tab::Ballot->create({
				panel => $panel->id,
				comp  => $break->id,
				speechnumber => 1,
				speakerorder => 0,
				judge  => $judge->id,
				seed => $seed
			});

		}

		unless (@{$judges_by_panel{$panel->id}}) { 

			#Create a ballot without a judge if there are no judges.

			my $ballot = Tab::Ballot->create({
				panel => $panel->id,
				comp  => $break->id,
				speechnumber => 1,
				speakerorder => 0,
				seed => $seed
			});
		}

	} #end of foreach break

	# Delete any placeholder ballots that might still be kicking round

	foreach ($round->empties) { $_->delete; }	

	$round->preset(0);
	$round->update;

	return;

</%init> 
