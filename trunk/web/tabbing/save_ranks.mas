<%args>
	$tourn
	$judge_id
	$all => undef
	$panel_id
	$timeslot_id
	$check => undef
	$audit => "Rank"
	$next  => undef
	$debug => undef
	$display => undef
</%args>
<%init>

my $msg;
my $err;
my $rank_err;
my @ballots = Tab::Ballot->search( judge => $judge_id, panel => $panel_id);
my @missing;
my @doubled;
my %ranks;
my $judge = Tab::Judge->retrieve($judge_id);
my $judge_code = $judge->code;
$judge_code = $judge->name if $display eq "name";

my $biggest_rank = scalar @ballots;
my @too_large;


if ($tourn->method->audit_method eq "visual" ) {

	if ($audit eq "Rank") { 

		foreach my $ballot (@ballots) {

			next unless $ballot->entry;
			next if $ballot->entry->dropped == 1;
			my $ballot_id = $ballot->id;

			#anytime a rank changes it needs to be re-checked
			$ballot->audit(0);
			
			$ballot->rank($ARGS{"rank_$ballot_id"});
			$ballot->real_rank($ARGS{"rank_$ballot_id"});

			$ballot->points($ARGS{"points_$ballot_id"});
			$ballot->real_points($ARGS{"points_$ballot_id"});

			$ballot->tv($ARGS{"tv_$ballot_id"});
			$ballot->noshow($ARGS{"noshow_$ballot_id"});
			$ballot->update;

			push (@missing, $ballot->entry) unless ($ballot->noshow || $ballot->rank);

			push (@doubled, $ballot->rank) if $ranks{$ballot->rank};	

			$ranks{$ballot->rank}++;

	 		push (@too_large, $ballot->rank) if $ballot->rank > $biggest_rank;

		}

		if (@missing) { 
			$err = "<br>Missing ranks for competitors: ";
			foreach my $mc (@missing) { $err = $err." ".$mc->code.". "; }
		} 

		if (@doubled) { 
			$err = $err ."<br>You gave more than one student ranks of @doubled.";
		}

		if (@too_large) { 
			$err = $err . "<br> You gave ranks over the maximum: @too_large.";
		}

		$msg = "Entered judge $judge_code";

	}

	if ($audit eq "Audit") { 

		foreach my $ballot (@ballots) { 
		
			$ballot->audit(1);
			$ballot->update;

		}

		$msg = "Entrylete";

	}

	my @next_judges = Tab::Judge->search( tournament => $tourn->id, code => $next) if $next;
	my $next_judge = $next_judges[0]->id if @next_judges;
	$msg = "(J$judge_code last audited)" if @next_judges && $audit eq "Audit";
	$msg = "(J$judge_code last entered)" if @next_judges && $audit eq "Rank";
	$msg = $msg." <p>Next judge J$next does not exist in this tournament</p>" 
			if ($next && not @next_judges);
	
	$m->redirect("$Tab::url_prefix/tabbing/rank.mhtml?all=$all&timeslot_id=$timeslot_id&judge_id=$next_judge&msg=$msg&err=$err&check=$check&audit=$audit");

}

if ($tourn->method->audit_method eq "twice") { 

	my $second_entry;

	my $alert_rank;
	my $alert_points;
	my $alert_noshow;
	my $alert_tv;

	foreach my $ballot (@ballots) {

		next if $ballot->entry->dropped == 1;
		my $ballot_id = $ballot->id;

		# anytime a rank changes the ballot needs to be error free against the values
		# already in the database in order to clear;
		$ballot->audit(0);

		system "/usr/bin/logger Ballot number ".$ballot->id if $debug;

		$second_entry++ if $ballot->real_rank > 0 || $ballot->real_points > 0;
	
		system "/usr/bin/logger We are on the audit cycle" if $debug;

		$alert_rank++ if $second_entry && $ballot->real_rank != $ARGS{"rank_$ballot_id"};
		$alert_points++ if $second_entry && $ballot->real_points != $ARGS{"points_$ballot_id"};

		if ($debug) { 

			if ($alert_rank) { 
				system "/usr/bin/logger Ranks of ".$ballot->real_rank." do not agree with ".$ARGS{"rank_$ballot_id"} if $debug;
			} else { 
				system "/usr/bin/logger Ranks of ".$ballot->real_rank." agree with ".$ARGS{"rank_$ballot_id"} if $debug;
			}

			if ($alert_points) { 
				system "/usr/bin/logger Points of ".$ballot->real_points." do not agree with ".$ARGS{"points_$ballot_id"} if $debug;
			} else { 
				system "/usr/bin/logger Points of ".$ballot->real_points." agree with ".$ARGS{"points_$ballot_id"} if $debug;
			}

		}

		$ballot->rank($ARGS{"rank_$ballot_id"});
		$ballot->real_rank($ARGS{"rank_$ballot_id"});
		$ballot->points($ARGS{"points_$ballot_id"});
		$ballot->real_points($ARGS{"points_$ballot_id"});

		$alert_tv++ if $second_entry && $ballot->tv != $ARGS{"tv_$ballot_id"};
		$ballot->tv($ARGS{"tv_$ballot_id"});

		$alert_noshow++ if $second_entry && $ballot->noshow != $ARGS{"noshow_$ballot_id"};
		$ballot->noshow($ARGS{"noshow_$ballot_id"});

		$ballot->update;

		push (@missing, $ballot->entry) unless ($ballot->noshow || $ballot->rank);
		push (@doubled, $ballot->rank) if $ranks{$ballot->rank};	

		$ranks{$ballot->rank}++;
 		push (@too_large, $ballot->rank) if $ballot->rank > $biggest_rank;

	}

	if ($alert_rank || $alert_points || $alert_tv || $alert_noshow) {

		$rank_err .= "The second enterer did not have the same RANKS as the first" if $alert_rank;
		$rank_err .= "The second enterer did not have the same SPEAKER POINTS as the first" if $alert_points;
		$rank_err .= "The second enterer did not have the same TIME VIOLATIONS as the first" if $alert_tv;
		$rank_err .= "The second enterer did not have the same NO SHOWS MARKED as the first" if $alert_noshow;
	} 

	$rank_err .= " on Judge $judge_code ballot <br />" if $rank_err;
	
	if ($second_entry && not defined $rank_err) { 
		foreach my $ballot (@ballots) { 
			$ballot->audit(1);
			$ballot->update;
		}
	}

	if (@missing) { 
		$err = " <br>  Ballot for judge $judge_code was missing ranks for competitor(s): ";
		foreach my $mc (@missing) { $err = $err." ".$mc->code.". "; }
	} 

	if (@doubled) { 
		$err = $err ."<br>You gave more than one student ranks of @doubled from judge $judge_code.";
	}

	if (@too_large) { 
		$err = $err . "<br>   You gave ranks over the maximum: @too_large from judge $judge_code";
	}

	$msg = "Entered judge $judge_code.  Pass the ballot to another for the second entry." unless $second_entry;
	$msg = "Double checked judge $judge_code.  Ballot entrylete." if $second_entry && not defined $err;

	my @next_judges = Tab::Judge->search( tournament => $tourn->id, code => $next) if $next;
	my $next_judge = $next_judges[0]->id if @next_judges;
	$msg = $msg." <p>Next judge J$next does not exist in this tournament</p>" 
			if ($next && not @next_judges);

	$m->redirect("$Tab::url_prefix/tabbing/rank.mhtml?all=$all&timeslot_id=$timeslot_id&judge_code=$judge_code&judge_id=$next_judge&rank_err=$rank_err&err=$err&msg=$msg&check=$check&audit=$audit");

}

if ($tourn->method->audit_method eq "none") { 

	foreach my $ballot (@ballots) {

		next if $ballot->entry->dropped == 1;
		my $ballot_id = $ballot->id;

		# anytime a rank changes the ballot needs to be error free against the values
		# already in the database in order to clear;
		$ballot->audit(0);

		system "/usr/bin/logger Ballot number ".$ballot->id if $debug;

		$ballot->rank($ARGS{"rank_$ballot_id"});
		$ballot->real_rank($ARGS{"rank_$ballot_id"});
		$ballot->points($ARGS{"points_$ballot_id"});
		$ballot->real_points($ARGS{"points_$ballot_id"});
		$ballot->audit(1);
		$ballot->update;

		push (@missing, $ballot->entry) unless ($ballot->noshow || $ballot->rank);
		push (@doubled, $ballot->rank) if $ranks{$ballot->rank};	

		$ranks{$ballot->rank}++;

 		push (@too_large, $ballot->rank) if $ballot->rank > $biggest_rank;

	}

	if (@missing) { 
		$err = " <br>  Ballot for judge $judge_code was missing ranks for competitor(s): ";
		foreach my $mc (@missing) { $err = $err." ".$mc->code.". "; }
	} 

	if (@doubled) { 
		$err = $err ."<br>  You gave more than one student ranks of @doubled from judge $judge_code.";
	}

	if (@too_large) { 
		$err = $err . "<br>   You gave ranks over the maximum: @too_large from judge $judge_code";
	}

	$msg = "Entered judge $judge_code's ballots.  Ballot entrylete.";

	my @next_judges = Tab::Judge->search( tournament => $tourn->id, code => $next) if $next;
	my $next_judge = $next_judges[0]->id if @next_judges;
	$msg = $msg." <p>Next judge J$next does not exist in this tournament</p>" 
			if ($next && not @next_judges);

	$m->redirect("$Tab::url_prefix/tabbing/rank.mhtml?all=$all&timeslot_id=$timeslot_id&judge_id=$next_judge&err=$err&msg=$msg&check=$check&audit=$audit");

}


</%init>

