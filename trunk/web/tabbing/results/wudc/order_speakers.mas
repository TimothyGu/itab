<%args>
	$round
</%args>
<%init>

	my $event = $round->event;
	my $tourn = $event->tourn;

	my $tb_set_id = $round->event->setting("speaker_tbset");
	my $tb_set = Tab::TiebreakSet->retrieve($tb_set_id);

	unless ($tb_set) {  
		my $err = "That event does not have a speaker points tiebreaker set applied to it.  Please pick one and try again";
		$m->redirect("/setup/schedule/event.mhtml?event_id=".$round->event->id."&err=$err");
	}

	my @panels;
	my @ballots;
	my @entries;
	my @values;
	my @judges;

	my %used = (); 
	my $all;
	my $elim;

	my %tb_tiers = ();

	foreach my $tb ($tb_set->tiebreaks) { 
		$used{$tb->count}++;
		$all++ if $tb->count eq "all";
		$elim++ if $tb->count eq "elim";
		push @{$tb_tiers{$tb->priority}}, $tb;
	}   

	# Get the data you'll need for Teh Sortingz.
	Tab::Student->set_sql( get_all_event => "
		select distinct student.* 
		from student, entry, entry_student
		where entry.event = ? 
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		order by entry.dropped, student.last
	");

	my %students_by_id = ();
	my @all_students = Tab::Student->search_get_all_event($round->event->id);
	foreach my $student (@all_students) { 
		$students_by_id{$student->id} = $student;
	}

	Tab::EntryStudent->set_sql( get_all_event => "
		select distinct entry_student.*
		from entry, entry_student
		where entry.id = entry_student.entry
		and entry.event = ? 
	");

	my %students_by_entry = ();
	my @all_es = Tab::EntryStudent->search_get_all_event($round->event->id);

	my $stucount;
	foreach my $es (@all_es) { 
		push (@{$students_by_entry{$es->entry->id}}, $students_by_id{$es->student->id});
	}

	my %school_name = ();

	foreach my $school ($m->comp("/funclib/event_schools.mas", event => $round->event)) { 
		$school_name{$school->id} = $school->short_name;
	}

	if ($all) { 

		Tab::Ballot->set_sql( get_all => "
			select distinct ballot.*
			from ballot, panel, round
			where ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			");

		@ballots = Tab::Ballot->search_get_all( $round->name, $event->id );

		Tab::Panel->set_sql( get_all => "
			select distinct panel.*
			from panel, round
			where panel.round = round.id
			and round.name <= ?
			and round.event = ?
		");

		@panels = Tab::Panel->search_get_all( $round->name, $event->id );

		Tab::Entry->set_sql( get_all => "
			select distinct entry.*
			from ballot, panel, round, entry
			where entry.id = ballot.entry
			and entry.unconfirmed = 0
			and entry.waitlist = 0
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			");

		@entries = Tab::Entry->search_get_all( $round->name, $event->id );

		Tab::BallotValue->set_sql( get_all => "
			select distinct ballot_value.*
			from ballot, panel, round, ballot_value
			where ballot_value.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			");

		@values = Tab::BallotValue->search_get_all( $round->name, $event->id );

		Tab::Judge->set_sql( get_all => "
			select distinct judge.*
			from ballot, panel, round, judge
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			");

		@judges = Tab::Judge->search_get_all( $round->name, $event->id );

	} else { 

		foreach my $key (keys %used) { 
	
			if ($key eq "last_elim") { 

				push @ballots, $m->comp('/funclib/round_ballots.mas', round => $round);
				push @panels, $round->panels;
				push @entries, $m->comp('/funclib/round_entries.mas', round => $round);
				push @judges, $m->comp('/funclib/round_judges.mas', round => $round);
				push @values, $m->comp('/funclib/round_values.mas', round => $round);

			} else {

				Tab::Ballot->set_sql( get_all => "
					select distinct ballot.*
					from ballot, panel, round
					where ballot.panel = panel.id
					and panel.round = round.id
					and round.name <= ?
					and round.type = ?
					and round.event = ?
					");

				push (@ballots,Tab::Ballot->search_get_all( $round->name, $key, $event->id ));

				Tab::Panel->set_sql( get_all => "
					select distinct panel.*
					from panel, round
					where panel.round = round.id
					and round.name <= ?
					and round.type = ?
					and round.event = ?
					");

				push (@panels, Tab::Panel->search_get_all( $round->name, $key, $event->id ));

				Tab::Entry->set_sql( get_all => "
					select distinct entry.*
					from ballot, panel, round, entry
					where entry.id = ballot.entry
					and entry.unconfirmed = 0
					and entry.waitlist = 0
					and ballot.panel = panel.id
					and panel.round = round.id
					and round.name <= ?
					and round.type = ?
					and round.event = ?
					");

				push (@entries, Tab::Entry->search_get_all( $round->name, $key, $event->id ));

				Tab::BallotValue->set_sql( get_all => "
					select distinct ballot_value.*
					from ballot, panel, round, ballot_value
					where ballot_value.ballot = ballot.id
					and ballot.panel = panel.id
					and panel.round = round.id
					and round.name <= ?
					and round.type = ?
					and round.event = ?
					");

				push (@values, Tab::BallotValue->search_get_all( $round->name, $key, $event->id ));

				Tab::Judge->set_sql( get_all => "
					select distinct judge.*
					from ballot, panel, round, judge
					where judge.id = ballot.judge
					and ballot.panel = panel.id
					and panel.round = round.id
					and round.name <= ?
					and round.type = ?
					and round.event = ?
					");

				push (@judges, Tab::Judge->search_get_all( $round->name, $key, $event->id ));

			}
		}
	}

	#Dedupe
	my %jseen = (); 
	@judges = grep { ! $jseen{$_->id} ++ } @judges;

	my %eseen = (); 
	@entries = grep { ! $eseen{$_->id} ++ } @entries;

	my %bseen = (); 
	@ballots = grep { ! $bseen{$_->id} ++ } @ballots;

	my %pseen = (); 
	@panels = grep { ! $pseen{$_->id} ++ } @panels;

	my %vseen = (); 
	@values = grep { ! $vseen{$_->id} ++ } @values;

	my @all_rounds;
	my %round_by_id = ();

	foreach my $oround ($event->rounds) { 
		next if $oround->name > $round->name;  # Do not measure the future
			$round_by_id{$oround->id} = $oround;
		push (@all_rounds, $oround);
	}

	my %values_by_student = ();
	my %values_by_ballot = ();
	foreach my $value (@values) { 
		push @{$values_by_ballot{$value->ballot->id}}, $value;
		push @{$values_by_student{$value->student->id}}, $value if $value->student;
	}

	my %dq_entry;
	my %entry_by_id = ();
	foreach my $entry (@entries) { 
		$entry_by_id{$entry->id} = $entry;
		$dq_entry{$entry->id}++ if $entry->dq;
	}

	my %judge_by_id = ();
	foreach my $judge (@judges) { 
		$judge_by_id{$judge->id} = $judge;
	}

	my %panels_by_round = ();
	my %panel_by_id = ();
	my %round_panel = ();
	foreach my $panel (@panels) { 
		push @{$panels_by_round{$panel->round->id}}, $panel;
		$panel_by_id{$panel->id} = $panel;
		$round_panel{$panel->id} = $panel->round->name;
	}

	my %ballots_by_panel = ();
	my %ballots_by_entry = ();
	my %ballots_by_judge = ();
	my %ballots_by_entry_panel = ();
	my %ballots_by_judge_panel = ();
	my %entry_ids_by_panel = ();
	my %judge_ids_by_panel = ();
	my %last_round = ();

	my %panel_ids_by_entry = ();

	foreach my $ballot (@ballots) { 
		push @{$ballots_by_panel{$ballot->panel->id}}, $ballot;
		push @{$ballots_by_entry{$ballot->entry->id}}, $ballot;
		push @{$ballots_by_entry_panel{$ballot->entry->id."-".$ballot->panel->id}}, $ballot;
		push @{$ballots_by_judge_panel{$ballot->judge->id."-".$ballot->panel->id}}, $ballot;
		push @{$entry_ids_by_panel{$ballot->panel->id}}, $ballot->entry->id;
		push @{$judge_ids_by_panel{$ballot->panel->id}}, $ballot->judge->id;
		push @{$panel_ids_by_entry{$ballot->entry->id}}, $ballot->panel->id;
		$last_round{$ballot->entry->id} = $round_panel{$ballot->panel->id} if $last_round{$ballot->entry->id} < $round_panel{$ballot->panel->id};
	}

	my %dq_panel_threshold = ();

	foreach my $key (keys %dq_entry) { 

		foreach my $ballot (@{$ballots_by_entry{$key}}) { 
			my $rank;
			foreach my $value (@{$values_by_ballot{$ballot->id}}) { 
				$rank = $value->value if $value->tag eq "rank";
			}

			$dq_panel_threshold{$ballot->panel->id."-".$ballot->judge->id} = $rank;
		}
	}

	if ($round->type eq "elim" || $round->type eq "final") { 
		my @counted;
		foreach my $entry (@entries) { 
			next if $last_round{$entry->id} < $round->name;
			push (@counted, $entry);
		}
		@entries = @counted;
	}
	
	my %student_tbs = ();
	my %tier_descs = ();
	my %tier_dir = ();

	foreach my $key (sort keys %tb_tiers) { 
	
		my $tier_desc;

		foreach my $tb (sort {$a <=> $b} @{$tb_tiers{$key}}) { 

			$tier_dir{$key} = "down" if $tb->name eq "ranks" || $tb->name eq "reciprocals" || $tb->name eq "judgepref" || $tb->name eq "points" || $tb->name eq "winloss" || $tb->name eq "opp_wins" || $tb->name eq "opp_points" || $tb->name eq "judgevar";
			$tier_dir{$key} = "up" if $tb->name eq "coinflip" || $tb->name eq "competition" || $tb->name eq "rankinround";
			
			$tier_desc .= "+" if $tier_desc;
			$tier_desc .= "Rks" if $tb->name eq "ranks";
			$tier_desc .= "Pts" if $tb->name eq "points";
			$tier_desc .= "Rcp" if $tb->name eq "reciprocals";
			$tier_desc .= "JPr" if $tb->name eq "judgepref";
			$tier_desc .= "Rnd" if $tb->name eq "coinflip";
			$tier_desc .= "QC" if $tb->name eq "competition";
			$tier_desc .= "RRk" if $tb->name eq "rankinround";
			$tier_desc .= "Win" if $tb->name eq "winloss";
			$tier_desc .= "OWn" if $tb->name eq "opp_wins";
			$tier_desc .= "OPt" if $tb->name eq "opp_points";
			$tier_desc .= "JVr" if $tb->name eq "judgevar";
			$tier_desc .= " H/L" if $tb->highlow == 1;
			$tier_desc .= "2H/L" if $tb->highlow == 2;
			$tier_desc .= "-1H" if $tb->highlow == 3;
			$tier_desc .= "-1L" if $tb->highlow == 4;
		}

		$tier_descs{$key} = $tier_desc;

		foreach my $entry (@entries) { 

			my @students = @{$students_by_entry{$entry->id}} if $students_by_entry{$entry->id};

			my %student_total = ();
			my %student_tier_total = ();

			foreach my $tb (@{$tb_tiers{$key}}) { 

				my $name = $tb->name;
				my @rounds;

				foreach my $oround (@all_rounds) { 

					next if $oround->name > $round->name; #Avoid the future

					if ($tb->count eq "prelim") { 
						push (@rounds, $oround) if $oround->type ne "elim" && $oround->type ne "final";
					}

					push (@rounds, $oround) if $tb->count eq "all";
					push (@rounds, $round) if $round->type eq "elim" and $tb->count eq "last elim";
				}

				my $best;
				my $worst;
				my $total;
				my $nextbest;
				my $nextworst;

				if ($name eq "ranks") { 
				
					foreach my $student (@students) { 

						foreach my $this_round (@rounds) { 
						
							my $rank;

							foreach my $panel (@{$panels_by_round{$this_round->id}}) { 
								foreach my $ballot (@{$ballots_by_entry_panel{$entry->id."-".$panel->id}}) { 
									foreach my $value (@{$values_by_ballot{$ballot->id}}) { 
										$rank = (4 - $value->value) if $value->tag eq "rank";
									}
								}
							}

							if ($this_round->type ne "elim" && $this_round->type ne "final" ) { 

								if ($rank <= $worst) { 
									$nextworst = $worst;
								}

								if ($rank < $worst) { 
									$worst = $rank;
								}

								if ($rank >= $best) { 
									$nextbest = $best;
								}

								if ($rank > $best || not defined $best) { 
									$best = $rank;
								}
							}

							$student_total{$student->id} += $rank;

							$student_total{$student->id} -= $best  if ($tb->highlow == 3 || $tb->highlow == 1 || $tb->highlow == 2);
							$student_total{$student->id} -= $worst if ($tb->highlow == 4 || $tb->highlow == 1 || $tb->highlow == 2);
							$student_total{$student->id} -= $nextbest  if ($tb->highlow == 2);
							$student_total{$student->id} -= $nextworst if ($tb->highlow == 2);

						}
					}

				} elsif ( $name eq "points" ) { 
					
					foreach my $student (@students) { 
				
						my $total;

						foreach my $value (@{$values_by_student{$student->id}}) { 

							my $points = $value->value if $value->tag eq "points" && $value->student->id == $student->id;

							if ($points <= $worst) { 
								$nextworst = $worst;
							}

							if (not defined $worst || $points < $worst) { 
								$worst = $points;
							}

							if ($points >= $best) { 
								$nextbest = $best;
							}

							if ($points > $best) { 
								$best = $points;
							}

							$total += $points;
						}

						$student_total{$student->id} += $total;
						$student_total{$student->id} -= $best  if ($tb->highlow == 3 || $tb->highlow == 1 || $tb->highlow == 2);
						$student_total{$student->id} -= $worst if ($tb->highlow == 4 || $tb->highlow == 1 || $tb->highlow == 2);
						$student_total{$student->id} -= $nextbest  if ($tb->highlow == 2);
						$student_total{$student->id} -= $nextworst if ($tb->highlow == 2);
						
					}

				} elsif ( $name eq "coinflip") { 
					
					# This is only semi random; product of the date epoch and
					# the random entry ID's last four digits.  But it will be
					# the same every time this function is run.

					my $random_seed = $entry->id * $tourn->start->epoch;
					$total = substr($random_seed, -8, -3);

					foreach my $student (@students) { 
						$student_total{$student->id} = substr($random_seed, -8, -3);
					}

				}

				foreach my $student (@students) { 
					$student_tier_total{$student->id} += $student_total{$student->id} * $tb->multiplier if $tb->multiplier;
				}

			}

			foreach my $student (@students) { 
				$student_tbs{$student->id."-".$key} = $student_tier_total{$student->id};
				$student->code($entry->code);
				$student->school($school_name{$entry->id});
			}
		}
	}	

	foreach my $key (reverse sort keys %tb_tiers) { 
		@all_students = sort { $student_tbs{$a->id."-".$key} <=> $student_tbs{$b->id."-".$key}  } @all_students if $tier_dir{$key} eq "up";
		@all_students = sort { $student_tbs{$b->id."-".$key} <=> $student_tbs{$a->id."-".$key}  } @all_students if $tier_dir{$key} eq "down";
	}

	my $count;
	my %student_by_place = ();
	
	my $last_string;
	my $delayed_count;

	foreach my $student (@all_students) { 

		my $tier_string;

		foreach my $key (sort keys %tb_tiers) { 
			$tier_string .= "-" if $tier_string;
			$tier_string .= $student_tbs{$student->id."-".$key};
		}

		if ($tier_string eq $last_string) { 
			$delayed_count++;
		} else {
			$count++;
			$count += $delayed_count;
			undef $delayed_count;
		}

		$last_string = $tier_string;
		push (@{$student_by_place{$count}}, $student);

	}

	return (\%student_by_place, \%student_tbs, \%tier_descs);

</%init>
