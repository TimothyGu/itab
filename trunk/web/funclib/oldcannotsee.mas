<%args> 
	$circuit
	$judge_id
</%args>
<%init> 
#/

	my $judge = Tab::Judge->retrieve($judge_id); 
	my $tourn = $judge->tournament;
	my $group = $judge->judge_group;
	my @classes = $group->classes;
	my @events;
	
	
	foreach my $class (@classes) { 
		push (@events, $class->events);
	}
	
	my @cannot_see;
	
	# Same diocese if CFL
	
	if ($circuit->diocese_based ) {

		my $j_school = $judge->school;
		my $j_diocese = $j_school->region;
		my @dio_schools = $j_diocese->schools;
		foreach my $dio_school (@dio_schools) {
			push (@cannot_see, $dio_school->entries);
		}
		
	} else {
	
		# Same school unless neutral
		unless ($judge->neutral) {
			my $j_school = $judge->school;
			foreach my $event (@events) { 
				push (@cannot_see, Tab::Entry->search( event => $event->id, school => $j_school->id ));
			}
		}
	}

	#Anyone the judge has seen before if can judge an event twice

	if ($tourn->method->judge_event_twice != 1) { 

		my @ballots = $judge->ballots;
		
		foreach my $ballot (@ballots) { 
			push (@cannot_see, $ballot->comp);
		}

	}  else { 
	#Anyone in an event that the judge has judged before if not
		
		my @panels = $judge->panels;
		foreach my $panel (@panels) { 
			my $event = $panel->event;
			push (@cannot_see, $event->entries);
		}
	}

	#Anyone listed in a strike somehow

	my @strikes = $judge->strikes;
	
	
	foreach my $strike (@strikes) {
	
		if ($strike->type eq "comp") {
			push (@cannot_see, $strike->comp);
		}

		if ($strike->type eq "school") { 
			my $c_school = $strike->school;
			push (@cannot_see, $c_school->entries);
		}
		
		if ($strike->type eq "event") { 
			my $c_event = $strike->event;
			push (@cannot_see, $c_event->entries);
		}
		
		if ($strike->type eq "region") { 
			my $region = $strike->region;
			my @r_schools = $region->schools;
			foreach my $school (@r_schools) {
				push (@cannot_see, $school->entries);	
			}
		}
		
		if ($strike->type eq "diocese") { 
					my $region = $strike->region;
			my @r_schools = $region->schools;
			foreach my $school (@r_schools) {
				push (@cannot_see, $school->entries);	
			}
		}		

	}
	
	my %sort_entries = ();
		
	foreach (@cannot_see) {
		$sort_entries{$_->id}++;
	}
	
	my @unique_cannot_see = keys %sort_entries;
	
	return @unique_cannot_see;
	
</%init> 
