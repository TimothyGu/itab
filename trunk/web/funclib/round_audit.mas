<%args>
	$round => undef
	$round_id => undef
</%args>
<%init>


	Tab::Ballot->set_sql( audit_round => "
		update ballot, ballot_value, panel
		set ballot.audit = 1
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
		and ballot_value.value is not null");

	Tab::Ballot->set_sql( zero_round => "
		update ballot, panel
		set ballot.audit = 0
		where panel.round = ?
		and panel.id = ballot.panel
		and not exists ( 
			select ballot_value.id 
			from ballot_value
			where ballot_value.ballot = ballot.id
			and ballot_value.value is not null)");


	Tab::Panel->set_sql( update_bracket => "
		select panel.*, min(cast(result_value.value as unsigned)) as panelsize
		from panel, ballot, result, result_value, result_set
		where panel.id = ballot.panel
		and panel.round = ? 
		and ballot.entry = result.entry
		and result.result_set = result_set.id
		and result_set.bracket = 1
		and result.id = result_value.result
		group by panel.id
	");

	Tab::Ballot->sql_audit_round->execute($round->id) if $round;
	Tab::Ballot->sql_audit_round->execute($round_id) if $round_id;

	Tab::Ballot->sql_zero_round->execute($round->id) if $round;
	Tab::Ballot->sql_zero_round->execute($round_id) if $round_id;

	my @panels = Tab::Panel->search_update_bracket($round_id) if $round_id;
	@panels = Tab::Panel->search_update_bracket($round->id) unless $round_id;

	my $letter;

	foreach my $panel (@panels) { 
		$letter++;
		$panel->letter($letter);
		$panel->bracket($panel->panelsize);
		$panel->update;
	}

	return;

</%init>
