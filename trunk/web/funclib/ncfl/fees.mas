<%args>
	$diocese_id
	$tourn_id
</%args>
<%init>

	use POSIX;

	my $total;
	my @felines;

	my $diocese = Tab::Region->retrieve($diocese_id);
	my $tourn =  Tab::Tourn->retrieve($tourn_id);

	my $circuit = $tourn->circuit;

	if ($tourn->method->per_student_fee) { 
		my @students = $diocese->students;
		my %student_line = ();
		$student_line{"name"} = scalar @students.' individual students at x $'.$tourn->method->per_student_fee;
		$student_line{"fee"} = scalar @students * $tourn->method->per_student_fee;
		$total += $student_line{"fee"};
		push (@felines, {%student_line});
	}

	EVENT:
	foreach my $event (sort {$a->name cmp $b->name} $diocese->events($tourn)) { 

		my $count = $diocese->entry_event_count($event);
		my $fee_per = $event->fee;
		my $fee_total = $fee_per * $count;

		my $name = "$count entries in ".$event->abbr.' x $'.$fee_per;

		my %line_hash= ();
		$line_hash{"name"} = $name;
		$line_hash{"fee"} = $fee_total;

		push (@felines, {%line_hash});

		$total += $fee_total;

	}

	my $payments;

	FINE: 
	foreach my $fine ($diocese->fines) { 
		my %fine_hash;

		$fine_hash{"name"} = $fine->reason." ".$fine->timestamp->mdy('/');
		$fine_hash{"fee"} = $fine->amount;
		$fine_hash{"fine_id"} = $fine->id;

		if ($fine->reason eq "Payment") { 
			$payments += $fine->amount;
		} else { 
			$total +=  $fine->amount;
		}

		push (@felines, {%fine_hash});

	} #end of foreach fine


return ($total, $payments, \@felines);

</%init>
