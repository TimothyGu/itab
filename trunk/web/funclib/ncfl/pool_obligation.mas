<%args>
	$diocese
	$pool => undef
	$group => undef
	$debug => 1 
</%args>
<%perl>

	if ($pool) { 

		return unless $pool->type eq "elim";

		my @groups = $pool->groups;
		return unless @groups;
		my $group = shift @groups;

		my $judge_quota = $m->comp("/user/diocese/lib/judge_obligation.mas", diocese => $diocese, group => $group);

		my $max_owed = max_owed($diocese, $group, $judge_quota);
		my $pool_burden = pool_burden($diocese, $pool, $judge_quota);


		my $owed = $max_owed; 
		my $style = "overall";

		if ($pool_burden < $max_owed) { 
			$owed = $pool_burden;
			$style = "pool";
		}

	
		return $owed, $style;

	} elsif ($group) { 

		my $judge_quota = $m->comp("/user/diocese/lib/judge_obligation.mas", diocese => $diocese, group => $group);
		my $max_owed = max_owed($diocese, $group, $judge_quota);

		my $total_pool_burden;

		foreach my $pool ($group->elim_pools) { 
			$total_pool_burden += pool_burden($diocese, $pool, $judge_quota);
		}

		my $owed = $max_owed; 
		my $style = "overall";

		if ($total_pool_burden < $max_owed) { 
			$owed = $total_pool_burden;
			$style = "pool";
		}

		return $owed, $style;
	}

	sub pool_burden { 

		my ($diocese, $pool, $judge_quota) = @_;
		my $pool_burden = POSIX::ceil($judge_quota * $pool->percent * .01);
		my @pool_judges = $pool->dio_judges($diocese);

		$pool_burden -= scalar @pool_judges;
		$pool_burden = 0 if $pool_burden < 0; 
		return $pool_burden;

	}

	sub max_owed {

		my ($diocese, $group, $judge_quota) = @_;
		my @total_elims = $diocese->elim_pool_rounds($group);

		my $max_owed = $judge_quota * $group->max_pool_burden - (scalar @total_elims);

		$max_owed = 0 if $max_owed < 0;

		return $max_owed;

	}

</%perl>

