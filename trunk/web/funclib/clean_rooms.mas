<%args>
	$round => undef
	$panel => undef
</%args>
<%init>

	$round = $panel->round if $panel && $panel->round;
	return unless $round;

	my @raw_rooms;

	if ($panel) { 

		Tab::Room->set_sql(clean_rooms_by_panel => "
		   select distinct room.* from room,round,tourn,timeslot, panel
				where panel.id = ? 
				and round.id = panel.round 
				and round.site = room.site
				and room.inactive != 1
				and tourn.id = timeslot.tourn
				and round.timeslot = timeslot.id
				and not exists (
					select p2.id from panel as p2,round as r2,timeslot as t2
					where t2.start < timeslot.end
					and t2.end > timeslot.start
					and p2.room = room.id
					and p2.round = r2.id
					and r2.timeslot  = t2.id )
				and not exists (
					select strike.id from room_strike as strike,timeslot as tb
					where strike.room = room.id
					and tb.id = strike.timeslot
					and tb.start < timeslot.end
					and tb.end > timeslot.start  )
				and not exists (
					select stime.id from room_strike as stime
					where stime.room = room.id
					and stime.start < timeslot.end 
					and stime.end > timeslot.start
				)
				and not exists ( 
					select sevent.id from room_strike as sevent
					where sevent.event = round.event
				)
				and not exists (
					select sjudge.id 
					from room_strike as sjudge, ballot
					where ballot.judge = sjudge.judge
					and ballot.panel = panel.id
				)

				order by room.name 
		");

		@raw_rooms =  Tab::Room->search_clean_rooms_by_panel($panel->id);

	} else { 

		Tab::Room->set_sql(clean_rooms_by_round => "
		   select distinct room.* from room,round,tourn,timeslot
				where round.id = ?
				and round.site = room.site
				and room.inactive != 1
				and tourn.id = timeslot.tourn
				and round.timeslot = timeslot.id
				and not exists (
					select p2.id from panel as p2,round as r2,timeslot as t2
					where t2.start < timeslot.end
					and t2.end > timeslot.start
					and p2.room = room.id
					and p2.round = r2.id
					and r2.timeslot  = t2.id )
				and not exists (
					select strike.id from room_strike as strike,timeslot as tb
					where strike.room = room.id
					and tb.id = strike.timeslot
					and tb.start < timeslot.end
					and tb.end > timeslot.start  )
				and not exists (
					select stime.id from room_strike as stime
					where stime.room = room.id
					and stime.start < timeslot.end 
					and stime.end > timeslot.start
				)
				and not exists ( 
					select sevent.id from room_strike as sevent
					where sevent.event = round.event
				)
				order by room.name 
		");

	
		@raw_rooms =  Tab::Room->search_clean_rooms_by_round($round->id);

	}

	my @room_pools = $m->comp("/funclib/site_room_pools.mas", site => $round->site, tourn => $round->event->tourn);

	my %room_scores = ();
	my %banned_rooms = ();
	my %reserved_rooms = ();

	foreach my $pool (@room_pools) { 

		if ($pool->event->id == $round->event->id) { 

			if ($pool->reserved) { 
				$reserved_rooms{$pool->room->id}++;
				$room_scores{$pool->room->id} += 100;
			} else { 
				$room_scores{$pool->room->id} += 5;
			}

		} elsif ($pool->reserved) { 
			$banned_rooms{$pool->room->id}++;
			$room_scores{$pool->room->id} -= 10;
		} else { 
			$room_scores{$pool->room->id}--;
		}
	}

	my @rooms;

	ROOM:
	foreach my $room (@raw_rooms) { 
		if ($banned_rooms{$room->id}) { 
			next ROOM unless $reserved_rooms{$room->id};
		}
		push (@rooms, $room);
	}

	@rooms = sort {$a->name cmp $b->name} @rooms;
	@rooms = sort {$room_scores{$b->id} <=> $room_scores{$a->id}} @rooms;

	return @rooms;

</%init>
