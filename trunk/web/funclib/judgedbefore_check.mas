<%args>
	$round_id
</%args>
<%perl>

	# checks to see if there are any judges hearing a team a second time in a given round
	
	use Time::HiRes qw( time );
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	if ($event->setting('allow_repeat_judging')) { return; }
	if ($event->setting('allow_repeat_elims') and ($round->type eq "elim" or $round->type eq "final") ) { return; }
	my $include_elims;
	if ($event->setting('allow_repeat_elims')) {
		$include_elims="and round.type != 'elim' and round.type != 'final'";
	}
	
	my $start = time(); 
	my $warn;
	
	#STEP 1: PULL ALL BALLOTS IN THE EVENT
	
		my $event_id = $event->id;
		Tab::Ballot->columns(TEMP => qw/judge_name/);
		Tab::Ballot->columns(TEMP => qw/entry_name/);		
		Tab::Ballot->set_sql(pull_ballots => "
			select ballot.entry, ballot.judge, concat_ws(' ', judge.first, judge.last) as judge_name, entry.name as entry_name
			from ballot, panel, round, entry, judge
			where ballot.panel=panel.id
			and panel.round=round.id
			and round.event=$event_id
			and entry.id=ballot.entry
			and judge.id=ballot.judge
			$include_elims
		");

		my @ballots = Tab::Ballot->search_pull_ballots;

		my $end = time();
#		print "load time:  "; printf("%.2f\n", $end - $start); print "<br>";
	
	# STEP 2: COUNT UP WHO'S JUDGED WHO AND MAKE JUDGE AND ENTRY HASHES

	my %judged;
	my %judges;
	my %entries;
	
	foreach my $ballot ( @ballots ) {
		$judged{$ballot->judge}{$ballot->entry} ++;
		$judges{$ballot->judge}{'name'} = $ballot->judge_name; 
		$entries{$ballot->entry} = $ballot->entry_name;
	}

	# STEP 3: LOOK FOR ISSUES

	my $flag;
	
	foreach my $judge_key ( keys %judges ) {

		foreach my $entry_key ( keys %entries ) {

			if ( $judged{$judge_key}{$entry_key} > 1 ) {
			
				my @current_ballots = Tab::Ballot->search( judge => $judge_key, entry => $entry_key );
				$flag=0;
				foreach my $cur_bal (@current_ballots) {
					if ( $cur_bal->panel->round == $round_id ) { $flag=1; }
				}
				if ($flag == 1) {
					$warn .= $judges{$judge_key}{'name'}." has judged ".$entries{$entry_key}." ".$judged{$judge_key}{$entry_key}." times. ";
				}
			}

		}

	}

#	unless ($warn) { $warn = "All good!"; }
#	print $warn;
		
	return $warn;	

</%perl>
