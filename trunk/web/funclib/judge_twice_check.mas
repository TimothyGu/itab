<%args>
	$round_id
</%args>
<%perl>

	# checks to see if there are any judges hearing a team a second time in a given round
	
	use Time::HiRes qw( time );
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	if ($event->setting('allow_repeat_judging')) { return; }
	if ($event->setting('allow_repeat_elims') and ($round->type eq "elim" or $round->type eq "final") ) { return; }
	my $include_elims;
	if ($event->setting('allow_repeat_elims')) {
		$include_elims="and round.type != 'elim' and round.type != 'final'";
	}
	
	my $start = time(); 
	my $warn;
	
	#STEP 1: PULL ALL BALLOTS IN THE EVENT

    my $dbh = Tab::DBI->db_Main();
		    
    my $sth = $dbh->prepare("
		select ballot.entry, ballot.judge, concat_ws(' ', judge.first, judge.last) as judge_name, entry.name as entry_name
		from ballot, panel, round, entry, judge
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.event = ".$event->id."
			and entry.id = ballot.entry
			and judge.id = ballot.judge
			$include_elims
		");

	$sth->execute();

	my %judged;
	my %judge_name;
	my %entry_name;

	while( my ($entry, $judge, $judgename, $entryname)  = $sth->fetchrow_array() ) {
		$judged{$judge}{$entry}++;
		$judge_name{$judge} = $judgename; 
		$entry_name{$entry} = $entryname;
	}

	# STEP 3: LOOK FOR ISSUES

	my $flag;
	
	foreach my $judge_key ( keys %judge_name ) {

		foreach my $entry_key ( keys %entry_name ) {

			if ( $judged{$judge_key}{$entry_key} > 1 ) {
			
				my @current_ballots = Tab::Ballot->search( judge => $judge_key, entry => $entry_key );
				$flag=0;

				foreach my $cur_bal (@current_ballots) {
					if ( $cur_bal->panel->round == $round_id ) { $flag=1; }
				}

				if ($flag == 1) {
					$warn .= $judge_name{$judge_key}." has judged ".$entry_name{$entry_key}." ".$judged{$judge_key}{$entry_key}." times. <br />";
				}
			}

		}

	}

#	unless ($warn) { $warn = "All good!"; }
#	print $warn;
		
	return $warn;	

</%perl>
