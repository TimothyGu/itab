<%args>
	$diocese
	$pool => undef
	$group => undef
</%args>
<%perl>

	if ($pool) { 

		return if $pool->event_based;

		my $group = $pool->judge_group;

		my $judge_quota = $m->comp("judge_obligation.mas", diocese => $diocese, group => $group);

		my $max_owed = max_owed($diocese, $group, $judge_quota);
		my $pool_burden = pool_burden($diocese, $pool, $judge_quota);

		my $owed = $max_owed; 
		my $style = "overall";

		Tab::debuglog("In ".$pool->name." max owed is $max_owed and pool burden is $pool_burden");

		if ($pool_burden < $max_owed) { 
			$owed = $pool_burden;
			$style = "pool";
		}
	
		return $owed, $style;

	} elsif ($group) { 
	
		return if $group->setting("tab_room");

		my @elim_pools = $group->pools( registrant => 1, event_based => 0 );
		return unless @elim_pools;

		my $judge_quota = $m->comp("judge_obligation.mas", diocese => $diocese, group => $group);
		my $max_owed = max_owed($diocese, $group, $judge_quota);

		my $total_pool_burden;

		foreach my $pool (@elim_pools) { 
			$total_pool_burden += pool_burden($diocese, $pool, $judge_quota);
		}

		my $owed = $max_owed; 
		my $style = "overall";

		if ($total_pool_burden < $max_owed) { 
			$owed = $total_pool_burden;
			$style = "pool";
		}

		Tab::debuglog("In ".$group->name." max owed is $max_owed and total pool burden is $total_pool_burden.  Thus style is $style");

		return $owed, $style;
	}

	return;

	sub pool_burden { 

		my ($diocese, $pool, $judge_quota) = @_;
		my $pool_burden = POSIX::ceil($judge_quota * $pool->burden * .01);

		my @pool_judges = $m->comp("/funclib/region_judges.mas", region => $diocese, pool => $pool);

		$pool_burden -= scalar @pool_judges;
		$pool_burden = 0 if $pool_burden < 0; 
		return $pool_burden;

	}

	sub max_owed {

		my ($diocese, $group, $judge_quota) = @_;

		my $max_owed = ($judge_quota * 2);

		Tab::PoolJudge->set_sql( pools => "
			select distinct pool_judge.id
			from pool_judge,judge,pool,school
			where pool_judge.judge = judge.id
			and pool_judge.pool = pool.id
			and pool.judge_group = ? 
			and pool_judge.type != \"prelim\"
			and judge.school = school.id
			and school.region = ? 
		");

		my @elim_rounds = Tab::PoolJudge->search_pools($group->id, $diocese->id);
		$max_owed -= scalar @elim_rounds;
		$max_owed = 0 if $max_owed < 0;
		return $max_owed;

	}

</%perl>

