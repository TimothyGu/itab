<%args>
	$school
	$group
	$debug => undef
</%args>
<%init>

	use POSIX;

	# Find out how many judges we're obligated for. 
    my $judge_burden = $m->comp("/funclib/judgemath/judges_needed_by_group.mas",
			group => $group,
			school => $school);

    my @useful_judges =
		$m->comp("/funclib/judgemath/judges_by_group.mas",
			group => $group,
			school => $school);

	my $uncovered = $m->comp("/funclib/judgemath/uncovered_burden_by_group.mas",
			group => $group,
			school => $school);

	$uncovered = ceil($uncovered / $group->setting("judge_per")) if $group->setting("judge_per");

	system "$Tab::logger There are $uncovered missing judges" if $debug;

	my $request = $m->comp("/funclib/school_hires.mas", school => $school, group => $group);

	my $totals = scalar @useful_judges;

	system "$Tab::logger $judge_burden burden" if $debug;
	system "$Tab::logger $totals useful judges" if $debug;

	# Excess establishes how many judges over obligation we are, so if someone has 
	# covered all their judging with extra judges, it won't penalize them 

	my $excess = $totals - $judge_burden; 

	my %bins_under = ();

	foreach my $bin (Tab::StrikeTime->search(judge_group => $group->id) ) {

		my @struck_judges = Tab::Judge->search_by_school_and_bin( $school->id, $group->id, $bin->id );

		my $bin_strikes = scalar @struck_judges; 
		next unless $bin_strikes;

		system "$Tab::logger There are $bin_strikes struck judges for ".$bin->name." in ".$group->name if $debug;
		system "$Tab::logger There are $excess excess judges" if $debug;

		if ($bin_strikes > ($excess + $uncovered) ) { 
			$bins_under{$bin->id} = $bin_strikes - $excess - $uncovered; 
		}

	} #end of foreach bin

	return %bins_under;

</%init>
