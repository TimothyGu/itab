<%args>
	$school
</%args>
<%perl>

	my $tourn = $school->tournament;


	my @events = $tourn->events;

	my @groups = sort {$a->name cmp $b->name} $tourn->groups;

	my %uncovered_by_group = ();
	my %missing_by_group = ();

	my $under;

	foreach my $group (@groups) { 

		my $judge_obligation = $m->comp("/funclib/judge_obligation.mas", 
			league => $tourn->league,
			group => $group,
			school => $school);

		my @entries = $school->group_entries($group);

		my @useful_judges = $m->comp("/funclib/useful_judges.mas",
			group => $group,
			school => $school);

		my @useless_judges = $m->comp("/funclib/useless_judges.mas",
			group => $group,
			school => $school);

		my $uncovered_obligation = $judge_obligation - (scalar @useful_judges) 
			if $group->hired_fee;

		my $uncovered_students = (scalar @entries) - (scalar @useful_judges) * $group->judge_per 
			unless $uncovered_obligation;

		$uncovered_students = 0 if $uncovered_students < 0;

		$uncovered_by_group{$group->id} = $uncovered_students;
		$missing_by_group{$group->id} = $uncovered_obligation;

		my $request = $school->requests_by_group($group);

		my $accepted = $request->accepted if $request;
		my $requested = $request->covers if $request;

		if ($group->judge_per && $group->hired_fee) { 
			$accepted = $accepted / $group->judge_per;
			$requested = $requested / $group->judge_per;
		}


		$under++ if ($accepted < $missing_by_group{$group->id}) && $group->hired_fee;
		$under++ if ($accepted < $uncovered_by_group{$group->id}) &! $group->hired_fee;

	}

	return $under;

</%perl>

