<%args>
	$round_id
</%args>
<%perl>

	# returns a hash with 2 fields; rounds judged so far
	# and rounds scheduled to judge in future
	
	use POSIX;
	use Time::HiRes qw( time );
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $judge_group = $event->judge_group;
	
	my %judge_hash;
	
	my $rd_name=$round->name;

	#count rounds judged already
	
	Tab::Judge->columns(TEMP => qw/judged_already/);		
	Tab::Judge->columns(TEMP => qw/judge_id/);		
	Tab::Judge->set_sql(pull_ballots => "
		select judge.id as judge_id, judge.first, judge.last, ballot.*, count(distinct ballot.panel) as judged_already
		from ballot, judge, panel, round
		where judge.judge_group = $judge_group
		and ballot.judge = judge.id
		and panel.id=ballot.panel
		and round.id=panel.round
		and round.name <= $rd_name 
		group by judge
	");

	my @judges = Tab::Judge->search_pull_ballots;
	
	foreach my $judge (@judges) {
#		print $judge->first." ".$judge->last." id=".$judge->judge_id." judged already:".$judge->judged_already."<br>";
		$judge_hash{$judge->judge_id}{'judged_already'} = $judge->judged_already;
	}
	
	#count rounds yet to come
	Tab::Judge->columns(TEMP => qw/will_judge/);		
	Tab::Judge->columns(TEMP => qw/judge_id/);		
	Tab::Judge->set_sql(pull_ballots => "
		select judge.id as judge_id, judge.first, judge.last, ballot.*, count(distinct ballot.panel) as will_judge
		from ballot, judge, panel, round
		where judge.judge_group = $judge_group
		and ballot.judge = judge.id
		and panel.id=ballot.panel
		and round.id=panel.round
		and round.name > $rd_name 
		group by judge
	");

	undef @judges;
	@judges = Tab::Judge->search_pull_ballots;
	
	foreach my $judge (@judges) {
#		print $judge->first." ".$judge->last." id=".$judge->judge_id." judged already:".$judge->will_judge."<br>";
		$judge_hash{$judge->judge_id}{'will_judge'} = $judge->will_judge;
	}
	
	return \%judge_hash;

</%perl>
