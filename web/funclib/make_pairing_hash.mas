<%args>
	$round_id
</%args>
<%perl>

	# returns 3 basic global hash/arrays; this allows the functions to access
	# the information they need @entries is a global array of all entries in
	# the event; %entries is a hash with record and SOP information in it
	# %precluded stores which teams can't hit each other; 
	
	use POSIX;
	use List::Util 'shuffle';
	use Time::HiRes qw( time );
	
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;
	my $oddround=1;

	if (int($round->name/2) == $round->name/2) { $oddround= 0 };

	#use this round to seed
	my @round_dummy = Tab::Round->search( name=>$round->name-1, event=>$round->event );	

	# print "This round ID:".$round->id." this round
	# name:".$round->name."<br>"; print "round for seeding
	# id:".$round_dummy[0]->id." round for seeding
	# name:".$round_dummy[0]->name."<br>";

	my $round_for_seeding;
	my $panel = 0; 
	my $team1; 
	my $team2; 
	my $side;

	if ( scalar(@round_dummy) > 0 ) {
		$round_for_seeding = Tab::Round->retrieve( $round_dummy[0]->id );
	}

	my $start = time(); 
	my @entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 );

	# create a hash that stores a boolean value indicating whether teams can
	# debate each other, marked false for same school, hit before, etc.
	my %precluded; 

	# CREATE A 2-DIMENSIONAL HASH WITH ALL THE STUFF YOU NEED TO PAIR
	
	#STEP ONE: create hash and put in entry info
	my %entries;
	undef %entries;

	foreach my $entry (@entries) {

		$entries{$entry->id}{'code'} = $entry->code;
		$entries{$entry->id}{'school'} = $entry->school;

		#print $event->setting("school_debates_self")."<br>";	
		if ($event->setting("school_debates_self")) { 
			$entries{$entry->id}{'school'} = $entry->id;
		}

		$entries{$entry->id}{'placement'} = $entry->placement;
		$entries{$entry->id}{'seed'} = $entry->seed;
	}

	#only process if there are results
	if ( $round_for_seeding ) {	

		# STEP TWO: now load the number of wins
		my %winloss;
		%winloss = $m->comp("/funclib/entry_wins.mas", event => $event, round => $round_for_seeding);

		foreach my $key ( keys %entries ) {
			$entries{$key}{'wins'} = $winloss{$key}; 
			if ( not $winloss{$key} ) { $entries{$key}{'wins'} = 0; }
		}

		# Load the number of opp wins and the first tiebreaker for non-SOP pairing; should use seed-nowins for pairing, but next_tb is useful

		my ($points_entries_ref, $points_tbs_ref, @junk) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding);

		foreach my $key (sort {$a <=> $b} keys %{$points_entries_ref}) { 
			foreach my $entry_id (@{${$points_entries_ref}{$key}}) { 
				$entries{$entry_id}{'next_tb'} = ${$points_tbs_ref}{$entry_id."-2"};
			}
		}
	
		my ($oppwins_entries_ref, $oppwins_tbs_ref, @junque) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding, opp_wins_only => "yep");

		foreach my $key (sort {$a <=> $b} keys %{$points_entries_ref}) { 
			foreach my $entry_id (@{${$oppwins_entries_ref}{$key}}) { 
				$entries{$entry_id}{'opp_wins'} = ${$oppwins_tbs_ref}{$entry_id."-1"};
			}
		}

		#STEP THREE: assign the seeds

		if ($round->type ne "prelim") {

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding);

			my $x;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 
				$x++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 
					$entries{$entry_id}{'seed'}=$x;
				}
			}
		}	

		#STEP 3.5: assign the seeds without wins. next_tb will display the next tiebreaker but won't fully re-seed

		if ($round->type ne "prelim") {

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $meh, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", long_names => 1, round => $round_for_seeding, skip_wins=>42);

			my $x;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 
				$x++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) { 
					$entries{$entry_id}{'seed_nowins'}=$x;
				}
			}
		}	

		#STEP FOUR: calculate oppseeds
	
		#Start by pulling all the rounds
		my $rd_name=$round->name;

		Tab::Ballot->set_sql(pull_ballots => "
			select ballot.entry, ballot.panel, ballot.side
			from ballot, panel, round
			where ballot.panel=panel.id
			and panel.round=round.id
			and round.name < $rd_name
			and round.event = $event
			order by round.name
		");

		my @pairings = Tab::Ballot->search_pull_ballots;

		my $end = time();
#		print "load time:  "; printf("%.2f\n", $end - $start); print "<br>";
	
#		print the pairings, just for grins	
#		foreach my $pairing (@pairings) {
# 		print "Panel: ".$pairing->panel." entry:".$pairing->entry." ".$entries{$pairing->entry}{'code'}." side=".$pairing->side."<br>";
#		}
	
		# now loop through each team; this ALSO marks opponents as having debated so they don't hit in the future, and set 
	
		foreach my $pairing (@pairings) {
		
			if ( $panel != $pairing->panel and $panel > 0 ) {
				$entries{$team1}{'n_opp'}++;
				$entries{$team1}{'tot_opp_seed'} += $entries{$team2}{'seed'};
				$entries{$team2}{'n_opp'}++;
				$entries{$team2}{'tot_opp_seed'} += $entries{$team1}{'seed'};
				$precluded{$team1}{$team2} = 1; #mark as ineligible to hit b/c they debated before
			
				$team1 = 0; $team2 = 0;	
					
			}

			if ($team1 == 0 and $team2 == 0) { 
				$team1 = $pairing->entry; 
			} elsif ( $team1 > 0 and $team2 == 0 ) {
				$team2 = $pairing->entry;
			}
	
			$side = 1;

			if ( $pairing->side == 1 ) { 
				$side = 2; 
			}

			$entries{$pairing->entry}{'sidedue'} = $side;

			if ( $oddround == 1 ) { $entries{$pairing->entry}{'sidedue'} = 0; }

			$panel = $pairing->panel;
		}

		#if there's some data detritus for teams paired against dropped opponents it adds them to the %entries hash
		#so this thing cleans it up
	
		foreach my $key ( keys %entries ) {
			if (not $entries{$key}{'code'} ) { 
				delete $entries{$key}; 
			}
		}
	
		foreach my $key ( keys %entries ) {
			if ( $entries{$key}{'n_opp'} > 0 ) {
				$entries{$key}{'oppseed'} = $entries{$key}{'tot_opp_seed'} / $entries{$key}{'n_opp'} ;
				$entries{$key}{'SOP'} = $entries{$key}{'oppseed'} + $entries{$key}{'seed'} ;
			}
			if ( $entries{$key}{'n_opp'} == 0 ) {
				print "Entry with no opponents: ".$entries{$key}{'code'}." ".$entries{$key}{'tot_opp_seed'}." ".$entries{$key}{'n_opp'}."<br>";
			}
		}
	}
	
	# 	CREATE HASH THAT KNOWS WHO CAN DEBATE WHO; hit before constraint added
	# 	above; hash declared at the very top, so we only need school conflicts

	unless ($event->setting('school_debates_self')) {
	for (my $x = 0; $x <= $#entries; $x++) {

		#pull hybrid school conflicts
		my @strikes = Tab::Strike->search( entry=>$entries[$x]->id, type => 'hybrid' );	
		my @same_school = Tab::EventSetting->search( event=>$round->event, tag => 'AllowSameSchoolDebates' );	
		#print scalar(@same_school)."<br>";
				
		for (my $y = $x + 1; $y <= $#entries; $y++) {

			#mark school conflicts
			#unless ($same_school[0]) {
				if ($entries[$x]->school == $entries[$y]->school) { $precluded{$entries[$x]->id}{$entries[$y]->id} = 1; }
			#}
		
			foreach my $hybridconflict (@strikes) {
				if ($hybridconflict->school == $entries[$y]->school) { $precluded{$entries[$x]->id}{$entries[$y]->id} = 1; }
			}
		
		}
	}
	}

	# LOAD CURRENT PAIRINGS AND STORE THEM IN THE HASH

	Tab::Ballot->columns(TEMP => qw/bye/);

	Tab::Ballot->set_sql(current_ballots => "
		select ballot.id, ballot.entry, ballot.panel, ballot.side, panel.bye as bye
		from ballot, panel, round
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.id = $round_id
		order by round.name, panel.id
	");
	
	my @pairings_current = Tab::Ballot->search_current_ballots;

	my $bye;

	my %panel_entries;
	my %entry_panel;
	my @current_entries;
	
	foreach my $pairing (@pairings_current) {

		my $me = $pairing->entry->id;

		push @current_entries, $me;
		$entry_panel{$me} = $pairing->panel->id;

		push @{$panel_entries{$pairing->panel->id}}, $me;

		$entries{$me}{'side'} = $pairing->side;
		$entries{$me}{'opponent'}= -1 if $pairing->bye; 
	}

	foreach my $me (@current_entries) {
		foreach my $other (@{$panel_entries{$entry_panel{$me}}}) { 
			next if $me == $other;
			$entries{$me}{'opponent'}= $other;
		}
	}

	return \%entries, \%precluded ;

</%perl>
