<%args>
	$event_id
</%args>
<%init>
	
	my $event = Tab::Event->retrieve($event_id);
#	I have no idea why this line doesn't work, but it doesn't
#	my $tourn = Tab::Tourn->retrieve($event->tourn);
	my @tourn = Tab::Tourn->search ( id => $event->tourn);
	print $tourn[0]->name;

	my @entries = Tab::Entry->search( event => $event->id, unconfirmed => 0, dropped => 0, waitlist => 0 );
	my $panels_per_rd = int(scalar(@entries)/2);

	#total panels necessary to finish tournament
	my $total_panels=0;
	#total judge rounds necessary to finish tournament
	my $judges_needed=0;
	#total judges currently assigned
	my $judges_assigned=0;
	my $n_prelims=0;
	
	#count number of rounds necessary to complete the tourney		
	#is it paneled?
	#if paneled, count n panels
	#if not paneled, estimate number of judges needed for it
	
	my @rounds = Tab::Round->search( event=>$event->id );	
	foreach my $round (@rounds) {
	
		#is it a prelim?
		if ($round->type ne "elim") {

			$n_prelims++;
						
			#is it paneled ?
			my @panels = Tab::Panel->search( round=>$round->id );

			#if yes, add them to the total panels		

			if ( scalar(@panels) >= ($panels_per_rd * .9 ) ) {
				$total_panels += scalar(@panels);
				$judges_needed += (scalar(@panels) * $round->judges);
			} else {
				#if no, use estimated number of panels
				$total_panels += $panels_per_rd;		
				$judges_needed += ($panels_per_rd * $round->judges);
			}
		
			#now count assigned judges
			foreach my $panel (@panels) {
				my @judges_on_panel = $m->comp("/funclib/panel_judges.mas", panel => $panel);
				$judges_assigned += scalar(@judges_on_panel);
			}
							
		}

	}
	
	print "N prelim rounds: $n_prelims<br>";
	print "Panels per round: $panels_per_rd<br>";
	print "Total prelim panels: $total_panels<br>";
	print "Total judges needed: $judges_needed<br>";
	print "Judges currently assigned: $judges_assigned<br>";
	
	#Count the total number of reamaining judges needed by taking rounds*panels*judge
	#subtract the number of judges assigned in this round or later
		
	my $rounds_needed;
	my $rounds_needed_alldebate;

#	my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $round->id);			
#	my %used_by_judgeid = %{$judge_hash};
#	my $totbal;
#	foreach my $key ( keys %used_by_judgeid) {
#		$totbal += $used_by_judgeid{$key}{'oblig'}-$used_by_judgeid{$key}{'judged_already'}-$used_by_judgeid{$key}{'will_judge'};
#	}

	#count number of available rounds of judging left
	my $rounds_available;
	my $rounds_available_alldebate;


</%init>
