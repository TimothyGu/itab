<%args>
	$event_id
	$current_rd_id => undef
</%args>
<%init>

	unless ($current_rd_id) { return; }
	
#processing time runs 1 second; should try to improve it
	
	use Time::HiRes qw( time );
	my $start = time(); 	

	my $event = Tab::Event->retrieve($event_id);
	my $judge_group = $event->judge_group;
	my $current_rd = Tab::Round->retrieve($current_rd_id);

#THIS FIGURES OUT HOW MANY MORE ROUNDS OF JUDGING YOU NEED
	
#	I have no idea why this line doesn't work, but it doesn't
#	my $tourn = Tab::Tourn->retrieve( $event->tourn );
	my @tourn = Tab::Tourn->search ( id => $event->tourn);
#	print $tourn[0]->name;

	my @entries = Tab::Entry->search( event => $event->id, unconfirmed => 0, dropped => 0, waitlist => 0 );
	my $panels_per_rd = int(scalar(@entries)/2);
	
	#total panels necessary to finish tournament
	my $total_panels=0;
	#total judge rounds necessary to finish tournament
	my $judges_needed=0;
	#total judges currently assigned
	my $n_prelims=0;
	
	my $paired_panels_past=0;
	my $assigned_judges_past=0;
	my $needed_panels_past=0;
	my $needed_judges_past=0;	
	my $paired_panels_current=0;
	my $assigned_judges_current=0;
	my $needed_panels_current=0;
	my $needed_judges_current=0;	
	my $paired_panels_future=0;
	my $assigned_judges_future=0;
	my $needed_panels_future=0;
	my $needed_judges_future=0;	
	my $judges_assigned=0;
	
	my %judge_info;
	my $dummy=$event->id;
	
	my @rounds = Tab::Round->search ( event => $event->id );	
	
	foreach my $round (@rounds) {
	
		#is it a prelim?
		if ($round->type ne "elim") {

			$n_prelims++;
						
			#is it paneled ?
			my @panels = Tab::Panel->search( round=>$round->id, bye=>0 );

			#count assigned judges for current round
			$judges_assigned=0;
			foreach my $panel (@panels) {
				my @judges_on_panel = $m->comp("/funclib/panel_judges.mas", panel => $panel);
				foreach my $judge (@judges_on_panel) {
					if ( $panel->round == $current_rd_id ) { $judge_info{$judge->id}{'judging_now'} = 1; }
					$judges_assigned ++;
				}
			}

			#add up assigned judges

			if ( $round->name < $current_rd->name ) {
				$assigned_judges_past += $judges_assigned;
			} elsif ( $round->name == $current_rd->name ) {
				$assigned_judges_current += $judges_assigned;
			} else {
				$assigned_judges_future += $judges_assigned;
			}

			#count rounds actually scheduled

			if ( $round->name < $current_rd->name ) {
				$paired_panels_past += scalar(@panels);
			} elsif ( $round->name == $current_rd->name ) {
				$paired_panels_current = scalar(@panels);
			} else {
				$paired_panels_future += scalar(@panels);
			}
				
			#count rounds will need
							
			if ( scalar(@panels) < $panels_per_rd ) {
				if ( $round->name < $current_rd->name ) {
					$needed_panels_past += $panels_per_rd - scalar(@panels);
				} elsif ( $round->name == $current_rd->name ) {
					$needed_panels_current = $panels_per_rd - scalar(@panels);
				} else {
					$needed_panels_future += $panels_per_rd - scalar(@panels);
				}
			}
		
			#add up needed judges
			if ( $round->name < $current_rd->name ) {
				$needed_judges_past += ( scalar(@panels) * $round->judges ) - $judges_assigned;				
			} elsif ( $round->name == $current_rd->name ) {
				$needed_judges_current += (($paired_panels_current + $needed_panels_current) * $round->judges) - $judges_assigned;
			} else {

#				print "paired_panels_future = ". $paired_panels_future;
#				print "needed_panels_future = ". $needed_panels_future;
#				print "judges per rd = ". $round->judges;
#				print "judges assigned = ". $judges_assigned."<br>";

#				print " ".( ( $paired_panels_future + $needed_panels_future ) * $round->judges ) - $assigned_judges_future."<BR>";				
				
				$needed_judges_future = (($paired_panels_future + $needed_panels_future) * $round->judges) - $judges_assigned;
			}
										
		}

	}
	
#	print "<br>N prelim rounds: $n_prelims<br>";
#	print "N entries:".scalar(@entries)."<br>";
#	print "Panels per round: $panels_per_rd<br>";
#	print "Total prelim panels: $total_panels<br>";
#	print "judges needed future: $needed_judges_future<br>";
#	print "Judges currently assigned: $judges_assigned<br>";
#	print "Balance:".($judges_needed-$judges_assigned)."<br>";
	
		
#THIS FIGURES OUT HOW MANY MORE ROUNDS OF JUDGING ARE STILL AVAILABLE

	my $judge_hash = $m->comp("/funclib/judge_use.mas", round_id => $current_rd_id);			
	my %used = %{$judge_hash};
	my $judge_oblig_left = 0;
	my $event_rds_left = 0; #total rounds of available judging left for future rounds
	my $fut_avail = 0;
	my $commit_left = 0;		
	my $burned_total = 0;
	my $burned_current = 0;
	my $lost_rounds_total=0;
	my $lost_rounds_current=0;
	
	#Pull judges eligible for this division

	Tab::Judge->set_sql(pull_ballots => "
		select judge.id, judge.first, judge.last
		from judge
		where judge.judge_group = $judge_group
		and not exists(
		select strike.id from strike
		where strike.judge = judge.id 	
		and strike.event = $event_id
		and strike.type = \"event\" )
	");	

	my @judges = Tab::Judge->search_pull_ballots;
			
	foreach my $judge (@judges) {
		$fut_avail = $used{$judge}{'future_possible'} - $used{$judge}{'will_judge'};
		$commit_left = $used{$judge}{'oblig'}-$used{$judge}{'judged_already'}-$used{$judge}{'will_judge'};
		if ( $commit_left > $fut_avail ) { $commit_left = $fut_avail; }
		if ( $commit_left < 0 ) { $commit_left = 0; }
		if ($ commit_left == 0 ) { $burned_total++; }
		if ($ commit_left == 0 and $judge_info{$judge}{'judging_now'} == 1 ) { $burned_current++; }
		$event_rds_left += $commit_left;
		if ( $judge_info{$judge}{'judging_now'} == 0 and $used{$judge}{'lost'} > 0) { $lost_rounds_current += 1; }
		$lost_rounds_total += $used{$judge}{'lost'};
		
#		print "Oblig:".$used{$judge}{'oblig'};
#		print "Used:".$used{$judge}{'judged_already'};
#		print "Will Judge:".$used{$judge}{'will_judge'};
#		print "Fut avail:".$used{$judge}{'future_possible'};
#		print "Lost:".$used{$judge}{'lost'};
#		print "commit left:".$commit_left;
#		print "tourn left:".$event_rds_left."<br>";		
	}


	return $paired_panels_past, $assigned_judges_past, $needed_panels_past, $needed_judges_past, $paired_panels_current, $assigned_judges_current, $needed_panels_current, $needed_judges_current, $paired_panels_future, $assigned_judges_future, $needed_panels_future, $needed_judges_future, $burned_current, $burned_total, $lost_rounds_current, $lost_rounds_total, $event_rds_left;

	my $end = time();
	print "<br>processing time: ";
	printf("%.2f\n", $end - $start);

</%init>
