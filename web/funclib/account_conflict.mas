<%args>
	$tourn
	$account
</%args>
<%init>

	Tab::Entry->set_sql( for_moi => "
		select distinct entry.*
		from event, entry, entry_student, student
		where event.tourn = ? 
		and entry.event = event.id
		and entry_student.entry = entry.id
		and entry_student.student = student.id
		and student.account = ? 
	");

	Tab::Judge->set_sql( for_moi => "
		select distinct judge.* 
		from judge_group, judge
		where judge_group.tourn = ?
		and judge_group.id = judge.judge_group
		and judge.account = ?
	");

	my @entries =  Tab::Entry->search_for_moi( $tourn->id, $account->id );
	my @judges = Tab::Judge->search_for_moi( $tourn->id, $account->id );

	return unless @entries || @judges;

	Tab::School->set_sql( conflicteds => "
		select distinct school.*
		from school, account_conflict
		where school.tourn = ? 
		and school.chapter = account_conflict.chapter
		and account_conflict.account = ? 
		and account_conflict.account > 0
	");

	foreach my $school (Tab::School->search_conflicteds($tourn->id, $account->id)) { 

		my $registrant++ if $school->entered_by == $account->id;

		foreach my $judge (@judges) { 

			Tab::Strike->create({ 
				tourn => $tourn->id,
				judge => $judge->id,
				type => "school",
				school => $school->id,
				registrant => 1
			});

		}

	}

	foreach my $judge (@judges) { 

		Tab::Entry->set_sql( conflicteds => "
			select distinct entry.id
			from event, entry, entry_student, student, account_conflict
			where event.tourn = ?
			and event.id = entry.event
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and student.account != 0
			and student.account = account_conflict.conflict
			and account_conflict.account != 0
			and account_conflict.conflict != 0
			and account_conflict.account = ? 
		");

		Tab::Entry->set_sql( conflictees => "
			select distinct entry.id
			from event, entry, entry_student, student, account_conflict
			where event.tourn = ?
			and event.id = entry.event
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and student.account != 0
			and student.account = account_conflict.account
			and account_conflict.account != 0
			and account_conflict.conflict != 0
			and account_conflict.conflict = ? 
		");

		foreach my $entry (Tab::Entry->search_conflicteds( $tourn->id, $account->id ), Tab::Entry->search_conflictees( $tourn->id, $account->id ) ) { 

			Tab::Strike->create({ 
				tourn => $tourn->id,
				type => "conflict",
				entry => $entry->id,
				judge => $judge->id,
				registrant => 1
			});

		}

	}

	foreach my $entry (@entries) { 

		Tab::Judge->set_sql( conflicteds => "
			select distinct judge.id
			from judge_group, judge, account_conflict
			where judge_group.tourn = ? 
			and judge_group.id = judge.judge_group
			and judge.account = account_conflict.conflict
			and judge.account != 0
			and account_conflict.conflict != 0
			and account_conflict.account = ? 
		");

		Tab::Judge->set_sql( conflictees => "
			select distinct judge.id
			from judge_group, judge, account_conflict
			where judge_group.tourn = ? 
			and judge_group.id = judge.judge_group
			and judge.account = account_conflict.account
			and judge.account != 0
			and account_conflict.conflict != 0
			and account_conflict.conflict = ? 
		");

		foreach my $judge ( Tab::Judge->search_conflicteds( $tourn->id, $account->id), Tab::Judge->search_conflictees( $tourn->id, $account->id)) { 

			Tab::Strike->create({
				tourn => $tourn->id,
				type => "conflict",
				entry => $entry->id,
				judge => $judge->id,
				registrant => 1
			});

		}


	}

	return;

</%init>
