<%args>
	$tourn_id
	$chapter_id
	$account
	$session
</%args>
<%init>

	my $tourn = Tab::Tournament->retrieve($tourn_id);

	unless ($tourn && $tourn->method) { 

		my $msg = "This tournament has not yet been set up for registration.  Please come back later";
		$m->redirect("/user/home.mhtml?msg=$msg");
	}

	my $chapter = Tab::Chapter->retrieve($chapter_id);

	$m->comp("/user/chapter/auth.mas", chapter => $chapter, account => $account, session => $session);

	my $existing_school = $chapter->school($tourn);

	if ($existing_school) {

		$m->redirect("/user/tourn/entry/entry.mhtml?school_id=".$existing_school->id);

	}

	my $now = DateTime->now();

	$m->abort if $tourn->reg_start > $now;
	$m->abort if $tourn->reg_end < $now;

	my @cls = Tab::ChapterCircuit->search( circuit => $tourn->circuit->id, chapter => $chapter->id );

	my $err = "You must be a member of the ".$tourn->circuit->name." to register." unless @cls;
	$m->redirect("/user/home.mhtml?err=$err") unless @cls;

	my $cl = shift @cls;

	if ($tourn->method->must_pay_dues && $tourn->circuit->memberships) { 
		my $err = "Your circuit dues must be current and paid to register for ".$tourn->name unless $cl->paid;
		$m->redirect("/user/chapter/chapter_circuit.mhtml?chapter_id=".$chapter_id."&circuit_id=".$cl->circuit->id."&err=$err") unless $cl->paid;
	}

	my $school_code;

	if ($tourn->method->incremental_school_codes) {

		my $highest_code = Tab::School->sql_highest_code->select_val($tourn->id);
		$highest_code++ if $highest_code;
		$highest_code = $tourn->method->first_school_code unless $highest_code;
		$school_code = $highest_code;

	} else {

		$school_code = $cl->code;
		$school_code = 0 unless $school_code;

	}

	my $school = Tab::School->create({
		chapter => $chapter->id,
		name => $chapter->name,
		tournament => $tourn->id,
		entered => $now,
		code => $school_code
	});

	$school->region($cl->region->id) if $cl->region;

	if ($tourn->method->track_reg_changes) {

		my $regline = "School registered by ".$account->first." ".$account->last;

		my $change = Tab::Change->create({
			tournament => $tourn->id,
			school => $school->id,
			type => "registration",
			regline => $regline
		});

	}

	foreach my $fine ($tourn->fines) {

		next unless $fine->amount > 0;

		next if $fine->school && $fine->school->id;
		next if $fine->start && $fine->start > $now;
		next if $fine->end && $fine->end < $now;

		my $school_fine = $fine->copy;

		$school_fine->school($school->id);
		$school_fine->tournament();
		$school_fine->update;

	}

	$m->redirect("/user/tourn/disclaimer.mhtml?school_id=".$school->id) if $tourn->disclaimer;

	$m->redirect("/user/tourn/entry/entry.mhtml?school_id=".$school->id);

</%init>
