<%args>
	$comp_id
	$group_id
</%args>
<%init>

	my $now = DateTime->now();
	my $err;

	my $comp = Tab::Entry->retrieve($comp_id);
	my $group = Tab::JudgeGroup->retrieve($group_id);

	Tab::Entry->set_sql(wipe_prefs => " delete from rating where entry = ?");
	Tab::Entry->sql_wipe_prefs->execute($comp->id);

    my @rating_tiers = Tab::RatingTier->search(  judge_group => $group->id, type => "mpj" );

	my @conflicts = $comp->conflicts; 
	my %conflicts_by_id = ();
	foreach (@conflicts) { $conflicts_by_id{$_->judge->id} = $_; }

    my @judges;
	my @all_judges = Tab::Judge->search_where({ active => 1, judge_group => $group->id });

    foreach my $judge (@all_judges) {
        next if $judge->school->id == $comp->school->id;
        next if $conflicts_by_id{$judge->id};
        push (@judges, $judge);
    }

	my $judge_pool = scalar @judges;

    my %rating_limit = ();
	foreach my $tier (@rating_tiers) {
        $rating_limit{$rating->id} = ($judge_pool * $rating->max / 100);
    }

	my %judges_at_tier = ();

		JUDGE:
		foreach my $judge (@judges) { 

			next unless $ARGS{$judge->id};

			if ($judges_at_tier{$ARGS{$judge->id}} >= $tier_limit{$ARGS{$judge->id}}) {

				my $tier = Tab::RatingTier->retrieve($ARGS{$judge->id});
				$err = "You had too many judges rated ".$tier->name." <br/>" unless $err;
				$err .= " - ".$judge->first." ".$judge->last." not rated <br />\n";
				next JUDGE;

			}

			$judges_at_tier{$ARGS{$judge->id}}++;

			Tab::Rating->create({
				type => "comp",
				tournament => $group->tournament->id,
				judge => $judge->id,
				comp => $comp->id,
				tier => $ARGS{$judge->id},
				entered => $now
			});

		}	

	my $msg = $comp->team_name."'s ratings saved in ".$group->abbr;

	$m->redirect("/user/tourn/entry/ratings/comp_ratings.mhtml?school_id=".$comp->school->id."&comp_id=".$comp_id."&group_id=".$group->id."&style=comp_ratings&msg=".$msg."&err=".$err);

</%init>
