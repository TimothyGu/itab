<%args>
	$account
	$entry_id
</%args>
<%init>

	my $now = DateTime->now;

	my $entry = Tab::Entry->retrieve($entry_id);

	my $school = $entry->school;
	my $event = $entry->event;
	my $tourn = $event->tourn;

	my $min = $event->setting("min_entry");
	my $max = $event->setting("max_entry");
	my $codes = $event->setting("code_style");

	my $err;
	my %used_student = ();
	my @students;

	foreach my $step (1 .. $max) { 

		my $student = Tab::Student->retrieve($ARGS{"student_".$step}) if $ARGS{"student_".$step};
		next unless $student;
		next if $used_student{$student->id};
		$used_student{$student->id}++;
		push (@students, $student);

		Tab::EntryStudent->create({  entry => $entry->id, student => $student->id });

	}
	
	if ($event->setting("ask_for_titles")) {
		$err = "Enter a piece title (and/or ISBN number)" unless $entry->title;
	}

	if ($tourn->setting('ask_quals') ) {
		$err .= "Please provide qualifying tournament information";
	}

	$err .= "You don't have the minimum students to fill this entry." if scalar @students < $min;

	my $name = $students[0]->first." ".$students[0]->last if scalar @students == 1;
	$name = $students[0]->last." & ".$students[1]->last if scalar @students == 2;

	unless ($name) {

		$name = $school->short_name." ";
		foreach my $student (@students) { 
			$name.= ucfirst substr($student->last, 0, 1);
		}
	}

	$entry->name($name);

	my $code;

    if ($codes eq "numbers") { 

        $code = $m->comp("/funclib/event_code.mas", event => $event);

    } elsif ($codes eq "school_number") { 

        $code = $school->code." ".$m->comp("/funclib/event_code.mas", event => $event);

	} else { 

		my $school_code = $school->code;
		$school_code = $m->comp("/funclib/school_codename.mas", school => $school) unless $code;
		$school_code = $m->comp("/funclib/school_codename.mas", school => $school) if $tourn->setting('school_codes') eq "incremental";
		$school_code.= " ";

		my $initials;

		if (scalar @students == 1) { 
			$initials .= ucfirst substr($students[0]->first, 0, 1). ucfirst substr($students[0]->last, 0, 1);
		} else {
			foreach my $student (@students) {
				$initials .= ucfirst substr ($student->last, 0, 1);
			}
		}
		
		my $other = Tab::Entry->search_where({ code => $school_code.$initials, school => $school->id, 
												event => $event->id, id => {'!=', $entry->id}	})->first;

		my $counter;

		while ($other) {
			$counter++;	
			undef $other;
			$other = Tab::Entry->search_where({ code => $school_code.$initials.$counter, school => $school->id, 
													event => $event->id, id => {'!=', $entry->id}	})->first;
		}

		$err .= "Code $initials already existed. You can choose another or keep $school_code$initials$counter as the code" if $counter;
		$code = $school_code.$initials.$counter;

	}

	$entry->code($code);
	$entry->tba("");
	$entry->update;

	my $msg = "Entry ".$entry->name." assigned to a TBA slot";

	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&err=$err") if $err;
	$m->redirect("students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");

</%init>

