<%args>
	$entry_id
	$school_id
	$housed
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);
	$m->abort unless $entry;

	my $event = $entry->event;
	my $tourn = $event->tourn;
	my $school = Tab::School->retrieve($school_id);

	my @student_ids = split(/-/, $housed);

	my $msg;

	foreach my $student_id (@student_ids) { 

		my $student = Tab::Student->retrieve($student_id);
		next unless $student;

		my @housings = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn);

		foreach my $housing (@housings) { 

			my $night = $housing->night;
			my $args = $ARGS{$housing->id};

			my ($type, $id) = split(/-/, $args);

			if (not defined $type) { 

				$housing->delete;
				$msg .= "Housing slot deleted <br />";

			} elsif ($type eq "judge") { 

				my $judge = Tab::Judge->retrieve($id);
				my @already_housed = $m->comp("/funclib/judge_housing.mas", judge => $judge, tourn => $tourn, night => $night);

				foreach my $ah (@already_housed) { 
					if ($ah) { 
						$ah->delete;
						$msg .= "Waitlisted slot deleted from judge ".$judge->last." <br />";
					}
				}

				$housing->type("judge");
				$housing->judge($id);

				$msg .= "Housing slot transferred to ".$judge->last." <br />";
				$housing->update;

			} else { 

				my $student = Tab::Student->retrieve($id);

				my @already_housed = $m->comp("/funclib/student_housing.mas", student => $student, tourn => $tourn, night => $night);

				foreach my $ah (@already_housed) { 
					if ($ah) { 
						$ah->delete if $ah;
						$msg .= "Waitlisted slot deleted from student ".$student->last." <br />";
					}
				}

				$housing->type("student");
				$housing->student($id);
			
				$msg .= "Housing slot transferred to ".$student->last." <br />";
				$housing->update;

			}

		}

	}

	$m->redirect("/user/enter/students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");

</%init>

