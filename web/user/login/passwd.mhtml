<%args>
	$oldpass => undef
	$username
	$newpass
	$repeatpass
	$account
	$login_id 
</%args>
<%init>

	$m->abort unless $account;
	my $login = Tab::Login->retrieve($login_id);

	unless ($account->id == $login->person->id) {
		sleep 5;
		$m->print("<h1>I call shenanigans</h1>");
		$m->abort;
	}


	if ($username != $login->username) { 

		my @others =  Tab::Login->search( username => $username);

		if (@others) { 
			my $err = "The username $username is already in use by another user.  Choose another.";
			$m->redirect("/user/login/profile.mhtml?err=$err");
		}

	}

	use Crypt::PasswdMD5;
	my $new_salt = $m->comp("/funclib/generate_randomstring.mas");

	my $err = "The two passwords you listed did not match" unless $newpass eq $repeatpass;

    my $db_password = $login->password;  #This gets the salt from the MD5 combined password hash

	if ($db_password) { 
		my $verify_password = unix_md5_crypt($oldpass,$db_password);
		$err = "Old password was not correct" unless $db_password eq $verify_password;
	}

	if ($err) { 
		$m->redirect("/user/login/profile.mhtml?err=$err");
	}

	my $now = DateTime->now;

	my $password = unix_md5_crypt($newpass,$new_salt);
	$login->pass_timestamp($now);
	$login->pass_changekey("");
	$login->password($password);
	$login->update;

	Tab::log("PASSWORD CHANGE: Login ID ".$login->id." (".$login->username.") for ".$account->id." ".$account->first." ".$account->last." password was changed from IP address ".$ENV{REMOTE_ADDR});
	
	$m->comp("/funclib/ldap_account.mas", login => $login, ad_password => $newpass);

	my $msg = "Your password has been changed";

	$m->redirect("/user/login/profile.mhtml?msg=$msg");

</%init>


