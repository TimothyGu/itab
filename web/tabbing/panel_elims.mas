<%args>
	$circuit
	$tourn
	$basis
	$type
	$numpanels
	$max
	$min
	$timeslot_id
	$site_id
	$event_id
	$label => undef
	$display => undef
	$debug => undef
</%args>
<%init>

	my $now = DateTime->now;

	# First, get the event we're going to be dealing with
	my $event = Tab::Event->retrieve($event_id);

	my $timeslot = Tab::Timeslot->retrieve($timeslot_id);

	my $points++ if $tourn->method->tiebreaks(tiebreaker => "points");

	#Tell me who breaks.

	my @comps_in_order = $m->comp(
			"/results/order_comps.mas", 
			tourn => $tourn, 
			basis => $basis, 
			event => $event);

	my @breaks = @comps_in_order[($min - 1) .. ($max - 1)];

	unless (@breaks) {
		
		$m->print("<p>Error: no one broke!<p>");
		$m->abort;

	}

	my %kids_who_broke = ();
	
	if ($basis eq "prelim" && $tourn->method->mfl_flex_finals == 1) { 

		# Break $n + 1 if there's a tie on ranks, unless there's a tie on
		# ranks with 8, if we're following this rule

		my $in = $comps_in_order[($max - 1)]; 			# Last kid to break
		my $out = $comps_in_order[$max];   				# First kid not to break
		my $really_out = $comps_in_order[ ($max +1) ]; 	# 2nd kid not to break

		# If just-in and just-out are tied on ranks, but not the next folk, break
		# senor just-out.

		if ($in && $out && $really_out) { 

			if ( ($in->prelim_cume == $out->prelim_cume) && 
				($out->prelim_cume != $really_out->prelim_cume) ) { 
				push (@breaks, $out);
			}

			# If just-in and just-out are unbreakably tied, then in they both go.

			if ($in->tb0 == $out->tb0 &&
				$in->tb1 == $out->tb1 &&
				$in->tb2 == $out->tb2 &&
				$in->tb3 == $out->tb3 &&
				$in->tb4 == $out->tb4 &&
				$in->tb5 == $out->tb5 &&
				$in->tb6 == $out->tb6 &&
				$in->tb7 == $out->tb7 &&
				$in->tb8 == $out->tb8 &&
				$in->tb9 == $out->tb9 ) { 
			
					push (@breaks, $out);
		
			}
		}
	}

	#	Now put the suckers into panels.  Suckers!

	my $round;

	if ($type ne "final" && $type ne "elim") { 

		# If we're dealing with a preset round, simply retrieve that. 
		$round = Tab::Round->retrieve($ARGS{"type"});
		$type = $round->type;

	} else { 

		my $next_round = $event->last_non_preset + 1;
	
		$round = Tab::Round->create({ 
			name => $next_round,
			label => $label,
			event => $event->id,
			timeslot => $timeslot->id,
			site => $site_id,
			type => $type,
			created => $now,
			preset => 0
		});
	}

	my @preset_panels = $round->panels;

	#Make an exception for a final because it's 1) common and 2) easy.

	if ($numpanels == 1) { 

		my $panel = shift @preset_panels;

		$panel = Tab::Panel->create({
			event => $event->id,
			letter => "A",
			round => $round->id,
			type => $type
		}) unless $panel && $panel->id;

		my @judges = $panel->judges;
	
		system "$Tab::logger I have ".scalar @judges." judges here for panel ".$panel->letter if $debug;
			
		my @ballots = $panel->ballots;

		foreach my $judge (@judges) {
		
			#Clear any pre-existing ballots the judge may have, which are empty
			#placeholders

			foreach ($round->empties) { $_->delete; }

			foreach my $break (@breaks) { 
			
				my $ballot = Tab::Ballot->create({ 
					panel => $panel->id,
					judge => $judge->id,
					comp => $break->id,
					speechnumber => 1,
					speakerorder => 0
				});

				$kids_who_broke{$break->id}++;
				
			}
		}

		unless (@judges) { 
			
			foreach my $break (@breaks) { 
				my $ballot = Tab::Ballot->create({ 
					panel => $panel->id,
					speakerorder => 0,
					speechnumber => 1,
					comp => $break->id
				});

				$kids_who_broke{$break->id}++;
				
			}
		}

		$round->preset(0);
		$round->created($now);
		$round->update;	

		$m->comp( "/panel/speaker_order_cfl_elims.mas", round_id => $round->id);

	
		} else {  #end of if numpanels == 1

		# This is the hard one.  Pfaugh.   Therefore we break it into modules since the
		# methods differ and I have enough Big Honking Code Files already

			if ($tourn->method->elim_method eq "snake") {
				$m->comp(
					"elim_panel_snake.mas", 
					breaks => \@breaks, 
					event => $event, 
					type => $type, 
					round => $round, 
					numpanels => $numpanels
				);
			}

			if ($tourn->method->elim_method eq "cfl") {
				$m->comp(
					"cfl_snake.mas", 
					breaks => \@breaks, 
					event => $event, 
					type => $type, 
					basis => $basis, 
					round => $round, 
					numpanels => $numpanels
				);

				$m->comp( "/panel/speaker_order_cfl_elims.mas", round_id => $round->id);
			}

			if ($tourn->method->elim_method eq "snake_school") {
				$m->comp(
					"elim_panel_snake_school.mas", 
					breaks => \@breaks, 
					event => $event, 
					type => $type, 
					round => $round, 
					numpanels => $numpanels
				);
			}

			if ($tourn->method->elim_method eq "snake_school_force") {
				$m->comp(
					"elim_panel_snake_school_force.mas", 
					breaks => \@breaks, 
					event => $event, 
					type => $type, 
					round => $round, 
					numpanels => $numpanels
				);
			}

			foreach my $break (@breaks) { 
				$kids_who_broke{$break->id}++;
			}

		} # end of if numpanels != 1

</%init>

%	if ($display) { 

		<table cellpadding="0" width="100%">
		<tr>
			<td width="100%">
			<h3><% $event->name %></h3>
			</td>

			<td>
				<form action="<% $Tab::url_prefix %>/panel/schemat_show.mhtml" method="post">
				<input type="hidden" name="round_id" value="<% $round->id %>">
				<input type="hidden" name="event_id" value="<% $event->id %>">
				<input type="submit" value="Go to Schematic">
				</form>
			</td>
		</tr>
		</table>

		<table cellpadding="2" cellspacing="1" width="100%">

		<tr class="bluerow">
			<th></th>
			<th>Code</th>

<%perl>
			my %tier_jp = ();
			my @tiebreakers = sort {$a->priority <=> $b->priority} $tourn->method->tiebreaks(covers => $basis);
			my $num_tbs = scalar @tiebreakers;

			if ($basis ne "prelim") {
				$m->print("<th>Rnd</th>");
				$num_tbs++;
			}

			if ($tourn->method->noshows_never_break == 1) {
				$m->print("<th class=\"smaller\">NoSho</th>");
			}

	   		foreach my $tiebreaker (@tiebreakers) { 
    	   		my $name = $tiebreaker->tiebreaker;
    	   		$name = "Cume" if $name eq "cumulative";
    	   		$name = "Recips" if $name eq "reciprocals";
    	   		$name = "Round <br />Rank" if $name eq "roundrank";
    	   		$name = "JP" if $name eq "judgepref";
				$name = "Sorter" if $name eq "panelletter";
</%perl>
        		<th class="smaller" style="text-align: center;">
					<% ucfirst($name) %>
				</th>
%   		}

		    <th>Scores</th>
			<th></th>
			<th>Ties:</th>
		</tr>

<%perl>

		my $count = 1;
		my $switch;
		my $tie_rank;
		my $last_comp;

		my $perfectly_screwed;
		my $nonbreaks;

		my $breaking_round;

		COMP:
		foreach my $comp (@comps_in_order) { 

			if ($basis ne "prelim") {
				$breaking_round = $comp->tb0 unless $breaking_round;
				next COMP unless $breaking_round == $comp->tb0;
			}

			# Get ties			
			my @ties = Tab::Comp->search_ties($comp->id);

			# Check to see if this is the break boundary
			if ($last_comp && ($kids_who_broke{$last_comp->id} &! $kids_who_broke{$comp->id})) {

				# If it is, set the "we're screwed" bit if this competitor is
				# in a perfect tie with the last kid into the break.
				foreach my $tie (@ties) {
					$perfectly_screwed++ if $tie->id == $last_comp->id;
				}
</%perl>

%				# Draw the border:
%				if ($perfectly_screwed) { 
				
					<tr class="redrow">
						<th colspan="30" style="font-size: 16pt; color: red; font-weight: bold; text-align: center;">
						<a name="tied">
						WELL, DAGNABIT. THERE IS AN UNBREAKABLE TIE RIGHT AT THE ELIM CUTOFF.  COPE WITH THIS SOMEHOW, PLEASE.
						</th>
					</tr>

%				} else {

					<tr class="bluerow">
					<th colspan="30" style="text-align: center;">Above this line, the kids break.  Below, they do not.  Life is capricious, and cruel.</th>
					</tr>
%				}

%			} #end of if this is the boundary

%           my $block = "greyblock" unless $switch % 2;
%           $block = "whiteblock" if $switch % 2;


%			if (@ties) { 
				<tr <% ($switch++ % 2) ? "class=\"redrow\"" : "class=\"lirdrow\"" %>>
%				$block = "whiteblock";
%			} else {
				<tr <% ($switch++ % 2) ? "class=\"oddrow\"" : "class=\"evenrow\"" %>>
%			}

%			if (@ties) {
				<% ($kids_who_broke{$comp->id}) ? "<th class=\"smaller\">TIE: ".$count."*</th>" : "<td class=\"smaller\">TIE: ".$count."</td>" %>
%			} else { 
				<% ($kids_who_broke{$comp->id}) ? "<th>".$count."*</th>" : "<td>".$count."</td>" %>
%			}

			<td class="smaller" align="center">
				<a class="<% $block %>" href="<% $Tab::url_prefix%>/register/comp_edit.mhtml?comp_id=<%$comp->id%>"><% $comp->code %></a>
			</td>

%			unless ($basis eq "prelim") {
				<td class="smaller" align="center">
					<% $comp->tb0 %>
				</td>
%			}

%			if ($basis eq "prelim" && $tourn->method->noshows_never_break) {
				<td class="smaller" align="center">
					<% $comp->tb0 %>
				</td>
%			}

%			my $index = $num_tbs;

%			foreach my $tb (1 .. $index) { 
%				my $tb_key = "tb".$tb;
%				my $result = sprintf("%.02f", $comp->$tb_key);
%				$result =~ s/\.00//g;
				<td class="smaller" align="center">
					<a class="whiteblock" href="comp_card.mhtml?comp_id=<% $comp->id %>">
						<% ($result != 0) ? $result : "" %>
					</a>
				</td>
%			}

			<td class="smaller" align="center">

				<table cellpadding="0" cellspacing="1">

					<tr>

%						foreach my $panel (sort {$a->round->name <=> $b->round->name} $comp->panels) { 

%							my @ballots = sort {$a->judge->id <=> $b->judge->id} $comp->ballots( panel => $panel->id, audit => 1 );
%							next unless @ballots;

							<td style="padding-left: 6px; padding-right: 6px;" align="center">

								<a class="whiteblock" href="panel_card.mhtml?panel_id=<% $panel->id %>">

%									foreach my $ballot (@ballots) {

%										next unless $ballot->real_rank;

										<% $ballot->real_rank %>
										<% ($points && $ballot->points) ? $ballot->real_points : "" %>
%									}

								</a>

							</td>

%						}

					</tr>

				</table>

			</td>

%			if ($kids_who_broke{$comp->id}) { 

				<td align="center" class="smaller">
					<a class="<% $block %>" href="<% $Tab::url_prefix %>/panel/comp_remove_from_round.mhtml?comp_id=<% $comp->id %>&round_id=<% $round->id%>">
						Unbreak
					</a>
				</td>

%			} else { 

				<td align="center" class="smaller">
					<a class="<% $block %>" href="<% $Tab::url_prefix %>/panel/comp_edit.mhtml?comp_id=<% $comp->id %>&round_id=<% $round->id%>">
						Add to break
					</a>
				</td>
%			}

			<td class="smaller">
%				if (@ties) {
%					foreach my $tie (@ties) {
						<% $tie->code %>
%					}
%				}
			</td>

		</tr>
%		$count++;
%		$last_comp = $comp;

%		}
		
	</table>

%	} #end of if display

