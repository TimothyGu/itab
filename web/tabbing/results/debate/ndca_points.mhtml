<%args> 
	$tourn
	$event_id => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);

	$m->abort unless $event;
	$m->abort unless $event->tourn->id == $tourn->id;

	Tab::School->set_sql(state_count => "
		select count(distinct chapter.state)
		from chapter, school, entry
		where entry.event = ? 
		and entry.school = school.id
		and school.chapter = chapter.id
	");

	my $num_states = Tab::School->sql_state_count->select_val($event_id);

	my $state_mult = 1;

	$state_mult = 1.2 if $num_states > 2;
	$state_mult = 1.4 if $num_states > 5;
	$state_mult = 1.6 if $num_states > 8;
	$state_mult = 1.8 if $num_states > 12;
	$state_mult = 2.0 if $num_states > 15;

	my @entries = $event->entries( waitlist => 0, dropped => 0, unconfirmed => 0 );

	my $num_entries = scalar @entries;
	$num_entries = 100 if $num_entries > 100;

	my @rounds = sort {$b->name <=> $a->name} $event->rounds;

	my $final;

	my @elims;
	my @prelims;
	my $final;

	foreach my $round (@rounds) { 
		$final = $round unless $final;
		push @elims, $round if $round->type eq "elim";
		push @elims, $round if $round->type eq "final";
		push @prelims, $round if $round->type ne "final" && $round->type ne "elim";
	}

	my @values = $m->comp("/funclib/event_values.mas", event => $event); 

	my %prelim_wins;
	my %in_round = ();
	my %final_ballots = ();

	foreach my $value (@values) { 
		next unless $value->type eq "ballot";
		$prelim_wins{$value->entryid}++ if $value->roundtype ne "final" && $value->rountype ne "elim";
		push @{$in_round{$value->roundid}}, $value->entryid;
		$final_ballots{$value->entryid}++ if $value->roundid == $final->id && $value->value == 1;
	}

	my %round_multiplier = ();
	my %used = ();

	foreach my $round (@rounds) { 

		if ($round->id == $final->id) { 

		} elsif ($round->type ne "final" && $round->type ne "elim") { 

			foreach my $entry_id (@{$in_round{$round->id}}) {
				next if $used{$entry_id};

			}

		}

	}


</%init>
