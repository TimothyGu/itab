<%args>
	$tourn
	$event_id
	$result_type
	$publish => undef
</%args>
<%init>

	my @events;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now( time_zone => $tz);

	my $label = "Prelim Seeds" if ($result_type eq "prelim_seed");
	$label = "Final Places" if ($result_type eq "final");

	Tab::ResultValue->set_sql( rm_label => "
		delete result_value.*
		from result, result_value, result_set
		where result_value.result = result.id
		and result.result_set = result_set.id
		and result_set.event = ? 
		and result_set.label = ? 
	");

	Tab::Result->set_sql( rm_label => "
		delete result.* 
		from result, result_set 
		where result.result_set = result_set.id
		and result_set.event = ? 
		and result_set.label = ? 
	");

	Tab::ResultSet->set_sql( rm_label => "
		delete from result_set
		where event = ? 
		and label = ? 
	");

	if ($event_id eq "all") { 

		@events = $tourn->events;

	} elsif ($event_id =~ /type/) { 

		my $type = $event_id;
		$type =~ s/type_//g;

		@events = Tab::Event->search( tourn => $tourn->id, type => $type );

	} else { 

		push @events, Tab::Event->retrieve($event_id);

	}

	my $msg;

	foreach my $event (@events) { 
	
		my $novice++ if $event->setting("top_novice");
		my $honmen++ if $event->setting("honorable_mentions");

		my $event_type = $event->type;

		my @rounds = sort {$b->name <=> $a->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
        my $top_novice = $m->comp("/tabbing/results/speech/top_novice.mas", event => $event) if $novice;

		my %used;
        my $final;
        my @elims;
        my $last_prelim;

        foreach my $round (@rounds) { 
            $final = $round if $round->type eq "final";
            push (@elims, $round) if $round->type eq "elim";
            $last_prelim = $round if $round->type ne "elim" && $round->type ne "final" && not defined $last_prelim;
        }

		my $rank = 1;


		Tab::ResultValue->sql_rm_label->execute( $event->id, $label );
		Tab::Result->sql_rm_label->execute( $event->id, $label );
		Tab::ResultSet->sql_rm_label->execute( $event->id, $label );

		my $set = Tab::ResultSet->create({ 
			tourn => $tourn->id,
			event => $event->id,
			label => $label,
			generated => $now
		});

		my %prelim_seed;

		my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $last_prelim);
		my %entry_ballots = $m->comp("/funclib/round_ballot_string.mas", round => $last_prelim);

		foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

			my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

			my $park;

			foreach my $entry (@{${$entries_ref}{$key}}) {

				$prelim_seed{$entry} = $rank;
				next unless $result_type eq "prelim_seed"; 
				next if $used{$entry}++;

				$park++;

				my $key_value = $key;
				$key_value .= "-T" if $tie;

				my $result = Tab::Result->create({
					entry => $entry,
					rank => $rank,
					result_set => $set->id
				});

				my $priority;

				Tab::ResultValue->create({
					tag => "Seed",
					long_tag => "Ranking Order Overall",
					result => $result->id,
					value => $key_value,
					priority => 0,
					sort_desc => 0
				});

				foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

					my $tag = ${$desc_ref}{$key};
					my $long_tag = ${$long_desc_ref}{$key};
					my $sort_desc = 0 if ${$tier_dir}{$key} eq "up";
					$sort_desc = 1 if ${$tier_dir}{$key} eq "down";

					Tab::ResultValue->create({
						tag => $tag,
						long_tag => $long_tag,
						result => $result->id,
						value => ${$tbs_ref}{$entry."-".$key},
						priority => $key,
						sort_desc => $sort_desc
					});

				}

				Tab::ResultValue->create({
					tag => "Ballots",
					long_tag => "Unadjusted Raw Scores",
					result => $result->id,
					value => $entry_ballots{$entry},
					no_sort => 1
				});

			}

			$rank += $park;

		}

		if ($result_type eq "final") { 
		
			undef $rank;
		
			foreach my $round ($final, @elims, $last_prelim) {

				next unless $round;
				my $type = $round->type;
				my $label = substr($round->label, 0, 8); 


				my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref, $tier_dir, $panrank_ref, $panletter_ref, $long_desc_ref) = $m->comp("/tabbing/results/order_entries.mas", round => $round);
				my %entry_ballots = $m->comp("/funclib/round_ballot_string.mas", round => $round);

				foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) { 

					my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

					@{${$entries_ref}{$key}} = sort {$prelim_seed{$a} <=> $prelim_seed{$b}} @{${$entries_ref}{$key}};

					foreach my $entry (@{${$entries_ref}{$key}}) {

						next if $used{$entry}++;
						$rank++;

						my $priority;

						my $key_value = Lingua::EN::Numbers::Ordinate::ordinate($key) if $type eq "final";
						$key_value .= "-T" if $tie && $type eq "final";

						$key_value = $label if $type eq "elim";
						$key_value = "Prelim" if $type ne "elim" && $type ne "final";

						my $result = Tab::Result->create({
							entry => $entry,
							rank => $rank,
							result_set => $set->id
						});

						Tab::ResultValue->create({
							tag => "Place",
							long_tag => "Overall Final Placement",
							result => $result->id,
							value => $key_value,
							priority => 0,
							sort_desc => 0
						});

						foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
						
							next if ($type eq "elim" || $type eq "final") && $event_type ne "speech" && $event_type ne "congress";

							my $tag = ${$desc_ref}{$key};
							my $long_tag = ${$long_desc_ref}{$key};
							my $sort_desc = 0 if ${$tier_dir}{$key} eq "up";
							$sort_desc = 1 if ${$tier_dir}{$key} eq "down";

							Tab::ResultValue->create({
								tag => $tag,
								long_tag => $long_tag,
								result => $result->id,
								value => ${$tbs_ref}{$entry."-".$key},
								priority => $key,
								sort_desc => $sort_desc
							});

						}

						Tab::ResultValue->create({
							tag => "Ballots",
							long_tag => "Unadjusted Raw Scores",
							result => $result->id,
							value => $entry_ballots{$entry},
							no_sort => 1
						});

					}

				}

			}

		}

		Tab::Result->set_sql( update_percentile => "update result set percentile = (rank * 1000 / ?) where result_set = ? ");
		Tab::Result->sql_update_percentile->execute( $rank, $set->id);

		$msg .= $event->name." results published " if $publish;
		$msg .= $event->name." results calculated " unless $publish;

		$event->setting('results_published', 1) if $publish;
		$event->setting('results_published', "") unless $publish;

	}

	$m->redirect("index.mhtml?msg=$msg");


</%init>
