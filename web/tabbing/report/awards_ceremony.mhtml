<%args>
	$tourn
	$session
	$event_id => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id) if $event_id && $event_id ne "all";

	my $switch = 1;
    my $now = DateTime->now;    
    $now->set_time_zone($tourn->tz);

	my $name = $tourn->name if $event_id eq "all";
    $name = $event->name if $event && not defined $name;
    $name =~ s/[\W_]//g;

	my @events;
	push @events, $event if $event;
	@events = sort {$a->name cmp $b->name} $tourn->events if $event_id eq "all";

    my $filename = "Awards-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;
    `rm -f $filepath.*`; 

	my $novice++ if $tourn->setting("novices");
	my $honmen++ if $tourn->setting("honorable_mentions");
    
    $m->comp("/funclib/printout.mas", filename => $filename, head => 1, array => "2.0" );

    open (TEXOUT, ">>$filepath.tex");

	my $tabular = "\\begin{tabular}{p{.5in}p{1.75in}p{1.75in}p{2.25in}}\n";

	foreach my $event (@events) { 

		next if $event->type ne "speech";

		my @rounds = sort {$b->name <=> $a->name} $m->comp("/funclib/event_rounds.mas", event => $event, done => "yes");
		my $top_novice = $m->comp("/tabbing/results/speech/top_novice.mas", event => $event) if $novice;

		my $final;
		my @elims;
		my $last_prelim;

		foreach my $round (@rounds) { 
			$final = $round if $round->type eq "final";
			push (@elims, $round) if $round->type eq "elim";
			$last_prelim = $round if $round->type ne "elim" && $round->type ne "final" && not defined $last_prelim;
		}

		my %used;

		Tab::Panel->set_sql( empties => " 
			select distinct panel.id
			from ballot, panel, round, entry
			where round.event = ? 
			and panel.round = round.id
			and ballot.panel = panel.id
			and ballot.entry = entry.id
			and entry.dropped != 1
			and entry.dq != 1
			and ballot.audit != 1
		");

		my @empties = Tab::Panel->search_empties($event->id);

		print TEXOUT "\\Large ". Tab::texify($tourn->name.": ".$event->name)." \n";
		print TEXOUT "\\nopagebreak[3]\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\normalsize\n";
		print TEXOUT "\\emph{.\\hfill WARNING: There are still ".scalar @empties." unentered ballots in this event}\n\\newline\n\\emph{.\\hfill Results may be inaccurate}\n\\newline" if @empties;

		my $done;

		foreach my $round ($final, @elims) { 

			next unless $round;

			my $type = $round->type;
			my $label = substr($round->label, 0, 3);
			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/speech/order_entries.mas", round => $round);

			unless ($done) { 
				print TEXOUT "\\nopagebreak[3]\n";
				print TEXOUT $tabular;
				print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
				print TEXOUT "  & Name & School & Students \\\\ \n ";
				print TEXOUT "\\end{tabular}\n";
				print TEXOUT "\\newline\n";
			}

			$done++;


			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				
				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
	
				foreach my $entry (@{${$entries_ref}{$key}}) { 

					next if $used{$entry->id};
					$used{$entry->id}++;

					print TEXOUT "\\nopagebreak[3]\n";
					print TEXOUT $tabular;
					print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

					print TEXOUT Tab::texify($key) if $type eq "final";
					print TEXOUT Tab::texify($label) if $type eq "elim";
					print TEXOUT Tab::texify("-T") if $tie && $type eq "final";

					if ($top_novice && $entry->id == $top_novice->id) { 
						print TEXOUT " \\scriptsize ".Tab::texify(" TopNov");
						undef $top_novice;
					}

					print TEXOUT " & \\normalsize ". Tab::texify($entry->name);
					print TEXOUT " & \\normalsize ".Tab::texify($entry->school->short_name)." &";

					my $first;

					my @students = $entry->students;

					print TEXOUT "\\vbox to 12pt {" if scalar @students > 1;

					foreach my $student (@students) { 
						print TEXOUT "\\hbox{\\strut " if scalar @students > 1;
						print TEXOUT "\\small ".Tab::texify($student->first." ".$student->last);
						print TEXOUT ":   (".Tab::texify($student->phonetic).")" if $student->phonetic;
						print TEXOUT "}" if scalar @students > 1;
					}

					print TEXOUT "}" if scalar @students > 1;
					print TEXOUT "\\\\ \n";
					print TEXOUT "\\end{tabular}\n";
					print TEXOUT "\\newline\n";

				}
			}

		}

		unless ($final || @elims) { 

			my @rounds = sort {$b->name <=> $a->name} $event->rounds;
			my $round = shift @rounds;

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/speech/order_entries.mas", round => $round);

			unless ($done) { 
				print TEXOUT "\\nopagebreak[3]\n";
				print TEXOUT $tabular;
				print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
				print TEXOUT "  & Name & School & Students \\\\ \n ";
				print TEXOUT "\\end{tabular}\n";
				print TEXOUT "\\newline\n";
			}

			$done++;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				
				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
	
				foreach my $entry (@{${$entries_ref}{$key}}) { 

					next if $used{$entry->id};
					$used{$entry->id}++;

					print TEXOUT "\\nopagebreak[3]\n";
					print TEXOUT $tabular;
					print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

					print TEXOUT Tab::texify($key);
					print TEXOUT Tab::texify("-T") if $tie;

					if ($top_novice && $entry->id == $top_novice->id) { 
						print TEXOUT " \\scriptsize ".Tab::texify(" TopNov");
						undef $top_novice;
					}

					print TEXOUT " & \\normalsize ". Tab::texify($entry->name);
					print TEXOUT " & \\normalsize ".Tab::texify($entry->school->short_name)." &";

					my $first;

					my @students = $entry->students;

					print TEXOUT "\\vbox to 12pt {" if scalar @students > 1;

					foreach my $student (@students) { 
						print TEXOUT "\\hbox{\\strut " if scalar @students > 1;
						print TEXOUT "\\small ".Tab::texify($student->first." ".$student->last);
						print TEXOUT ":   (".Tab::texify($student->phonetic).")" if $student->phonetic;
						print TEXOUT "}" if scalar @students > 1;
					}

					print TEXOUT "}" if scalar @students > 1;
					print TEXOUT "\\\\ \n";
					print TEXOUT "\\end{tabular}\n";
					print TEXOUT "\\newline\n";

				}
			}

		}

		if ($honmen && $last_prelim) { 

			my ($entries_ref, $tbs_ref, $desc_ref, $noshow_ref) = $m->comp("/tabbing/results/speech/order_entries.mas", round => $last_prelim);

			my $cume;

			my @tb_keys = sort {$a <=> $b} keys %{$desc_ref};
			my $first_key = shift @tb_keys;
			my $highest_cume;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry (@{${$entries_ref}{$key}}) { 
					
					if ($used{$entry->id}) { 
						$highest_cume = ${$tbs_ref}{$entry->id."-".$first_key} if ${$tbs_ref}{$entry->id."-".$first_key} > $highest_cume;
					}
				}
			}

			my @honmens;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				foreach my $entry (@{${$entries_ref}{$key}}) { 
					push @honmens, $entry if ${$tbs_ref}{$entry->id."-".$first_key} == $highest_cume && not defined $used{$entry->id};
				}
			}

			foreach my $entry (@honmens) { 

				next if $used{$entry->id};
				$used{$entry->id}++;

				print TEXOUT "\\nopagebreak[3]\n";
				print TEXOUT $tabular;
				print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

				print TEXOUT Tab::texify("HM ");

				if ($top_novice && $entry->id == $top_novice->id) { 
					print TEXOUT " \\scriptsize ".Tab::texify(" TopNov");
					undef $top_novice;
				}

				print TEXOUT " & \\normalsize ". Tab::texify($entry->name);
				print TEXOUT " & \\normalsize ".Tab::texify($entry->school->short_name)." & ";

				my $first;

				my @students = $entry->students;

				print TEXOUT "\\vbox to 12pt {" if scalar @students > 1;
				foreach my $student (@students) { 
					print TEXOUT "\\hbox{\\strut " if scalar @students > 1;
					print TEXOUT "\\small ".Tab::texify($student->first." ".$student->last);
					print TEXOUT ":   (".Tab::texify($student->phonetic).")" if $student->phonetic;
					print TEXOUT "}" if scalar @students > 1;
				}

				print TEXOUT "} " if scalar @students > 1;
				print TEXOUT "\\\\ \n";
				print TEXOUT "\\end{tabular}\n";
				print TEXOUT "\\newline\n";

			}

		}

		if ($top_novice) { 

			next if $used{$top_novice->id};
			$used{$top_novice->id}++;

			print TEXOUT "\\nopagebreak[3]\n";
			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
			print TEXOUT " \\scriptsize ".Tab::texify("TopNov");
			print TEXOUT " & \\normalsize ". Tab::texify($top_novice->name);
			print TEXOUT " & \\normalsize ".Tab::texify($top_novice->school->short_name)." & ";

			my $first;

			my @students = $top_novice->students;

			print TEXOUT "\\vbox to 12pt {" if scalar @students > 1;
			foreach my $student (@students) { 
				print TEXOUT "\\hbox{\\strut " if scalar @students > 1;
				print TEXOUT "\\small ".Tab::texify($student->first." ".$student->last);
				print TEXOUT ":   (".Tab::texify($student->phonetic).")" if $student->phonetic;
				print TEXOUT "}" if scalar @students > 1;
			}

			print TEXOUT "} " if scalar @students > 1;
			print TEXOUT "\\\\ \n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";

		}

		print TEXOUT "\\bigskip\n";
		print TEXOUT "\\newline\n";

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas", filename => $filename, tail => 1 );

</%init>

