<%args>
	$tourn
	$no_prep => undef
	$debug => 1
</%args>
<%init>

	my $circuit = $tourn->circuit;

    system "$Tab::logger Prepping the ballots " if $debug;

	$m->comp("prep_ballots.mas", tourn => $tourn) unless $no_prep;

    system "$Tab::logger BEGIN SWEEPING! " if $debug;

	my %comp_score = ();

Tab::Entry->set_sql(sweep_prelims => " 
                select distinct entry.id as id,entry.code as code,
                    sum(IF(ballot.rank < 5,6 - ballot.rank,1)) as points
                from entry,ballot,panel,event
                where panel.type = \"prelim\"
                and panel.id = ballot.panel
                and ballot.entry = entry.id
                and entry.dropped != 1
                and entry.event = event.id
                and event.type = \"speech\"
                and entry.tourn = ?
                and ballot.rank != 0
                group by entry");

Tab::Entry->set_sql(sweep_elims => " 
                select distinct entry.id as id,
                    sum(IF(ballot.rank < 5,6 - ballot.rank,1)) as points
                from entry,ballot,panel,event
                where panel.type = \"elim\"
                and panel.id = ballot.panel
                and panel.nosweep != 1
                and ballot.entry = entry.id
                and entry.dropped != 1
                and entry.event = event.id
                and event.type = \"speech\"
                and entry.tourn = ?
                and ballot.rank != 0
                group by entry");

Tab::Entry->set_sql(sweep_finals => " 
                select distinct entry.id as id,
                    sum(IF(ballot.rank < 5,6 - ballot.rank,1)) as points
                from entry,ballot,panel,event
                where panel.type = \"final\"
                and panel.id = ballot.panel
                and ballot.entry = entry.id
                and entry.dropped != 1
                and entry.event = event.id
                and event.type = \"speech\"
                and entry.tourn = ?
                and ballot.rank != 0
                group by entry");


	if ($tourn->method->sweep_count_prelims) { 

    	system "$Tab::logger Scoring prelims " if $debug;
		
		my @prelim_entries = Tab::Entry->search_sweep_prelims($tourn->id);

		foreach my $c (@prelim_entries) { 
			$comp_score{$c->id} += $c->points;
		}

    	system "$Tab::logger Adding scores is done" if $debug;
	}


	if ($tourn->method->sweep_count_elims) { 

    	system "$Tab::logger Scoring elims " if $debug;

		foreach my $c (Tab::Entry->search_sweep_elims($tourn->id)) { 

			$comp_score{$c->id} = $comp_score{$c->id} + $c->points;

		}
	}

	if ($tourn->method->sweep_count_finals) { 

    	system "$Tab::logger Scoring finals " if $debug;

		foreach my $c (Tab::Entry->search_sweep_finals($tourn->id)) { 
			$comp_score{$c->id} = $comp_score{$c->id} + $c->points;
		}

	}	

	if ($tourn->method->sweep_rank_in_elims) { 

    	system "$Tab::logger Scoring elim rank " if $debug;

		my @elims = $tourn->elim_panels;
		push (@elims, $tourn->panels( type => "final"));

	    #uniq
	    my %seen = ();
    	@elims = grep { ! $seen{$_->id} ++ } @elims;

		foreach my $elim (@elims) { 

			next if $elim->type eq "prelim";
			next if $elim->round->event->type ne "speech";

			my @entries = $elim->entries_in_order;
			my $rank = 5 ;
			foreach my $c (@entries) { 
				$comp_score{$c->id} = $comp_score{$c->id} + $rank;
				system "$Tab::logger adding $rank to ".$c->code." sweep points" if $debug && $c->code == 31;
				$rank-- unless $rank == 1;
			}
		}
	}

	if ($tourn->method->sweep_final_rank) {

    	system "$Tab::logger Scoring final rank " if $debug;

		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 

			my @finalists = $m->comp(
					"order_entries.mas", 
					tourn => $tourn, 
					basis => "final", 
					event => $event, 
					finals_only => "1");

        	my $rank = 5;

			if (@finalists) {
            	foreach my $c (@finalists) {
                	$comp_score{$c->id} = $comp_score{$c->id} + $rank;
					$rank-- unless $rank == 1;
            	}
			} else { 

			my @entries = $m->comp(
					"order_entries.mas", 
					tourn => $tourn, 
					basis => "prelims", 
					event => $event);

			my $rank = 5;

				foreach my $place (0 .. 5) { 
					my $comp = shift @entries if @entries;
					$comp_score{$comp->id} = $comp_score{$comp->id} + $rank if $comp;
					$rank-- unless $rank == 1;
				}

			}

		}

    }

	my @placement_sweeps;
	my @prelim_cume_sweeps;

	foreach my $sweep ($tourn->sweeps) { 
		push (@placement_sweeps, $sweep) if $sweep->place > 0;
		push (@prelim_cume_sweeps, $sweep) if $sweep->prelim_cume > 0;
	}

	if (@prelim_cume_sweeps) { 

    	system "$Tab::logger Adding scores based on specific prelim cumes" if $debug;

		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 
			foreach my $comp ($event->entries) { 
				foreach my $cume (@prelim_cume_sweeps) { 
					$comp_score{$comp->id} += $cume->value if $comp->prelim_cume == $cume->prelim_cume;
				}
			}
		}
	}

	if (@placement_sweeps) { 

		#points for placement mean that we need to apportion them based on final ranking in order.

    	system "$Tab::logger Scoring placement sweeps " if $debug;

		foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)( type => "speech")) { 

			my @finalists = $m->comp(
				"order_entries.mas", 
				tourn => $tourn, 
				basis => "final", 
				event => $event, 
				finals_only => "1"
			);
	
			my @elims = $m->comp(
				"order_entries.mas", 
				tourn => $tourn, 
				basis => "elims", 
				event => $event, 
				breaks_only => "1"
			) unless $tourn->method->sweep_only_place_final;

			my @non_advancing = $m->comp(
				"order_entries.mas", 
				tourn => $tourn, 
				basis => "prelim", 
				event => $event
			) unless $tourn->method->sweep_only_place_final;

			my @entries_in_order = (@finalists, @elims, @non_advancing);

			foreach my $sweep (@placement_sweeps) { 

				my $place = $sweep->place;
				$place--; #we count from zero on the arrays;
				my $comp = $entries_in_order[$place];
				next unless $comp;
				$comp_score{$comp->id} += $sweep->value;

			}
		}
	}

	# Points just for entering the tournament.
	if ($tourn->method->points_per_entry > 0) { 

    	system "$Tab::logger Points for breathing" if $debug;

		my @entries = $tourn->entries;
		foreach my $c (@entries) { 
			$comp_score{$c->id} = $comp_score{$c->id} + $tourn->method->points_per_entry;
		}
	}

	#Points for making elim rounds.
	if ($tourn->method->points_per_elim > 0) { 

    	system "$Tab::logger Points for being in an elim round" if $debug;

		my @entries = $tourn->elims;
		foreach my $c (@entries) { 
			$comp_score{$c->id} = $comp_score{$c->id} + (
				$tourn->method->points_per_elim * (scalar $c->elims) );
		}
	}

	#Points for making finals.
	if ($tourn->method->points_per_finalist > 0) { 

    	system "$Tab::logger Points for being in a final round" if $debug;

		my @entries = $tourn->finalists;
		foreach my $c (@entries) { 
			$comp_score{$c->id} = $comp_score{$c->id} + (
				$tourn->method->points_per_finalist * (scalar $c->finals) );
		}
	}

	my %not_using_ids;

	foreach my $event ($m->comp("/funclib/tourn_events.mas", tourn => $tourn)(omit_sweeps => 1)) { 
    	system "$Tab::logger Eliminating events that do not count for sweepstakes" if $debug;
		foreach my $comp ($event->entries) { 
			$not_using_ids{$comp->id}++
		}
	}

	foreach my $id (keys %comp_score) { 
		next unless $id;
		next if $not_using_ids{$id};
		Tab::Entry->set_sql(update_points => "update comp set sweeps_points = $comp_score{$id} where id = $id");
		Tab::Entry->sql_update_points->execute;
	}

</%init>
