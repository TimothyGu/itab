<%args> 
	$circuit
	$tourn
	$account
	$type
	$judge_id
	$bin => undef
	$tz
</%args>
<%init> 

	if ($type eq "time") { 
	
		my $start_date = $ARGS{"start_date"};
		my $start_time = $ARGS{"start_time"};

		my $end_date = $ARGS{"end_date"};
		my $end_time = $ARGS{"end_time"};

		$end_date = $start_date unless $end_date;

		my $start_dt = Tab::dtme($start_date, $start_time);
		my $end_dt = Tab::dtme($end_date, $end_time);

		$start_dt->set_time_zone($tz);
		$end_dt->set_time_zone($tz);
			
		my $strike = Tab::Strike->create({
			judge => $judge_id,
			tournament => $tourn->id,
			type => "time",
			start => $start_dt,
			end   => $end_dt
		});

		my $msg = "Time strike saved";
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");

	}

	if ($type eq "event") { 
	
		my $event = Tab::Event->retrieve($ARGS{event});
		my $strike = Tab::Strike->create({ 
			judge => $judge_id,
			tournament => $tourn->id,
			type => "event",
			event => $event->id
		});
		my $msg = "Judge struck against ". $event->abbr;
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
	
	}
	
	if ($type eq "elim") {
	
		my $event = Tab::Event->retrieve($ARGS{event});
		my $strike = Tab::Strike->create({ 
			judge => $judge_id,
			tournament => $tourn->id,
			type => "elim",
			event => $event->id
		});
		my $msg = "Judge reserved for elims in ". $event->abbr;
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");

	}

	if ($type eq "comp") {

		my $code = $ARGS{code};
		my $msg;
		my $err;

		my $comp = $tourn->comp_with_code($code);

		if ($comp) { 

			my $strike = Tab::Strike->create({ 
				tournament=> $tourn->id,
				judge => $judge_id,
				type => "comp",
				comp => $comp->id
			});

			$msg = "Judge blocked against speaker ". $comp->code;

		} else {

			$err = "Competitor codes $code does not exist";

		}

		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg&err=$err");

	}

	if ($type eq "student") {
	
		my ($name) = $ARGS{name};
		my $judge = Tab::Judge->retrieve($judge_id);

		my $search_name =$name."%";
		my @students = Tab::Student->search_like( last => $search_name );

		unless (@students)  {  

			my $msg = "No student with the last name $name was found";
			$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");

		} 

		if (scalar @students > 1)  { 
			$m->redirect("$Tab::url_prefix/register/strike_students.mhtml?name=$name&judge_id=$judge_id");
		}

		foreach my $student (@students) { 

			foreach my $comp ($student->entries($tourn->id)) { 

				my $strike = Tab::Strike->create({ 
					tournament=> $tourn->id,
					judge => $judge_id,
					type => "comp",
					comp => $comp->id
				});
				
			}
			
			my $msg = "Judge was struck against ".$student->first." ".$student->last;
			$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
		}


	}
	
	if ($type eq "school") {
	
		my $school = Tab::School->retrieve($ARGS{school});

		my $strike = Tab::Strike->create({ 
			tournament => $tourn->id,
			judge => $judge_id,
			type => "school",
			school => $school->id
		});
		my $msg = "Judge struck against school ".$school->name;
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
	
	}

	
	if ($type eq "region") { 
	
		my $region = Tab::Region->retrieve($ARGS{region});

		my $strike = Tab::Strike->create({ 
			tournament => $tourn->id,
			judge => $judge_id,
			type => "region",
			region => $region->id
		});

		my $msg = "Judge struck against region ".$region->name;
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
	}

	if ($type eq "diocese") { 
	
		my $diocese = Tab::Region->retrieve($ARGS{diocese});

		my $strike = Tab::Strike->create({ 
			tournament => $tourn->id,
			judge => $judge_id,
			type => "diocese",
			region => $diocese->id
		});

		my $msg = "Judge struck against diocese ". $diocese->name;
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
	}

	if ($type eq "bin") {

		my $judge = Tab::Judge->retrieve($judge_id);

	    foreach my $bin ($judge->judge_group->bins) {

   	  		my $binkey = "bin_".$bin->id;
        	my $existing_strike = $bin->strike($judge);

        	my $bin_yes = $ARGS{$binkey};

        	next if $bin_yes && $existing_strike;
        	next unless $bin_yes || $existing_strike;

        	if ( defined $bin_yes &! defined $existing_strike) {

        	    #There should be one.  and there ISN'T ALREADY!!!  HAHAHAHAHA
        	    my $strike = Tab::Strike->create({
        	        tournament  => $tourn->id,
        	        bin         => $bin->id,
        	        type        => "time",
        	        judge       => $judge->id,
        	        start       => $bin->start,
        	        end         => $bin->end            });

        	}

        	if ( defined $existing_strike &! defined $bin_yes) {
	
	            $existing_strike->delete;
	
   		     }
   		}

		my $msg = "Time strike saved";
		$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");
	}

	my $msg = "That type of strike is unknown.  This is either a bug or you're attemping something weird.";
	$m->redirect("$Tab::url_prefix/register/strikes.mhtml?judge_id=$judge_id&msg=$msg");

</%init>
