<%args>
	$tourn									
	$session
	$name => undef
	$tab_file => undef
</%args>

<h3>Uploading tournament data</h3>

<%perl>

	my @data_tables = (
		"Method",
		"Tournament",
		"Flight",
		"File",
		"Timeslot",
		"Site",
		"TournSite",
		"Room",
		"RoomBlock",
		"RoomPool",
		"Tiebreak",
		"JudgeGroup",
		"Class",
		"Event",
		"Round",
		"Panel",
		"School",
		"Judge",
		"Qual",
		"Rating",
		"Sweep",
		"JudgeClass",
		"JudgeHire",
		"Pool",
		"PoolJudge",
		"PoolGroup",
		"ElimAssign",
		"Entry",
		"Strike",
		"Fine",
		"Change",
		"Ballot");

	my $req = Apache2::Request->new($r);
	my $upload = $req->upload("tab_file");

	my $filename = $upload->filename;

    my $filehandle = $upload->fh;

    my @lines =  <$filehandle>;
	my %lines_by_type = ();
	my %lines_by_key = ();
	my %ids_by_type = ();

	# separate out all the fields by type of table.

	foreach my $line (@lines) { 

		my ($type, $id, $field, @values) = split(/:/, $line);

		my $key = $type."-".$id."-".$field;

		my $value = join(":", @values);	

		$value =~ s/<TABSPACE>/\n/g;

		chomp $value;

		if ($field eq "start" || $field eq "end" || $field eq "reg_start" || $field eq "reg_end") {
			$value =~ s/T/\ /g;
			#stupid syntax highlighting bug	/
		}
		
		my $full_value = $id.":".$field.":".$value;

		$lines_by_key{$key} = $value; 
		push (@{$lines_by_type{$type}}, $full_value); 
		push (@{$ids_by_type{$type}}, $id);

	}

	# This hash will translate any primary keys from the data dump into
	# the new values in the imported database.

	my %translate_keys = ();

	DATATYPE:

	foreach my $datatype (@data_tables) {

		my ($table_name,@columns) = gimme_table_name_and_columns($datatype);

		next DATATYPE unless defined @{$lines_by_type{$table_name}};

		my @uniq_ids = keys %{{ map {$_ => 1} @{$ids_by_type{$table_name}} }};

		my $new_tourn;

		foreach my $old_id (@uniq_ids) { 

			my %object_hash = ();

			foreach my $column (@columns) { 
				next if $column eq "id";
		
				# I know.  I suck.
				my $realcolumn = $column;
				$realcolumn = "student" if $column eq "partner";
	
				my $result = $lines_by_key{$table_name."-".$old_id."-".$column};
				$result = $translate_keys{$realcolumn."-".$result} 
					if $translate_keys{$realcolumn."-".$result};
				$object_hash{$column} = $result;
			}

			my $object = create_object($datatype, $old_id, %object_hash);

			if ($datatype eq "Tournament") { 
				$object->name($name);
				$object->update;
				$tourn->hidden(1);
				$tourn->update;
				$session->tournament($object->id);
				$session->update;
			}

			$translate_keys{$table_name."-".$old_id} = $object->id;

		}

	}

	sub gimme_table_name_and_columns { 

		# This disgusts me.  But there's no way to dynamically call a module,
		# since the module requirements are parsed by perl on the first pass,
		# before any variables are expanded.  So as far as I know, I'm stuck
		# with the Big Honking Static Array of Doom.  I should really get
		# around to reading a whole Perl book someday.

		my $datatype = shift;
		my $tn;
		my @ca;
	
		if ($datatype eq "Method") { 
			$tn = Tab::Method->table;
			@ca = Tab::Method->columns;
		}	

		if ($datatype eq "Tournament") { 
			$tn = Tab::Tourn->table;
			@ca = Tab::Tourn->columns;
		}	

		if ($datatype eq "Flight") { 
			$tn = Tab::Flight->table;
			@ca = Tab::Flight->columns;
		}	

		if ($datatype eq "Timeslot") { 
			$tn = Tab::Timeslot->table;
			@ca = Tab::Timeslot->columns;
		}	

		if ($datatype eq "Site") { 
			$tn = Tab::Site->table;
			@ca = Tab::Site->columns;
		}	

		if ($datatype eq "TournSite") { 
			$tn = Tab::TournSite->table;
			@ca = Tab::TournSite->columns;
		}	

		if ($datatype eq "Room") { 
			$tn = Tab::Room->table;
			@ca = Tab::Room->columns;
		}	

		if ($datatype eq "RoomBlock") { 
			$tn = Tab::RoomBlock->table;
			@ca = Tab::RoomBlock->columns;
		}	

		if ($datatype eq "RoomPool") { 
			$tn = Tab::RoomPool->table;
			@ca = Tab::RoomPool->columns;
		}	

		if ($datatype eq "Tiebreak") { 
			$tn = Tab::Tiebreak->table;
			@ca = Tab::Tiebreak->columns;
		}	

		if ($datatype eq "JudgeGroup") { 
			$tn = Tab::JudgeGroup->table;
			@ca = Tab::JudgeGroup->columns;
		}	

		if ($datatype eq "Class") { 
			$tn = Tab::Class->table;
			@ca = Tab::Class->columns;
		}	

		if ($datatype eq "Event") { 
			$tn = Tab::Event->table;
			@ca = Tab::Event->columns;
		}	

		if ($datatype eq "Round") { 
			$tn = Tab::Round->table;
			@ca = Tab::Round->columns;
		}	

		if ($datatype eq "Panel") { 
			$tn = Tab::Panel->table;
			@ca = Tab::Panel->columns;
		}	

		if ($datatype eq "School") { 
			$tn = Tab::School->table;
			@ca = Tab::School->columns;
		}	

		if ($datatype eq "Judge") { 
			$tn = Tab::Judge->table;
			@ca = Tab::Judge->columns;
		}	

		if ($datatype eq "Qual") { 
			$tn = Tab::Qual->table;
			@ca = Tab::Qual->columns;
		}	

		if ($datatype eq "JudgeClass") { 
			$tn = Tab::JudgeClass->table;
			@ca = Tab::JudgeClass->columns;
		}	

		if ($datatype eq "JudgeHire") { 
			$tn = Tab::JudgeHire->table;
			@ca = Tab::JudgeHire->columns;
		}	

		if ($datatype eq "Pool") { 
			$tn = Tab::Pool->table;
			@ca = Tab::Pool->columns;
		}	

		if ($datatype eq "PoolJudge") { 
			$tn = Tab::PoolJudge->table;
			@ca = Tab::PoolJudge->columns;
		}	

		if ($datatype eq "PoolGroup") { 
			$tn = Tab::PoolGroup->table;
			@ca = Tab::PoolGroup->columns;
		}	

		if ($datatype eq "ElimAssign") { 
			$tn = Tab::ElimAssign->table;
			@ca = Tab::ElimAssign->columns;
		}	

		if ($datatype eq "Entry") { 
			$tn = Tab::Entry->table;
			@ca = Tab::Entry->columns;
		}	

		if ($datatype eq "Strike") { 
			$tn = Tab::Strike->table;
			@ca = Tab::Strike->columns;
		}	

		if ($datatype eq "Fine") { 
			$tn = Tab::Fine->table;
			@ca = Tab::Fine->columns;
		}	

		if ($datatype eq "Change") { 
			$tn = Tab::Change->table;
			@ca = Tab::Change->columns;
		}	

		if ($datatype eq "Ballot") { 
			$tn = Tab::Ballot->table;
			@ca = Tab::Ballot->columns;
		}	

		if ($datatype eq "Student") { 
			$tn = Tab::Student->table;
			@ca = Tab::Student->columns;
		}	

		if ($datatype eq "Rating") { 
			$tn = Tab::Rating->table;
			@ca = Tab::Rating->columns;
		}	

		if ($datatype eq "Sweep") { 
			$tn = Tab::Sweep->table;
			@ca = Tab::Sweep->columns;
		}

		if ($datatype eq "Uber") { 
			$tn = Tab::Uber->table;
			@ca = Tab::Uber->columns;
		}	

		if ($datatype eq "Chapter") { 
			$tn = Tab::Chapter->table;
			@ca = Tab::Chapter->columns;
		}	
		if ($datatype eq "ChapterCircuit") { 
			$tn = Tab::ChapterCircuit->table;
			@ca = Tab::ChapterCircuit->columns;
		}

		return ($tn, @ca);
	}


	sub create_object { 

	# This also disgusts me.  

		my ($datatype, $old_id, %object_hash) = @_;

		my $object;
	
		if ($datatype eq "Method") { 
			$object = Tab::Method->create(\%object_hash);
		}	

		if ($datatype eq "Tournament") { 
			$object = Tab::Tourn->create(\%object_hash);
		}	

		if ($datatype eq "Flight") { 
			$object = Tab::Flight->create(\%object_hash);
		}	

		if ($datatype eq "Timeslot") { 
			$object = Tab::Timeslot->create(\%object_hash);
		}	

		if ($datatype eq "Site") { 
			my $current = Tab::Site->retrieve($old_id);
			if ($current && $current->name eq $object_hash{"name"}) {
				$object = $current;
			} else { 
				$object = Tab::Site->create(\%object_hash);
			}
		}	

		if ($datatype eq "TournSite") { 
			$object = Tab::TournSite->create(\%object_hash);
		}	

		if ($datatype eq "Room") {
			my $current = Tab::Room->retrieve($old_id);

			if (($current) && ($current->name eq $object_hash{"name"}) &&
				$current->site->id eq $object_hash{"site"}) {

					$object = $current;

			} else { 

				$object = Tab::Room->create(\%object_hash);

			}
		}	

		if ($datatype eq "RoomBlock") { 
			$object = Tab::RoomBlock->create(\%object_hash);
		}	

		if ($datatype eq "RoomPool") { 
			$object = Tab::RoomPool->create(\%object_hash);
		}	

		if ($datatype eq "Tiebreak") { 
			$object = Tab::Tiebreak->create(\%object_hash);
		}	

		if ($datatype eq "JudgeGroup") { 
			$object = Tab::JudgeGroup->create(\%object_hash);
		}	

		if ($datatype eq "Class") { 
			$object = Tab::Class->create(\%object_hash);
		}	

		if ($datatype eq "Event") { 
			$object = Tab::Event->create(\%object_hash);
		}	

		if ($datatype eq "Round") { 
			$object = Tab::Round->create(\%object_hash);
		}	

		if ($datatype eq "Panel") { 
			$object = Tab::Panel->create(\%object_hash);
		}

		if ($datatype eq "School") { 
			$object = Tab::School->create(\%object_hash);
		}	

		if ($datatype eq "Judge") { 
			$object = Tab::Judge->create(\%object_hash);
		}	

		if ($datatype eq "Qual") { 
			$object = Tab::Qual->create(\%object_hash);
		}	

		if ($datatype eq "JudgeClass") { 
			$object = Tab::JudgeClass->create(\%object_hash);
		}	

		if ($datatype eq "JudgeHire") { 
			$object = Tab::JudgeHire->create(\%object_hash);
		}	

		if ($datatype eq "Pool") { 
			$object = Tab::Pool->create(\%object_hash);
		}	

		if ($datatype eq "PoolJudge") { 
			$object = Tab::PoolJudge->create(\%object_hash);
		}	

		if ($datatype eq "PoolGroup") { 
			$object = Tab::PoolGroup->create(\%object_hash);
		}

		if ($datatype eq "ElimAssign") { 
			$object = Tab::ElimAssign->create(\%object_hash);
		}

		if ($datatype eq "Entry") { 
			$object = Tab::Entry->create(\%object_hash);
		}

		if ($datatype eq "Strike") { 
			$object = Tab::Strike->create(\%object_hash);
		}

		if ($datatype eq "Fine") { 
			$object = Tab::Fine->create(\%object_hash);
		}

		if ($datatype eq "Sweep") { 
			$object = Tab::Sweep->create(\%object_hash);
		}

		if ($datatype eq "Rating") { 
			$object = Tab::Rating->create(\%object_hash);
		}

		if ($datatype eq "Change") { 
			$object = Tab::Change->create(\%object_hash);
		}

		if ($datatype eq "Ballot") { 
			$object = Tab::Ballot->create(\%object_hash);
		}	

		if ($datatype eq "Student") {
			my $current = Tab::Student->retrieve($old_id);

			if ($current->first eq $object_hash{"first"} &&
				$current->last eq $object_hash{"last"} &&
				$current->chapter eq $object_hash{"chapter"}) {

					$object = $current;

				} else { 

					$object = Tab::Student->create(\%object_hash);

			}
		}

		if ($datatype eq "Uber") {
			my $current = Tab::Uber->retrieve($old_id);

			if ($current->first eq $object_hash{"first"} &&
				$current->last eq $object_hash{"last"} &&
				$current->chapter eq $object_hash{"chapter"}) {

					$object = $current;

				} else { 

					$object = Tab::Uber->create(\%object_hash);

			}
		}

		return ($object);
	}


</%perl>

<p>I'm all done importing the tournament, thanks</p>

