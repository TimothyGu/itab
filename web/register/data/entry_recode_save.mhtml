<%args>
	$event_id
	$codestart => undef
	$sort_by
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	my $tourn = $event->tourn;

	$event->setting('code_start', $codestart) if $codestart;

	Tab::Entry->set_sql( code_clear => " update entry set code = 0 where event = ?  ");
	Tab::Entry->sql_code_clear->execute($event->id);

	my @entries = $event->entries;

	if ($sort_by eq "Randomly") { 
		my $i = scalar(@entries);
		my $j;
		foreach my $item (@entries)
		{	 --$i;
			$j = int rand ($i+1);
			next if $i == $j;
			@entries [$i,$j] = @entries[$j,$i];
	   }	
	}

	@entries = sort {$a->name cmp $b->name} @entries if $sort_by eq "Name";
	@entries = sort {$a->school->name cmp $b->school->name} @entries if $sort_by eq "School" || $sort_by eq "Randomly";
	@entries = sort {$a->id <=> $b->id} @entries if $sort_by eq "Register";

	if ($sort_by eq "Diocese" || $sort_by eq "Region") { 
		@entries = sort {$a->school->name cmp $b->school->name} @entries;
		@entries = sort {$a->school->region->code cmp $b->school->region->code} @entries;
		@entries = sort {length($a->school->region->code) <=> length($b->school->region->code)} @entries;
	}

	my $setting = $event->setting("code_style");

	if ($setting eq "numbers" || $setting eq "school_number") { 

		my %taken_codes = map {$_->code => 1} $m->comp("/funclib/tourn_entries.mas", tourn => $tourn);
		my %taken_judge_codes = map {$_->code => 1} $m->comp("/funclib/tourn_judges.mas", tourn => $tourn);

		my %school_code = map {$_->id => $_->code} $tourn->schools if $setting eq "school_number";

		if ($setting eq "school_number") { 	
			foreach my $key (keys %taken_codes, keys %taken_judge_codes) { 
				$key =~ s/\D//g;
				$taken_codes{$key}++;
			}
		}

		my $code = $codestart;

		foreach my $entry (@entries) { 

			while ( $taken_codes{$code} || $taken_judge_codes{$code} || $code =~ m/666$/ || $code == m/69$/) { 
				$code++;
			}

			$entry->code($school_code{$entry->school->id}." ".$code) if $setting eq "school_number";
			$entry->code($code) unless $setting eq "school_number";;
			$entry->update;
			$code++;
		}

	} else { 

		Tab::debuglog("Setting is $setting, calling the main");

		foreach my $entry (@entries) { 
			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
			$entry->update;
		}

	}

	my $msg = "Codes for ".$event->name." reshuffled";
	$m->redirect("/register/data/entry_recode.mhtml?msg=$msg");

</%init>
