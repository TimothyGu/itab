<%args>
	$comp_id
	$tourn
	$account
	$circuit
	$debug => undef
</%args>
<%init>

	my $comp = Tab::Comp->retrieve($comp_id);
	my $c_tourn = $comp->tournament;

	unless ($c_tourn->id eq $tourn->id) { 
		my $err = "That competitor does not belong to your tournament";
		$m->redirect("$Tab::url_prefix/register/comp_edit.mhtml?err=$err&comp_id=$comp_id");
	}

	$comp->waitlist(0);
	$comp->update;

	my $double_warning;
	my $housing_warning;

	foreach my $student ($comp->members) {

		my @entries = $student->entries($tourn);
		$double_warning++ if scalar @entries > 1;

		if ($tourn->method->housing) { 

			my @days = $m->comp("/funclib/tourn_days.mas", tourn => $tourn);
	   		my $day_before = $days[0]->clone;
	   		$day_before->subtract( days => 1);
	   		push (@days, $day_before);

	   		foreach my $day (sort {$a->epoch <=> $b->epoch} @days) {
	
				my @slots = Tab::HousingSlots->search( tournament => $tourn->id, night => $day->ymd );
				next unless @slots;

				my $housing_request = $student->housing($tourn, $day);
				next unless $housing_request;

				my $num_slots = $slots[0]->slots;
				my @total_requests = Tab::Housing->search( tournament => $tourn->id, night => $day->ymd);

				if ($num_slots > scalar @total_requests) { 

					$housing_request->waitlist(0);
					$housing_request->update;
					$housing_warning .= $student->first." ".$student->last;
					$housing_warning .=" HAS HOUSING (not waitlisted) on ".$day->day_name." ".$day->month."/".$day->day."\n";

				} else { 

					$housing_warning .= $student->first." ".$student->last;
					$housing_warning .=" IS STILL WAITLISTED FOR HOUSING on ".$day->day_name." ".$day->month."/".$day->day."\n";

				}
			}
		}
	}

	my @ballots = $comp->ballots;
	foreach (@ballots) {
		$_->active(1);
		$_->update;
	}

	my $subject = "Entry accepted from waitlist: ". $tourn->name;
	my $message = "The ".$tourn->name." is pleased to notify you\r\n";
	$message .= "that the following entry has been taken from the waitlist \r\n";
	$message .= "and added to the tournament: \r\n \r\n";

	$message .= "   Code ".$comp->code."\r\n" unless ($comp->event->no_codes || $tourn->method->hide_codes);

	foreach my $member ($comp->members) { 
		$message .= "   Name: ".$member->first." ".$member->last."\r\n";
	}

	if ($double_warning) { 
		$message .= "\r\n\r\n******WARNING:******\r\n";
		$message .= "Students in this entry are now double-entered.  Please make sure \r\n";
		$message .= "that their double-entry is not in conflict with tournament \r\n";
		$message .= "rules as the result of getting off the waitlist in this event. \r\n";
	} else { 
		$message .= "\r\n\r\n";
		$message .= "You do not have to take further action; this student \r\n";
		$message .= "is now fully entered and has been added to your invoice.\r\n";
	}

	if ($housing_warning)  {
		$message .= "\r\n\r\n";
		$message .= $housing_warning;
	}

	$message .= "\r\n \r\n";
	$message .= "Cheers,\r\n";
	$message .= "   ".$account->first." ".$account->last."\r\n";
	$message .= "   ".$tourn->name."\r\n ";

    $message .= " \r\n \r\n --- \r\n ";
    $message .= " This message was auto-generated by the Tabroom.com software\r\n";
    $message .= "  at ".$Tab::url_prefix.". on behalf of the ". $tourn->name ."\r\n";

	my @accounts = $comp->school->chapter->coaches;

	system "$Tab::eventlog School ".$comp->school->name." has ".scalar @accounts." coaches\n";

	if ($r->hostname =~ /tabdev/) { 

		system "$Tab::logger $message\n" if $debug;
	
	} else { 

	    foreach my $sendto (@accounts) {

			next if $sendto->noemail;

			system "$Tab::eventlog Sending waitlist email to ".$sendto->email."\n";

		    my $msg = MIME::Lite->new(
    		    From => $account->first." ".$account->last." <".$account->email.">",
   				To   => $sendto->first." ".$sendto->last." <".$sendto->email.">",
   	     		Subject => $subject,
        		Type    => "TEXT",
        		Data    => $message
    		);

			MIME::Lite->send('smtp', $Tab::smtp_server, Timeout=>60);
    		$msg->send;
    	}
	}

	my $msg = "Competitor ".$comp->code." removed from waitlist.  The coach has been notified by email";

	$m->redirect("$Tab::url_prefix/register/waitlist.mhtml?event_id=".$comp->event->id."&msg=$msg");

</%init>
