<%args>
	$league
	$tz
	$name
	$start
	$end
	$reg_start
	$reg_starttime => "08:00:00"
	$reg_end
	$reg_endtime => "17:00:00"
	$fine_deadline
	$fine_deadlinetime
	$drop_deadline
	$drop_deadlinetime
	$judge_deadline
	$judge_deadlinetime
	$freeze
	$freezetime
	$director_email => undef
	$tourn_id => undef
	$approved => 0
	$hidden => undef
	$account
	$copy_tourn_id => undef
	$league_id => undef
</%args>
<%init>

	my $tourn;

	my @is_admin = Tab::LeagueAdmin->search( account => $account->id, league => $league->id );

	unless ($account->site_admin || @is_admin) { 
		$m->print("<h4>Error:</h4><p><b>Only site admins or league officials may create or edit tournaments. </b></p>");
		$m->abort;
	}

	my $err;
	my $msg;

	$tourn = Tab::Tournament->retrieve($tourn_id) if $tourn_id;

    my $start_date = Tab::dateme($start);
    my $end_date = Tab::dateme($end);
	$start_date->set_time_zone($tz);
	$end_date->set_time_zone($tz);

    my $reg_start_dt = Tab::dtme($reg_start,$reg_starttime);
    my $reg_end_dt = Tab::dtme($reg_end,$reg_endtime);
	$reg_start_dt->set_time_zone($tz) if $reg_start_dt;
	$reg_end_dt->set_time_zone($tz) if $reg_end_dt;

    my $drop_deadline_dt = Tab::dtme($drop_deadline,$drop_deadlinetime) if $drop_deadline;
	$drop_deadline_dt->set_time_zone($tz) if $drop_deadline;

    my $judge_deadline_dt = Tab::dtme($judge_deadline,$judge_deadlinetime) if $judge_deadline;
	$judge_deadline_dt->set_time_zone($tz) if $judge_deadline;

    my $fine_deadline_dt = Tab::dtme($fine_deadline,$fine_deadlinetime) if $fine_deadline;
	$fine_deadline_dt->set_time_zone($tz) if $fine_deadline;

    my $freeze_dt = Tab::dtme($freeze,$freezetime) if $freeze;
	$freeze_dt->set_time_zone($tz) if $freeze;

	unless ($start_date) { 
		$err = "Start date is incorrect or impossible";
	}

	unless ($end_date) { 
		$err = "End date is incorrect or impossible";
	}

	# 	Check to make sure the tournament director exists.
	my @directors = Tab::Account->search( email => $director_email) if $director_email;
	my $director = $directors[0] if @directors;

	#	If you have an existing tournament, it's ok if there's no director email listed.
	#	If you have no existing tournament, you must have a director
	# 	If you have an email defined either way, you also must have a director. 

	if ($director_email &! $director) { 
		$err = "You have not listed a valid account email for the tournament contact.  Try again"
	}

	unless ($tourn || $director) { 
		$err = "You must list a valid contact email address for your tournament.  Try again";
	}

	if ($err) { 
		$m->print("<h3>Error encountered:</h4><p><b>$err</b></p><p>Please hit \"back\" and try again.\n");
		$m->abort;
	}

	if ($tourn)  { 
	
		$tourn->name($name);
		$tourn->director($director->id) if $director;
		$tourn->start($start_date);
		$tourn->end($end_date);
		$tourn->reg_start($reg_start_dt);
		$tourn->reg_end($reg_end_dt);
		$tourn->freeze_deadline($freeze_dt);
		$tourn->judge_deadline($judge_deadline_dt);
		$tourn->drop_deadline($drop_deadline_dt);
		$tourn->fine_deadline($fine_deadline_dt);
		$tourn->league($league->id);
		$tourn->approved($approved);
		$tourn->hidden($hidden);
		$tourn->update;
	
		$msg = "Changes saved to ".$tourn->name;

		$tourn->update;

	} else {  

		$tourn = Tab::Tournament->create( { 
			name => $name,
			league => $league->id,
			director => $director,
			start => $start_date,
			end => $end_date,
			reg_start => $reg_start_dt,
			reg_end => $reg_end_dt,
			freeze_deadline => $freeze_dt,
			judge_deadline => $judge_deadline_dt,
			drop_deadline => $drop_deadline_dt,
			fine_deadline => $fine_deadline_dt,
			approved => $approved,
			hidden => $hidden
		});

		$err = $tourn->name ." created ";

	}

	if ($copy_tourn_id) { 

		my $old_tourn = Tab::Tournament->retrieve($copy_tourn_id);

		my $start = $tourn->start;

		my $end = $tourn->end;

		my $ostart = $old_tourn->start;

		my $oend = $old_tourn->end;

		#Direct tournament settings.

		$tourn->judge_policy($old_tourn->judge_policy);

		$tourn->ballot_message($old_tourn->ballot_message);

		$tourn->invoice_message($old_tourn->invoice_message);

		$tourn->disclaimer($old_tourn->disclaimer);

		$tourn->update;

		#Copy over the method
		my $old_method = $old_tourn->method; 
		my $tm = $old_method->copy;
		$tm->is_standard(0);
		$tm->update;
		$tourn->method($tm->id);
		$tourn->update;

		#Tiebreakers come along with the method
		foreach my $otb ($old_method->tiebreaks) { 
			my $ntb = $otb->copy;
			$ntb->method($tm->id);
			$ntb->update;
		}

		#Sites
		foreach my $osit (Tab::TournSite->retrieve(tournament => $old_tourn->id)) {
			my $nsit = $osit->copy if $osit; 
			$nsit->tournament($tourn->id) if $nsit;
			$nsit->update if $nsit;
		}

		#Pools
		my %pool_translator = ();
		foreach my $op ($old_tourn->pools) {
			my $np = $op->copy;
			$np->tournament($tourn->id);
			$np->update;
			$pool_translator{$op->id} = $np->id;
		}

		#Items/Concessions
		foreach my $ocon ($old_tourn->items) {
			my $ncon = $ocon->copy;
			$ncon->tournament($tourn->id);
			$ncon->update;
		}

		#Sweep points
		foreach my $osw ($old_tourn->sweeps) {
			my $nsw = $osw->copy;
			$nsw->tournament($tourn->id);
			$nsw->update;
		}

		my %event_translator = ();

		#Judge groups

		foreach my $jg ($old_tourn->groups) { 

			my $njg = $jg->copy;

			$njg->tournament($tourn->id);

			if ($njg->deadline) { 
				my $deadline = $njg->deadline;
				my $days_offset = $deadline->delta_days($ostart);

				$deadline->set( month => $start->month);
				$deadline->set( day => $start->day);
				$deadline->set( year => $start->year);
				$deadline->subtract_duration($days_offset);

				$njg->deadline($deadline);
			}
	
			if ($njg->strike_reg_opens) { 
				my $strike_reg_opens = $njg->strike_reg_opens;
				my $days_offset = $strike_reg_opens->delta_days($ostart);
				$strike_reg_opens->set( month => $start->month);
				$strike_reg_opens->set( day => $start->day);
				$strike_reg_opens->set( year => $start->year);
				$strike_reg_opens->subtract_duration($days_offset);
				$njg->strike_reg_opens($strike_reg_opens);
			}

			if ($njg->strike_reg_closes) { 
				my $strike_reg_closes = $njg->strike_reg_closes;
				my $days_offset = $strike_reg_closes->delta_days($ostart);
				$strike_reg_closes->set( month => $start->month);
				$strike_reg_closes->set( day => $start->day);
				$strike_reg_closes->set( year => $start->year);
				$strike_reg_closes->subtract_duration($days_offset);
				$njg->strike_reg_closes($strike_reg_closes);
			}

			$njg->update;

			#Qualification Subsets
			my %subset_translator = ();

			#Quals
			foreach my $oq ($jg->quals) {
				my $nq = $oq->copy;
				$nq->judge_group($njg->id);
				$nq->tournament($tourn->id);
				$nq->update;
			}

			foreach my $qsb (Tab::QualSubset->search( judge_group => $jg->id) ) { 
				my $nqsb = $qsb->copy;
				$nqsb->judge_group($njg->id);
				$nqsb->update;
				$subset_translator{$qsb->id} = $nqsb->id;
			}

			#Registration pools
			foreach my $opg (Tab::PoolGroup->search( judge_group => $jg->id) ) {
				my $npg = $opg->copy;
				$npg->judge_group($njg->id);
				$npg->pool($pool_translator{$opg->pool->id}) if $opg->pool->id;
				$npg->update;
			}

			#Registration time bins
			foreach my $obin ($jg->bins) { 

				my $nbin = $obin->copy;
				$nbin->judge_group($njg->id);

				my $nstart = $nbin->start;
				my $nend = $nbin->end;

				#Offset in days from the start of the old tournament
				my $nstart_days_offset = $nstart->delta_days($ostart);
				my $nend_days_offset = $nend->delta_days($ostart);

				#Set to the first day of the new tournament
				$nstart->set( month => $start->month);
				$nstart->set( day => $start->day);
				$nstart->set( year => $start->year);

				$nend->set( month => $start->month);
				$nend->set( day => $start->day);
				$nend->set( year => $start->year);

				#Add in the offset
				$nstart->add_duration( $nstart_days_offset );
				$nend->add_duration( $nend_days_offset );

				#Set the new date/time
				$nbin->start($nstart);
				$nbin->end($nend);
				$nbin->update;	
			}
		
			#Events
			foreach my $ev ($jg->events) { 
				my $nev = $ev->copy;
				$nev->tournament($tourn->id);
				$nev->judge_group($njg->id);
				$nev->qual_subset($subset_translator{$ev->qual_subset->id}) if $ev->qual_subset;
		
				if ($nev->deadline) { 
					my $deadline = $nev->deadline;
					my $days_offset = $deadline->delta_days($ostart);
					$deadline->set( month => $start->month);
					$deadline->set( day => $start->day);
					$deadline->set( year => $start->year);
					$deadline->subtract_duration($days_offset);
					$nev->deadline($deadline);
					$njg->update;
				}

				$nev->update;

				$event_translator{$ev->id} = $nev->id;

				# Make the event directory
				system "/bin/mkdir -p $Tab::file_root/files/".$league->id."/tournaments/".$tourn->id."/events/".$nev->id;

				# Copy the ballots from the old tournament into it
				system "/bin/cp $Tab::file_root/files/".$league->id."/tournaments/".$tourn->id."/events/".$ev->id."/".$ev->ballot." $Tab::file_root/files/".$league->id ."/tournaments/". $tourn->id."/events/".$nev->id."/".$nev->ballot;

				#Copy the room pool assignments over
				foreach my $pool ($ev->room_pools) { 
					my $npo = $pool->copy;
					$npo->tournament($tourn->id);
					$npo->event($event_translator{$npo->event->id});
					$npo->update;
				}

			} # End of events

		} # End of judge groups


		# Timeslots
		# These must be translated to the new day, but not the hour.  In order.

		my @ntourn_days;

		foreach my $ots (sort {$a->start->epoch <=> $b->start->epoch} $old_tourn->timeslots) { 
	
			my $nts = $ots->copy;
			$nts->tournament($tourn->id);

			my $ntstart = $nts->start;
			my $ntend = $nts->end;
			my $ntstart_days_offset = $ntstart->delta_days($ostart);
			my $ntend_days_offset = $ntend->delta_days($ostart);

			$ntstart->set( month => $start->month);
			$ntstart->set( day => $start->day);
			$ntstart->set( year => $start->year);

			$ntend->set( month => $start->month);
			$ntend->set( day => $start->day);
			$ntend->set( year => $start->year);

			$ntstart->add_duration( $ntstart_days_offset );
			$ntend->add_duration( $ntend_days_offset );

			$nts->start($ntstart);
			$nts->end($ntend);
			$nts->update;

			# Rounds
			foreach my $or ($ots->rounds) { 

				my $nr = $or->copy;
				$nr->event($event_translator{$or->event->id});
				$nr->pool($pool_translator{$or->pool->id}) if $or->pool;
				$nr->preset(1) if $nr->type ne "prelim";
				$nr->timeslot($nts->id);
				$nr->site($or->site->id);
				$nr->update;

			}
		}
	}

	$tourn->league($league_id) if $league_id;
	$tourn->update;

	$m->redirect("$Tab::url_prefix/league/tourn_edit.mhtml?msg=$msg&tourn_id=".$tourn->id);

</%init>



