<%args>
	$round_id
	$filename
	$schools => undef
</%args>
<%init>
	
	my $round = Tab::Round->retrieve($round_id);
	my $tourn = $round->event->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->timeslot->start->set_time_zone($tz);

	my $flighted++ if $round->flighted > 1;

	my $filepath = $Tab::file_root."tmp/".$filename;

	open (TEXOUT, ">>$filepath.tex");

	my $tabular = "\\begin{tabular}{p{.25in}p{1.5in}p{2.25in}p{1.25in}p{1.25in}}\n";

	print TEXOUT "\\normalsize\n";
	print TEXOUT "\\begin{tabular}{p{1in}p{2in}p{3.5in}}\n";
	print TEXOUT " & & \\\\ \n";
	print TEXOUT ($round->label) ? "\\Large ". Tab::texify($round->label) : "\\Large Round ". Tab::texify($round->name);
	print TEXOUT " & \\Large Start: ".$start->hour_12.":".$start->strftime("%M")." ".$start->strftime("%p");
	print TEXOUT " & \\Large ". Tab::texify($round->event->name);
	print TEXOUT "\\\\ \n";
	print TEXOUT "\\end{tabular}\n";
	print TEXOUT "\\newline\n";

	print TEXOUT $tabular;
	print TEXOUT "\\rowcolor[rgb]{1.0,.95,.94}\[5.5pt\]\[5.5pt\]\n";
	print TEXOUT "\\large Flt & \\large Judge(s) & \\large Room & \\large Aff & \\large Neg \\\\ \n" if $flighted; 
	print TEXOUT "\\large & \\large Judge(s) & \\large Room & \\large Aff & \\large Neg \\\\ \n" unless $flighted; 
	print TEXOUT "\\end{tabular}\n";
	print TEXOUT "\\newline\n";

	my $event = $round->event;
	my $codes = $tourn->setting("schemat_display");

	Tab::Panel->columns(TEMP => "roomname");

	Tab::Panel->set_sql( schemat => "
		select panel.*, room.name as roomname
		from panel, room
		where panel.round = ? 
		and panel.room = room.id
		order by panel.letter");

	Tab::Panel->set_sql( schemat_roomless => "
		select panel.*, \"None\" as roomname
		from panel
		where panel.round = ? 
		and panel.room = 0
		order by panel.letter");

	my @panels = Tab::Panel->search_schemat($round->id);
	push (@panels, Tab::Panel->search_schemat_roomless($round->id));

	my @entries = $m->comp("/funclib/round_entries.mas", round => $round);
	my @judges = $m->comp("/funclib/round_judges.mas", round => $round);
	my @ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		next if $entry->dropped;
		next if $entry->dq;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $judge (@judges) { 
		push (@{$judges_by_panel{$judge->panelid}}, $judge);
	}

	@panels = sort {$a->roomname cmp $b->roomname} @panels;

	my $switch;

	foreach my $panel (@panels) { 
	
		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{.95,.95,.94}\[5.5pt\]\[5.5pt\]\n" if $switch++ %2;

		print TEXOUT $panel->flight if $flighted;
		print TEXOUT " & ";


		my $notfirst;
		foreach my $judge (@{$judges_by_panel{$panel->id}}) {
			print TEXOUT "\\\\ \n" if $notfirst; 
			print TEXOUT " * " if $judge->chair;
			print TEXOUT $judge->first." ".$judge->last;
		} 

		print TEXOUT " & ".$panel->roomname." & ";

		my $aff;
		my $neg;
		my $bye;

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

			if ($ballots_by_entry{$pc->id}) { 
				$bye = $pc if $panel->bye;
				$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
				$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
			}

		}

		if ($panel->bye) { 
			print TEXOUT $bye->code." & ";  
		} elsif ($aff) { 
			print TEXOUT $aff->code." & ";  
		} 

		if ($panel->bye) { 
			print TEXOUT "BYE \\\\ \n ";  
		} elsif ($neg) { 
			print TEXOUT $neg->code."\\\\ \n";  
		}

		print TEXOUT "\\end{tabular}\n";

	} 

</%init>


