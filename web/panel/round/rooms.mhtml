<%args>
	$account
	$round_id
	$return => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $round_type = $round->type;

	my $text = $account->first." ".$account->last." (".$account->email.") has repaneled the rooms in ".$round->realname." of ".$round->event->abbr;

	Tab::TournChange->create({ 
		type => 'tabbing',
		event => $round->event->id,
		tourn => $round->event->tourn->id,
		account => $account->id,
		text => $text
	});

	my @panels = $m->comp('/funclib/round_panels_ada.mas', round => $round);
	my @rooms = $m->comp("/funclib/clean_rooms.mas", round => $round);

	my %judge_already = ();
	my %judge_reserved = ();

	my %room_count = ();
	my @undone;
	my $flights = $round->flighted;
	my @first_set = @rooms;

	my %judge_count;
	my %panel_judges;
	my %panel_entries;
	my %panel_judge_count;
	my %panel_ada;

	foreach my $panel (@panels) { 

		next if $panel->room > 0;
		next if $panel->bye > 0;

		@{$panel_judges{$panel->id}} = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@{$panel_entries{$panel->id}} = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		foreach my $judge (@{$panel_judges{$panel->id}}){ 
			$judge_count{$judge->id}++;
			$panel_judge_count{$panel->id} += $judge_count{$judge->id}++;
			$panel_ada{$panel->id}++ if $judge->ada;
			$judge_reserved{$judge->id} = $judge->setting("room_reserved") unless $round_type eq "elim" || $round_type eq "final";
		}

		foreach my $entry (@{$panel_entries{$panel->id}}){ 
			$panel_ada{$panel->id}++ if $entry->ada;
		}

	}

	@panels = sort {$a->letter <=> $b->letter} @panels;
	@panels = sort {$panel_judge_count{$b->id} <=> $panel_judge_count{$a->id}} @panels;
	@panels = sort {$panel_ada{$b->id} <=> $panel_ada{$a->id}} @panels;

	my %used;

	foreach my $panel (@panels) { 

		next if $panel->bye > 0;
		next if $panel->room > 0;

		my $room;

		my @judges = @{$panel_judges{$panel->id}} if $panel_judges{$panel->id};

		foreach my $judge (@judges) { 
			if ($judge_reserved{$judge->id}) { 
				$room = Tab::Room->retrieve($judge_reserved{$judge->id}); 
			} else { 
				$room = $judge_already{$judge->id} unless $room; 
			}
		}

		my @ada_rooms;

		foreach my $room (@rooms) { 
			push @ada_rooms, $room if $room->ada;
		}

		$room = shift @ada_rooms if $panel_ada{$panel} && @ada_rooms;
		$used{$room}++ if $room;

		while (@first_set && not defined $room) { 
			$room = shift @first_set;
			undef $room if $used{$room};
		}

		if ($room && $room->id) { 
			$panel->room($room->id) if $room;
			$panel->update;
			$room_count{$room->id}++;
			foreach my $judge (@judges) { 
				$judge_already{$judge->id} = $room;
			}
		} else { 
			push @undone, $panel;
		}

	}

	my $oh_crap_ran_out;

	PANEL:
	foreach my $panel (@undone) { 

		$oh_crap_ran_out++;

		my @ada_rooms;

		foreach my $room (@rooms) { 
			push @ada_rooms, $room if $room->ada;
		}

		if ($panel_ada{$panel}) { 
			foreach my $room (@ada_rooms) { 
				next if $room_count{$room->id} >= $flights;
				$panel->room($room->id);
				$room_count{$room->id}++;
				$panel->flight($room_count{$room->id});
				$panel->update;
				$oh_crap_ran_out--;
				next PANEL;
			}
		}

		foreach my $room (@rooms) { 
			next if $room_count{$room->id} >= $flights;
			$panel->room($room->id);
			$room_count{$room->id}++;
			$panel->flight($room_count{$room->id});
			$panel->update;
			$oh_crap_ran_out--;
			next PANEL;
		}

	}

	my $msg = "Rooms have been assigned";
	my $full_err = "Insufficent rooms were available.  Some rounds do not have rooms!";
	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&disp=1&msg=$msg&fullmsg=$full_err");

</%init>
