<%args>
	$round
	$num_panels
</%args>
<%perl>

	use POSIX;

	my $event = $round->event;

	#Clear out the old
	foreach my $existing ($round->panels) { 
		$existing->delete;
	}

	my @entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 );
	my @schools = $m->comp("/funclib/event_schools.mas", event => $event);

	my @entries_by_school = ();
	foreach my $entry (@entries) { 
		push (@{$entries_by_school{$entry->school->id}}, $entry);
	}

	@schools = sort { (scalar @{$comps_by_school{$b->id}}) <=> (scalar @{$comps_by_school{$a->id}}) } @schools;
	my $panel_size = ceil(scalar @entries / $num_panels);
	my %panel_cohorts = ();

	my $count;
	my $cohort = 1;

	foreach my $school (@schools) { 

		foreach my $entry (@{$entries_by_school{$school->id}}) { 

			$count++;
			if ($count > $num_panels) { 
				$count = 1;
				$cohort++;
			}

			push (@{$panel_cohorts{$cohort}}, $entry);

		}

	}

	my $panel_count = $round->name - 1;
	my %panels = ();

	foreach $panel_cohort (keys %panel_cohorts) { 

		$panel_count++;
		my @panel_array = (1 .. $num_panels);

		unless ($panel_count == $round->name) { 
			foreach (1 .. $panel_count) { 
				my $tmp = shift @panel_array;
				push (@panel_array, $tmp);
			}
		}

		foreach my $position (@panel_array) { 
			my $entry = shift @{$panel_cohorts{$panel_cohort}};
			push (@{$panels{$position}}, $entry);
		}

	}

	foreach my $panel (keys %panels) { 
		my @entries = @{$panels{$panel}};
		Tab::debuglog("Panel $panel has entries ".@entries);
	}

</%perl>
