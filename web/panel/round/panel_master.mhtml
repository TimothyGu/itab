<%args>
	$tourn
	$account
	$event_id => undef
	$round_id => undef
	$all => undef
</%args>
<%init>

	my @events;
	my @rounds;

	my %num_panels_by_event = ();
	my %num_panels_by_round = ();
	
	$m->print('<div class="left huge">');
	$m->print('<h2>Creating rounds:</h2>');

	if ($all) { 

        my $text = $account->first." ".$account->last." (".$account->email.") has repaneled all events";

        Tab::TournChange->create({ 
            type => 'tabbing',
            tourn => $tourn->id,
            account => $account->id,
            text => $text
        });

		foreach my $event ($tourn->events) { 
			next unless $ARGS{"do_".$event->id};
			push (@events, $event);
			$num_panels_by_event{$event->id} = $ARGS{"num_panels_".$event->id};
			$num_panels_by_event{$event->id} = $ARGS{"force_num_panels_".$event->id} if $ARGS{"force_num_panels_".$event->id};
		}

	} elsif ($round_id) { 

		my $round = Tab::Round->retrieve($round_id);

        my $text = $account->first." ".$account->last." (".$account->email.") has repaneled round ".$round->realname." of ".$round->event->abbr;

        Tab::TournChange->create({ 
            type => 'tabbing',
            event => $round->event->id,
            tourn => $tourn->id,
            account => $account->id,
            text => $text
        });

		$num_panels_by_round{$round->id} = scalar $round->panels;
		push (@rounds, $round);
		push (@events, $round->event);

	} else { 

		my $event = Tab::Event->retrieve($event_id);

        my $text = $account->first." ".$account->last." (".$account->email.") has repaneled all of ".$event->abbr;

        Tab::TournChange->create({ 
            type => 'tabbing',
            event => $event->id,
            tourn => $tourn->id,
            account => $account->id,
            text => $text
        });

		push (@events, $event);

		foreach my $round ($event->rounds) { 
			next unless $ARGS{"do_".$round->id};
			push (@rounds, $round);
			$num_panels_by_round{$round->id} = $ARGS{"num_panels_".$round->id};
			$num_panels_by_round{$round->id} = $ARGS{"force_num_panels_".$round->id} if $ARGS{"force_num_panels_".$round->id};
		}

	}

	my @groups;

	my $event_count;
	my $round_count;

	foreach my $event (@events) { 

		$event_count++;
		my $round_robin++ if $event->setting("round_robin");

		my $num_panels = $num_panels_by_event{$event->id};

		if ($event->type eq "speech") { 

			my @event_rounds;
			@event_rounds = @rounds if @rounds;

			@event_rounds = Tab::Round->search( event => $event->id, type => "prelim") unless @event_rounds;

			foreach my $eround (@event_rounds) { 
			
				$round_count++;

				$m->flush_buffer unless $round_id;

				$num_panels = $num_panels_by_round{$eround->id} if $num_panels_by_round{$eround->id};

				$m->print("<p>Paneling ".$eround->realname." of ".$eround->event->name." into ".$num_panels." sections") unless $round_id;

				$m->comp("pair_speech.mas", round => $eround, num_panels => $num_panels) if $eround && $num_panels;

				if ($ARGS{"room_".$event->id}) {
				
					$m->print("...and assigning rooms");

					my @panels = sort {$a->letter cmp $b->letter} $eround->panels;

					foreach my $panel (@panels) { 
						my @rooms = $m->comp("/funclib/clean_rooms.mas", panel => $panel);
						my $room = shift @rooms;
						$panel->room($room->id) if $room;
						$panel->update;
					}

				}

				$m->print("....Done.</p>");

			}

		} elsif ($event->type eq "congress") { 

			my @event_rounds = @rounds if @rounds;
			@event_rounds = $event->rounds(type => "prelim") unless @event_rounds;

			my $wipe;

			foreach my $round (@event_rounds) { 
				$wipe++ if $ARGS{"wipe_".$round->id};
			}

			my $already_wiped;

			foreach my $round (@event_rounds) { 
				undef $wipe if $already_wiped;	
				$num_panels = $num_panels_by_round{$round->id} if $num_panels_by_round{$round->id};
				$m->comp("pair_congress.mas", round => $round, num_panels => $num_panels, wipe => $wipe);
				$already_wiped++ if $wipe;
			}

		} elsif ($event->type eq "wudc") { 

			my @event_rounds = @rounds if @rounds;

			foreach my $round (@event_rounds) { 
				$m->comp("pair_wudc.mas", round => $round);
			}

		} else { 

			my @event_rounds = @rounds if @rounds;

			unless (@event_rounds) { 
				@event_rounds = $event->rounds(type => "prelim");
			}

			my $done;
			foreach my $round (@event_rounds) { 
				next if $done;

				$num_panels = $num_panels_by_round{$round->id} if $num_panels_by_round{$round->id};

				if ($round->type eq "prelim") { 
					$m->comp("pair_preset.mas", round => $round);
				} else { 
					$m->comp("pair_debate.mas", round => $round);
				}

				$done++ if $round_robin;

			}

		}

	}

	$m->redirect("/panel/schemat/show.mhtml?round_id=".$round_id) if $round_id;

</%init>

	<h4>Entry assignment done</h4>

	<a class="third padmore inline dkgreen" href="/panel/report/disasters.mhtml">
		Check for Disasters
	</a>

	<a class="third padmore inline dkgreen" href="/panel/judge/index.mhtml">
		Panel Judges
	</a>

	</div>

	<& menu.mas, tourn => $tourn, whoami => "mass" &>
