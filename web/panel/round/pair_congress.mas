<%args>
	$round
	$num_panels
	$debug => 0
	$entries_ref => undef
</%args>
<%perl>

	use POSIX;
	my $event = $round->event;

	Tab::BallotValue->set_sql( delete_round => "
		delete ballot_value from ballot_value, ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
	");

	Tab::Ballot->set_sql( delete_round => "
		delete ballot from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
	");

	Tab::Panel->set_sql( delete_round => "
		delete from panel where round = ?
	");

	Tab::debuglog("Paneling ".$round->realname." of ".$round->event->name." id ".$round->event->id);

	if ($round->type eq "prelim") { 

		my @rounds = Tab::Round->search( event => $round->event->id, type => "prelim");
		
		Tab::debuglog("Round ".scalar @rounds." rounds total");

		foreach my $other (@rounds) { 

			next if $other->id == $round->id;

			next unless $m->comp('/funclib/round_entries.mas', round => $round);

			Tab::debuglog("Duplicating existing round ".$other->realname);

			Tab::BallotValue->sql_delete_round->execute($round->id);
			Tab::Ballot->sql_delete_round->execute($round->id);
			Tab::Panel->sql_delete_round->execute($round->id);

			foreach my $panel ($other->panels) { 
			
				Tab::debuglog("Duplicating existing chamber ".$panel->letter);

				my $room_id = $panel->room->id if $panel->room;

				my $new_panel = Tab::Panel->create({
					round => $round->id,
					room => $room_id,
					letter => $panel->id
				});

				foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) { 
					my $ballot = Tab::Ballot->create({
						panel => $new_panel->id,
						entry => $entry->id
					})
				}
			}

			return;
		
		}
	}

	my @all_entries;

	@all_entries = ${$entries_ref} if $entries_ref;
	@all_entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 ) unless @all_entries;

	$num_panels = 1 unless $num_panels;

	my %panel_cohorts = ();

	my $count;
	my $cohort = 1;

	my %size_of_school = ();
	my %school_by_entry = ();
	my @schools;

	foreach my $entry (@all_entries) { 
		my $entry_id = $entry->id;
		$school_by_entry{$entry_id} = $entry->school->id;
		push (@schools, $school_by_entry{$entry_id});
		$size_of_school{$school_by_entry{$entry_id}}++;
	}

	my $ranker = 1;
	my %school_rank = ();

	foreach (@schools) { 
		$school_rank{$_} = $ranker++;
	}

	use List::Util 'shuffle';
	@all_entries =  shuffle(@all_entries);
	@all_entries = sort {$school_rank{$a->school->id} <=> $school_rank{$b->school->id}} @all_entries;

	#Set up the initial panels
	my $max_size = ceil(scalar @all_entries / $num_panels);
	my $min_size = floor(scalar @all_entries/ $num_panels);
	my $remainder = (scalar @all_entries - ($num_panels * $min_size));

	Tab::debuglog("Min size is $min_size, max is $max_size, num_panels is $num_panels");

	my %panels = ();

	my @keys;

	foreach (1 .. $num_panels) { 
		push @keys, $_;
	}

	my %school_count;

	foreach my $entry (@all_entries) { 

		my $current_score = 3141591024515;   #why yes I am lazy...
		my $chosen_key;

		KEY:
		foreach my $key (@keys) { 

			next KEY if $panels{$key} && scalar @{$panels{$key}} >= $max_size;

			if ($panels{$key} && scalar @{$panels{$key}} == $min_size) {
				next KEY unless $remainder > 0;
			}

			if ($school_count{$school_by_entry{$entry->id}."-".$key} < $current_score) { 
				$chosen_key = $key;
			}
			
		}

		$remainder-- if $panels{$chosen_key} && scalar @{$panels{$chosen_key}} == $min_size;
		push (@{$panels{$chosen_key}}, $entry->id);
		$school_count{$school_by_entry{$entry->id}."-".$chosen_key}++;

		my $k = shift @keys;
		push (@keys, $k);

	}

	my @panel_keys = sort keys %panels;

	my $no_improvement = 1;

	my @judges = $m->comp("/funclib/round_judges.mas", round => $round) unless $m->comp("/funclib/round_entries.mas", round => $round);
	my @judge_keys;

	my %judge_panel = ();
	foreach my $judge (@judges) { 
		push (@{$judge_panel{$judge->panelid}}, $judge->id);
		push (@judge_keys, $judge->panelid);
	}

	my %jseen = (); 
	@judge_keys = grep { ! $jseen{$_} ++ } @judge_keys;

	my @rooms = $m->comp("/funclib/round_rooms.mas", round => $round);

	my @clean_rooms = $m->comp("/funclib/clean_rooms.mas", round => $round);

	#Clear out the old


	Tab::BallotValue->sql_delete_round->execute($round->id);
	Tab::Ballot->sql_delete_round->execute($round->id);
	Tab::Panel->sql_delete_round->execute($round->id);

	my $letter = 1;

	foreach my $panel_key (@panel_keys) { 

		my $room = shift @rooms if @rooms;
		my $room_id = 0;
		$room_id = $room->id if $room;

		my $jpanel = shift @judge_keys if @judge_keys;
		my @judge_ids = @{$judge_panel{$jpanel}} if $jpanel;
		@judge_ids = ("0") unless @judge_ids;

		my @entries = @{$panels{$panel_key}};

		my $panel = Tab::Panel->create({
			round => $round->id,
			room => $room_id,
			letter => $panel_key
		});

		foreach my $judge_id (@judge_ids) { 

			my $position;

			foreach my $entry (@entries) { 

				$position++;

				next unless $entry;
				my $ballot = Tab::Ballot->create({
					panel => $panel->id,
					judge => $judge_id,
					entry => $entry,
					speakerorder => $position
				})

			}
		
		}

		$letter++;
	}

	Tab::debuglog("Done") if $debug;
	return;

</%perl>
