<%args>
	$round_id
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my @panels = sort {$a->letter <=> $b->letter} $round->panels;

	my $num_judges = $round->judges;
	$num_judges = 1 unless $round->judges;

	$m->comp("/funclib/round_clear_judges.mas", round => $round);

	if ($round->event->type eq "wudc") { 

		my %panel_judges;
		my %used_judges;

		foreach my $panel (@panels) { 
			@{$panel_judges{$panel->id}} = $m->comp("/funclib/clean_judges.mas", panel => $panel, wudc => "true");
		}

		my @pass_3 = @panels;
		my @pass_2 = @panels;

		foreach my $panel (@panels, @pass_2, @pass_3) { 
			
			my @cans = @{$panel_judges{$panel->id}};

			my $judge;
			my $empty;

			while (@cans && not defined $judge && not defined $empty) { 

				$empty++ if scalar @cans == 0;

				$judge = shift @cans;
				$empty++ unless $judge;
				next unless $judge;

				undef $judge if $used_judges{$judge->id};
			}

			$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge => $judge) if $judge;
			$used_judges{$judge->id}++ if $judge;
		}

	} else { 

		foreach my $panel (@panels) { 

			my @judges = $m->comp("/funclib/clean_judges.mas", panel => $panel);

			foreach (1 .. $num_judges) { 
				my $judge = shift @judges if @judges;
				$m->comp("/funclib/panel_judgeadd.mas", panel => $panel, judge => $judge) if $judge;
			}

		}

	}

	my $msg = "Judges have been assigned";

	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg");

</%init>
