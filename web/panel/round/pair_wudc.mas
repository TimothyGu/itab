<%args>
	$round
	$debug => 0
	$entries_ref => undef
</%args>
<%perl>

	use POSIX;
	use List::Util 'shuffle';
	my $event = $round->event;

	Tab::debuglog("Paneling ".$round->realname." of ".$event->name) if $debug;

	my @entries = ${$entries_ref} if $entries_ref;

	@entries = $event->entries( unconfirmed => 0, waitlist => 0, dropped => 0, dq => 0 ) unless @entries;

	Tab::BallotValue->set_sql( get_ranks => "
		select distinct ballot_value.*, entry.id as entryid
		from ballot, entry, ballot_value
		where entry.event = ? 
		and entry.id = ballot.entry
		and ballot.id = ballot_value.ballot
		and ballot_value.tag = \"rank\"
		order by entry.id
	");
	
	my @values = Tab::BallotValue->search_get_ranks($event->id);

	my %entry_score = ();

	foreach my $value (@values) { 
		$entry_score{$value->entryid} += (4 - $value->value);
	}

	my %positions = ();
	my @other_ballots = $m->comp("/funclib/other_ballots.mas", round => $round);

	foreach my $ballot (@other_ballots) { 
		next unless $ballot->chair;
		$positions{$ballot->entry->id."-".$ballot->speakerorder}++;
	}

	my %can_do = ();

	foreach my $entry (@entries) { 

		my %position_count = ();

		my $min_count;

		foreach my $position ( 1 .. 4) {
			$position_count{$position}++ if $positions{$entry->id."-".$position};
			$min_count = $position_count{$position} if $min_count > $position_count{$position};
		}

		foreach my $position (1 .. 4) { 
			$can_do{$entry->id."-".$position}++ if $position_count{$position} == $min_count;
		}

	}

	my %panels = ();
	my $panel_count;

	@entries = shuffle(@entries);
	@entries = sort {$entry_score{$b->id} <=> $entry_score{$a->id}} @entries;

	while (@entries) {

		$panel_count++;

		my $min_score = $entry_score{$entries[3]->id};

		foreach my $position (1 .. 4) { 

			next unless @entries;
			my $victim;
			my $index;
			
			ENTRY:
			foreach my $entry (@entries) { 
				if ($can_do{$entry->id."-".$position} && $entry_score{$entry->id} >= $min_score) {
					$victim = $entry;
					last ENTRY;
				} else {
					$index++;
				}
			}

			unless ($victim) { 

				# If we haven't found someone within the appropriate bracket
				# who can speak here, just pick some poor sucker.

				ENTRY:
				foreach my $entry (@entries) { 
					if ($entry_score{$entry->id} >= $min_score) {
						$victim = $entry;
						last ENTRY;
					} else {
						$index++;
					}
				}

			}

			splice @entries, $index, 1 unless $index > scalar @entries;
			$panels{$panel_count."-".$position} = $victim;
		}

	}

	#Out with the old.

	Tab::BallotValue->set_sql( delete_round => "
		delete ballot_value from ballot_value, ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = ballot_value.ballot
	");

	Tab::Ballot->set_sql( delete_round => "
		delete ballot from ballot, panel
		where panel.round = ?
		and panel.id = ballot.panel
	");

	Tab::Panel->set_sql( delete_round => "
		delete from panel where round = ?
	");

	Tab::BallotValue->sql_delete_round->execute($round->id);
	Tab::Ballot->sql_delete_round->execute($round->id);
	Tab::Panel->sql_delete_round->execute($round->id);

	foreach my $key (1 .. $panel_count) { 

		my $bracket;

		foreach my $position (1 .. 4) { 
			my $entry = $panels{$key."-".$position};
			$bracket = $entry_score{$entry->id} if $bracket < $entry_score{$entry->id};
		}

		$bracket = 0 unless $bracket;
		
		my $panel = Tab::Panel->create({
			round => $round->id,
			letter => $key,
			bracket => $bracket
		});

		foreach my $position (1 .. 4) { 

			my $entry = $panels{$key."-".$position};

			if ($entry) { 
				my $ballot = Tab::Ballot->create({
					panel => $panel->id,
					judge => 0,
					entry => $entry,
					speakerorder => $position
				})
			}
		}
	}

	Tab::debuglog("Done") if $debug;

	return;

</%perl>
