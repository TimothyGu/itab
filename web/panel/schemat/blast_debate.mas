<%args>
	$round => undef
	$panel => undef
	$debug => undef
	$message => undef
</%args>
<%init>

	$message = substr($message, 0, 50);

	$round = $panel->round if $panel;
	my $event = $round->event;
	my $tourn = $event->tourn;

	my $nosides++ if $event->type eq "pf" || $round->type eq "elim";

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my @panels;
	my @judges;
	my @entries;
	my @ballots;

	unless ($panel) { 
	
		Tab::Panel->columns(TEMP => "roomname");

		Tab::Panel->set_sql( schemat => "
			select panel.*, room.name as roomname
			from panel, room
			where panel.round = ? 
			and panel.room = room.id
			order by panel.letter");

		Tab::Panel->set_sql( schemat_roomless => "
			select panel.*, \"None\" as roomname
			from panel
			where panel.round = ? 
			and panel.room = 0
			order by panel.letter");

		@panels = Tab::Panel->search_schemat($round->id);
		push (@panels, Tab::Panel->search_schemat_roomless($round->id));

		@judges = $m->comp("/funclib/round_judges.mas", round => $round);
		@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		@ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	} else { 

		push @panels, $panel;
		@judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		@ballots = $panel->ballots;

	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		next if $entry->dropped;
		next if $entry->dq;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
		push (@{$entries_by_panel{$panel->id}}, $entry) if $panel;
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $panel (@panels) { 
		foreach my $judge ($m->comp('/funclib/panel_judges.mas', panel => $panel)) {
			push @{$judges_by_panel{$panel->id}}, $judge;
		}
	}

	unless ($panel) { 
		@panels = sort {$a->roomname cmp $b->roomname} @panels;
		@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;
	}

	my %school_text = ();

	my %done = ();

	foreach my $panel (@panels) { 

		my $aff;
		my $neg;
		my $bye;

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

			next if $done{"entry_".$pc->id};
			$done{"entry_".$pc->id}++;


			if ($ballots_by_entry{$pc->id}) { 
				$bye = $pc if $panel->bye;
				$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
				$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
			}

			my $own_txt = "\n".$pc->code." ";

			if ($event->type eq "pf" || $panel->round->type eq "elim") { 
				if ($bye) { 
					$own_txt .= "is the BYE" if $bye;
				} elsif ($aff && $neg) { 
					$own_txt .= "vs ".$aff->code if $pc->id == $neg->id;
					$own_txt .= "vs ".$neg->code if $pc->id == $aff->id;
				} 
			} else { 
				if ($bye) { 
					$own_txt .= "is the BYE" if $bye;
				} elsif ($aff && $neg) { 
					$own_txt .= "is AFF vs ".$neg->code if $pc->id == $aff->id;
					$own_txt .= "is NEG vs ".$aff->code if $pc->id == $neg->id;
				}
			}

			my $num_judges = scalar @{$judges_by_panel{$panel->id}} if $judges_by_panel{$panel->id};

			unless ($bye) { 
				$own_txt .= "\nJudge";
				$own_txt .= "s" if $num_judges > 1;
				$own_txt .= ": ";
			}

			my $notfirst;
			foreach my $judge (@{$judges_by_panel{$panel->id}}) {
				$own_txt .= " - " if $notfirst;
				$own_txt .= $judge->last.", ".substr($judge->first,0,5)." ";
				$notfirst++;
			}

			$own_txt .= "\n";

			my $start = $round->timeslot->start->set_time_zone($tz);

			$own_txt .= "In ".$panel->room->name."\n" if $panel->room && not defined $bye;

			$own_txt .= "Flight ".$panel->flight."\n" if $panel->round->flighted > 1 && not defined $bye;

			$own_txt .= "Start: ".Tab::shorttime($start)." ".$start->time_zone->short_name_for_datetime($start) unless $bye;

			$school_text{$pc->school->id} .= $own_txt." \n\n";

			$own_txt .= "\n$message" if $message;

			foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $pc)) { 
			
				Tab::debuglog("To $pc follower $followr?");

				$m->comp( "/funclib/send_notify.mas", from => 'iDebate Tabroom <live@tabroom.com>', 
					to => $follower, 
					subject => $round->label." ".$pc->code, 
					body => $own_txt 
				);

			}

		}

		foreach my $judge (@{$judges_by_panel{$panel->id}}) {

			next if $done{"judge_".$judge->id};
			$done{"judge_".$judge->id}++;

			my $start = $round->timeslot->start->set_time_zone($tz);

			my $own_txt = "\n".$judge->last." judging ".$round->realname;
			$own_txt .= "\nRoom: ".$panel->room->name."\n" if $panel->room;

			if ($event->type eq "pf" || $round->type eq "elim") { 
				$own_txt .= $aff->code if $aff;
				$own_txt .= " vs ";
				$own_txt .= $neg->code if $neg;
			} else { 
				$own_txt .= "AFF: ".$aff->code if $aff;
				$own_txt .= "  NEG: ".$neg->code if $neg;
			}
			$own_txt .= "\nFlight ".$panel->flight if $panel->round->flighted > 1 && not defined $bye;
			$own_txt .= "\nStart: ".Tab::shorttime($start)." ".$start->time_zone->short_name_for_datetime($start);

			$school_text{$judge->school->id} .= $own_txt."\n\n" if $judge->school;
			$own_txt .= "\n$message" if $message;

			foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge)) { 

				$m->comp( "/funclib/send_notify.mas", from => 'iDebate Tabroom <live@tabroom.com>', 
					to => $follower, 
					subject => $round->label." ".$judge->last, 
					body => $own_txt 
				);
		
			}

		}

	}

	foreach my $school_id (keys %school_text) { 

		my $school = Tab::School->retrieve($school_id);

		foreach my $follower ($m->comp("/funclib/school_follower.mas", school_id => $school_id)) { 

			my $own_txt = "\nFull round pairing for ".$school->short_name.":\n";
			$own_txt .= $school_text{$school_id};
			$own_txt .= "\n$message" if $message;

			$m->comp( "/funclib/send_notify.mas", from => 'iDebate Tabroom <live@tabroom.com>', 
				to => $follower,
				subject => $round->event->abbr." ".$round->label,
				body => $own_txt,
				email => "yes"
			);
		}
	}

</%init>
