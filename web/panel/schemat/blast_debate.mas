<%args>
	$round
	$debug => undef
</%args>
<%init>

	my $event = $round->event;
	my $tourn = $event->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	
	Tab::Panel->columns(TEMP => "roomname");

	Tab::Panel->set_sql( schemat => "
		select panel.*, room.name as roomname
		from panel, room
		where panel.round = ? 
		and panel.room = room.id
		order by panel.letter");

	Tab::Panel->set_sql( schemat_roomless => "
		select panel.*, \"None\" as roomname
		from panel
		where panel.round = ? 
		and panel.room = 0
		order by panel.letter");

	my @panels = Tab::Panel->search_schemat($round->id);
	push (@panels, Tab::Panel->search_schemat_roomless($round->id));

	my @entries = $m->comp("/funclib/round_entries.mas", round => $round);
	my @judges = $m->comp("/funclib/round_judges.mas", round => $round);
	my @ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	my %entries_by_panel = ();

	foreach my $entry (@entries) { 
		next if $entry->dropped;
		next if $entry->dq;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) { 
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $judge (@judges) { 
		push (@{$judges_by_panel{$judge->panelid}}, $judge);
	}

	@panels = sort {$a->roomname cmp $b->roomname} @panels;
	@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;

	foreach my $panel (@panels) { 

		my $aff;
		my $neg;
		my $bye;

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

			if ($ballots_by_entry{$pc->id}) { 
				$bye = $pc if $panel->bye;
				$aff = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "1";
				$neg = $pc if ${$ballots_by_entry{$pc->id}}[0]->side == "2";
			}

		}

		foreach my $pc (@{$entries_by_panel{$panel->id}}) { 

			my $own_txt = $pc->code." is ";

			if ($bye) { 
				$own_txt .= "BYE" if $bye;
			} elsif ($aff && $neg) { 
				$own_txt .= " AFF vs ".$neg->code if $pc->id == $aff->id;
				$own_txt .= " NEG vs ".$aff->code if $pc->id == $neg->id;
			}

			$own_txt .= "\n";
			
			foreach my $judge (@{$judges_by_panel{$panel->id}}) {
				$own_txt .= $judge->last." ".substr($judge->first,0,2)." ";
			}

			$own_txt .= "\n";

			my $start = $round->timeslot->start->set_ime_zone($tz);

			$own_txt .= " In ".$panel->roomname."\n";
			$own_txt .= " Start: ".Tab::shorttime($start)." ".$start->time_zone->short_name_for_datetime($start);

			foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $pc)) { 

				$m->comp( "/funclib/send_notify.mas", from => 'iDebate Tabroom <live@tabroom.com>', 
					to => $follower, 
					subject => $round->label." ".$pc->code, 
					body => $own_txt 
				);

			}

		}

		foreach my $judge (@{$judges_by_panel{$panel->id}}) {

			my $start = $round->timeslot->start->set_time_zone($tz);

			my $own_txt = $judge->last." judging ";
			$own_txt .= " in ".$panel->roomname."\n";
			$own_txt .= "AFF: ".$aff->code;
			$own_txt .= " NEG: ".$neg->code;
			$own_txt .= " Start: ".Tab::shorttime($start)." ".$start->time_zone->short_name_for_datetime($start);

			foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge)) { 

				$m->comp( "/funclib/send_notify.mas", from => 'iDebate Tabroom <live@tabroom.com>', 
					to => $follower, 
					subject => $round->label." ".$judge->last, 
					body => $own_txt 
				);
		
			}

		}

	}

</%init>
