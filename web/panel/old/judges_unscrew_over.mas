<%args>
	$session
	$group_id
	$return => undef
</%args>
<%init> 

	my @judges = Tab::Judge->search( active => 1, judge_group => $group_id );
	my %judge_panel_numbers = ();
	my %judge_panels;
	my %panels_numbers;
	my @all_panels;

	foreach my $judge (@judges) { 
		my @panels = $judge->panels;
		push (@{$judge_panels{$judge->id}}, @panels);
		push (@all_panels, @panels);
	}

	my $num_panels = scalar @all_panels;
	my $divisor = $num_panels/( scalar @judges ); 
	my $maximum = POSIX::ceil($divisor);
	my $minimum = POSIX::floor($divisor);

	JUDGE:
	foreach my $judge (@judges) { 

		my $num_panels = scalar @{$judge_panels{$judge->id}}; 
		$num_panels += $judge->standby_pools;

		next if $num_panels <= $minimum;

		my $index = -1;

		PANEL:
		foreach my $panel (@{$judge_panels{$judge->id}}) {	
			next if $panel->round->preset;
			next if $panel->round->timeslot->id == 659;
			next unless $panel->event->type eq "speech";
			next unless $panel->type eq "prelim";

			$index++;
			my @clean_judges = $m->comp("/funclib/clean_judges.mas", 
						panel_id => $panel->id, session => $session);

			next unless @clean_judges;
			@clean_judges = sort { (scalar @{$judge_panels{$a->id}}) <=> (scalar @{$judge_panels{$b->id}}) } @clean_judges;

		 	if ($num_panels > $maximum) {
				next PANEL unless ((scalar @{$judge_panels{$clean_judges[0]->id}}) <= $minimum);
			} else {
				next PANEL unless ((scalar @{$judge_panels{$clean_judges[0]->id}}) < $minimum);
			}
		
			$m->comp("judges_trade.mas", panel_id => $panel->id, old_judge_id => $judge->id, new_judge_id => $clean_judges[0]->id);
			push (@{$judge_panels{$clean_judges[0]->id}}, $panel);
			splice (@{$judge_panels{$judge->id}}, $index, 1); 
			$num_panels--;

			next JUDGE if $num_panels == $minimum;
		}	

	}
	
	return if $return;

	$m->redirect($Tab::url_prefix."/panel/judgechart_show.mhtml?group_id=$group_id");

</%init>
