<%args>
	$tourn
	$timeslot_id 
</%args>
<%perl>

	my $timeslot = Tab::Timeslot->retrieve($timeslot_id);
	my @events;
	my $err;

	unless ($ARGS{"add_new"}) { 

		foreach my $round ($timeslot->rounds) {

			my $preset = $ARGS{$round->id."_preset"};
			$preset = 0 unless $preset;

			$round->label($ARGS{$round->id."_label"});
			$round->type($ARGS{$round->id."_type"});
			$round->preset($preset);
			$round->published($ARGS{$round->id."_published"});
			$round->no_first_year($ARGS{$round->id."_no_first_year"});
			$round->event($ARGS{$round->id."_event_id"});
			$round->site($ARGS{$round->id."_site_id"});
			$round->pool($ARGS{$round->id."_pool_id"});
			$round->update;

			push (@events, $round->event);

		} 
	}	

	if ($ARGS{"add_new"}) { 

		my $has_a_prelim;

		my $event = Tab::Event->retrieve($ARGS{"new_event_id"});

		my @existing_round = Tab::Round->search(
				event => $event->id,
				timeslot => $ARGS{"timeslot_id"});

		foreach my $round (@existing_round) {

			next if $has_a_prelim;

			if ($round->type eq "prelim") {

				# Can't have two prelims in the same timeslot

				$err = "BIG HONKING ERROR: You have attempted to schedule a
				round in the same timeslot that ".$event->name." already has a
				prelim in.  That does not work.  Try again.";

				$has_a_prelim++;

			} else {
		
				$err .= " WARNING: This timeslot already as a round of ".$event->name."
				scheduled in it.  Delete the spare round if this is in error.";

			}
		}

		unless ($has_a_prelim) { 

			my $preset = $ARGS{"new_preset"};
			$preset = 0 unless $preset;

			my $round = Tab::Round->create({
				name => $ARGS{"new_next_round"},
				label => $ARGS{"new_label"},
				type => $ARGS{"new_type"},
				preset => $preset,
				pool => $ARGS{"new_pool_id"},
				published => $ARGS{"new_published"},
				no_first_year => $ARGS{"new_no_first_year"},
				timeslot => $ARGS{"timeslot_id"},
				event => $ARGS{"new_event_id"},
				site => $ARGS{"new_site_id"}
			});

			push (@events, $round->event);

			if ($ARGS{"new_type"} ne "prelim") {
				$round->preset(1);
				$round->update;
			}

			unless ($ARGS{"new_preset"}) { 
				$round->preset(0);
				$round->update;
			}
		}
	} # end of if round

	# uniq
    my %seen = ();
    @events = grep { ! $seen{$_->id} ++ } @events;

	foreach my $event (@events) { 
		$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);
	}
	
	$m->redirect($Tab::url_prefix."/panel/timeslot_rounds.mhtml?timeslot_id=$timeslot_id&err=$err");

</%perl>

