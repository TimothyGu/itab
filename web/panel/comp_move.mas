<%args>
	$entry_id => undef
	$entry_code => undef
	$panel_id
	$tourn
	$err => undef
	$shut_up => undef
	$back => undef
	$return => undef
	$debug => undef
</%args>
<%init>

	my $new_panel = Tab::Panel->retrieve($panel_id);
	my $entry;

	if ($entry_id) { 
		$entry = Tab::Entry->retrieve($entry_id);
	} elsif ($entry_code) { 
	
		my @entry_cans  = Tab::Entry->search( 
			code => $entry_code, 
			event => $new_panel->round->event) if $entry_code;

		$entry = shift @entry_cans unless $entry;
	}

	unless ($entry) { 
		
		$m->print("<p class=\"err\">No competitor with code $entry_code found in this event.  Hit back and try again</p>");
		$m->abort;

	}

	my $round  = $new_panel->round;
	my $event  = $entry->event;
	my @old_panels = $entry->panels;
	my $old_panel;

	my $msg;

	foreach my $op (@old_panels) { 
		my $o_round = $op->round;
		$old_panel = $op if $o_round->id == $round->id; 
	}

	my @old_ballots = Tab::Ballot->search( 
			panel => $old_panel->id, 
			entry => $entry->id) if ($old_panel);

	my $order = 0;
	my $seed;
	
	foreach my $old (@old_ballots) {
		$order = $old->speakerorder;
		$seed = $old->seed;
		$old->delete;
	}

	my @judges = $new_panel->judges;
	
	foreach my $judge (@judges) { 
	
		my $ballot = Tab::Ballot->create({
			judge => $judge->id,
			panel => $new_panel->id,
			entry  => $entry->id,
			seed  => $seed,
			speakerorder  => $order,
			speechnumber => 1
		});
		
	} 
	
	unless (@judges) { 
	
		my $ballot = Tab::Ballot->create({ 
			panel => $new_panel->id,
			entry  => $entry->id,
			seed  => $seed,
			speakerorder  => $order,
			speechnumber => 1
		});	
		
	}
	
	if ($event->type eq "congress") { 
	
		#Have to move them in the other sessions as well. 
		my @all_panels = Tab::Panel->search( 
				event => $event->id, 
				letter => $new_panel->letter );		
	
		foreach my $other_panel (@all_panels) { 
		
			my $other_panel_round = $other_panel->round;

			next if ($other_panel_round->id eq $round->id);

			my $other_old_panel;

			foreach my $op (@old_panels) { 
				my $other_old_round = $op->round;
				$other_old_panel = $op if $other_old_round->id == $other_panel_round->id; 
			}

			my @other_old_ballots = Tab::Ballot->search( 
				panel => $other_old_panel->id, 
				entry => $entry->id
			) if $other_old_panel;
	
			foreach my $old (@other_old_ballots) {
				$old->delete;
			}

			my @other_judges = $other_panel->judges;
	
			foreach my $judge (@other_judges) { 
	
				my $ballot = Tab::Ballot->create({
					judge => $judge->id,
					panel => $other_panel->id,
					entry  => $entry->id,
					speechnumber => 1
				});
		
			} 
	
			unless (@other_judges) { 
	
				my $ballot = Tab::Ballot->create({ 
					panel => $other_panel->id,
					entry  => $entry->id,
					speechnumber => 1
				});	
		
				}
			
			} #end of foreach other old panel
	
	} # end of event type eq congress.

	system "$Tab::logger Moving ".$entry->code." from panel ". $old_panel->letter ." into ".$new_panel->letter if $old_panel && $debug;

	unless ($shut_up eq "yes") {

		my @old_moves = $entry->changes;

		foreach my $om (@old_moves) { 
#			next if $om->type eq "add";
#			my $om_panel = $om->panel;
#			my $om_round = $om_panel->round;
#			$om->delete if ($om_round->id eq $round->id);
		}

		my $move = Tab::Change->create({
			type 	   => "move",
			tournament => $tourn->id,
			event      => $event->id,
			entry 	   => $entry->id,
			panel      => $new_panel->id
		});
	
		$move->moved_from($old_panel->id) if $old_panel;
		$move->update;

		my $round_id = $round->id;

		$msg =  $entry->code ." moved from ".$old_panel->letter." to panel ".$new_panel->letter if $old_panel;
		$msg =  $entry->code ." added to panel ".$new_panel->letter unless $old_panel;

		return $msg if $return;
		$m->redirect("$Tab::url_prefix/panel/rebalance.mhtml?round_id=$round_id&err=$msg") if $back eq "rebalance";
		$m->redirect("$Tab::url_prefix/panel/entry_edit.mhtml?round_id=$round_id&entry_id=$entry_id&err=$msg") if $back eq "entry_edit";
		$m->redirect("$Tab::url_prefix/panel/entry_edit.mhtml?entry_id=".$entry->id."&round_id=$round_id&err=$msg");
	
	} else { 
	
		$m->redirect("$Tab::url_prefix/panel/manual_assign.mhtml?panel_id=".$new_panel->id) 
			if $return eq "manual";

		$msg =  $entry->code ." moved from ".$old_panel->letter." to panel ".$new_panel->letter if $old_panel;
		return $msg;
	}

</%init>
