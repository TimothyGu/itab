<%args>
	$round_id
	$return_to => undef
	$debug => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);
	my $tourn = $round->event->tournament;
	my $circuit = $tourn->circuit;
	my @all_panels = $round->panels;

	my $err;

	system "$Tab::logger Rebalancing out round ".$round->name if $debug;

	foreach my $panel ($round->panels) { 

		system "$Tab::logger Figuring out panel ".$panel->letter if $debug;
	
		# If the largest panel is 2 or more competitors bigger than this one,
		# then we have work to do:

		@all_panels = sort { scalar $a->comps <=> scalar $b->comps } @all_panels;
		my $largest = pop @all_panels;
		push (@all_panels, $largest);

		system "$Tab::logger Calculating largest panel size" if $debug;

		my $max_size = scalar $largest->comps;

		system "$Tab::logger Calculating my panel size" if $debug;
		my $diff = $max_size - (scalar $panel->comps);

		system "$Tab::logger Difference is $diff" if $debug;

		while ( $diff > 1 ) { 
		
			system "$Tab::logger Difference is $diff" if $debug;

			# we only need to be largest panel size - 1, not the size of the largest panel

			foreach (2 .. $diff) { 

				system "$Tab::logger Searching kids outside this panel" if $debug;
				# grab the best kid
				my @comps = Tab::Comp->search_not_mine($max_size, $round->id);

				my %comps_by_score = ();
				my $best_kid;

				system "$Tab::logger Sorting those kids by score" if $debug;

				foreach my $comp (@comps) {   
					my $score = $panel->score($comp);
					$best_kid = $comp if $score == 0 && $panel->clean_judges($comp);
					last if $best_kid;
					$comps_by_score{$comp->id} = $score;
				}


				unless ($best_kid) { 
				
					system "$Tab::logger Selecting the best, non-optimal child" if $debug;

					@comps = sort {$comps_by_score{$a->id} <=> $comps_by_score{$b->id}} @comps;

					foreach my $kid (@comps) { 
						my $clean = $panel->clean_judges($kid);
						$best_kid = $kid if $clean;
						last if $best_kid;
					}
				}

				if ($best_kid) { 

					my $shut_up = "yes" if $return_to eq "Notrack";

					system "$Tab::logger Moving the kid around" if $debug;

					$err .= $m->comp("/panel/comp_move.mas", 	
										shut_up => $shut_up,
										return => "yes",
									 	tourn => $best_kid->school->tournament,
										comp_id => $best_kid->id, 
										panel_id => $panel->id );

					system "$Tab::logger Done move" if $debug;

				}

			} # end of foreach

			@all_panels = sort { scalar $a->comps <=> scalar $b->comps } @all_panels;
			$largest = pop @all_panels;
			push (@all_panels, $largest);

			$max_size = scalar $largest->comps;
			$diff = $max_size - (scalar $panel->comps);

		} # end if panel is more than 2 smaller than smallest

		last unless $round->unbalanced;

	} #end of foreach panel

	return if $return_to eq "Notrack";

	$m->redirect("$Tab::url_prefix/panel/schemat_show.mhtml?round_id=".$round_id."&event_id=".$round->event->id."&err=$err");

</%init>


