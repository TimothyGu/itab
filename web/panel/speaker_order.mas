<%args>
	$tourn
	$timeslot_id => undef
	$err => undef
	$round_id => undef
	$event_id => undef
	$debug => undef
	$return => undef
</%args>
<%init>

#  	Push this into SQL when you get the chance. 

	system "$Tab::logger Setting up the array of rounds" if $debug;

	my @rounds = Tab::Round->search( timeslot => $timeslot_id ) if $timeslot_id;
	@rounds = Tab::Round->search( event => $event_id) if $event_id;
	push (@rounds, Tab::Round->retrieve($round_id)) if $round_id;
	@rounds = $tourn->prelims unless @rounds;

	my @panels;


	foreach my $round (@rounds) { 
		next if $round->preset;
		push (@panels, $round->panels); 
	}


	foreach my $panel (@panels) { 
		
		system "$Tab::logger Randomizing students in ".$panel->event->abbr." ".$panel->letter if $debug;

		my @comps = $panel->comps;

		foreach my $comp (@comps) {

			next if $comp->dropped;
			next if $comp->waitlist;

			my $rand = int(rand(99));

			my @ballots = Tab::Ballot->search( comp => $comp->id, panel => $panel->id);

			foreach my $ballot (@ballots) { 

				$ballot->speakerorder($rand);
				$ballot->update;

			}
		}
	}

	my $num_panels;

	foreach my $panel (@panels) { 

		$num_panels .= $panel->id." ";

		system "$Tab::logger Normalizing order in ".$panel->event->abbr." ".$panel->letter if $debug;

		my $count = 1;
		
		foreach my $comp ($panel->comps) { 
			$comp->setorder($count, $panel->id);
			$count++;
		}

	}

	$err = "Speaker order set in $num_panels panels";

	return if $return;

	$m->redirect("$Tab::url_prefix/panel/schemat_show.mhtml?event_id=$event_id&err=$err") if $event_id;
	$m->redirect("$Tab::url_prefix/panel/schemat_show.mhtml?round_id=$round_id&err=$err") if $round_id;

	$m->print("<p>".$err."</p>");
	$m->abort;

</%init>
