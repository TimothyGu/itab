<%args>
	$username
	$password
	$xml
</%args>
<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;

	my $req = Apache2::Request->new($r);
	my $xml = $req->upload(xml);

	my $xml = new XML::Simple ( ForceArray => [ qw(EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]); 
	my $data = $xml->XMLin($xml->tempname);

	my $tourn_id = $data->{TOURN}->{ID};
	my @tournsets = @{$data->{TOURN_SETTING}};

	my %tourn_settings = ();

	foreach my $ts (@tourn_settings) { 
		$tourn_settings{lc($ts->{TAG})} = lc($ts->{VALUE});
	}

	my ($account) = Tab::Account->search( email => lc($username) );
	unless ($account) { 
		$m->print("NO_SUCH_ACCOUNT");
		$m->abort;
	}

	$password =~ s/\s+$//g;
    my $db_password = $account->passhash;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
   	unless ($verify_password eq $db_password) { 
       	$m->print("PASSWORD_WRONG");
		$m->abort;
	}

	my $tourn;
	my $foreign;

	#TOURNAMENT
	if ($tourn_settings{"DownloadSite"} eq "idebate.org") { 

		$tourn = Tab::Tourn->retrieve($tourn_id);

		my $authorized;

		unless (Tab::TournAdmin->search( account => $account->id, tourn => $tourn->id) ) { 
			$m->print("NOT_AUTHORIZED");
			$m->abort;
		}

	} else { 

		$foreign++;

		($tourn) = Tab::Tourn->search(foreign_site => $tourn_settings{"DownloadSite"}, foreign_id => $tourn_id);

		if ($tourn) { 

			unless (Tab::TournAdmin->search( account => $account->id, tourn => $tourn->id) ) { 
				$m->print("NOT_AUTHORIZED");
				$m->abort;
			}

		} else { 
	
			my ($start, $through, $end) = Tab::dateme($data->{TOURN}->{TRPCDATE});
		
			unless ($through eq "through") { 
				$start = Tab::dateme($data->{TOURN}->{STARTDATE});
				$end = Tab::dateme($data->{TOURN}->{ENDDATE});
			}

			$tourn = Tab::Tourn->create({ 
				name => $data->{TOURN}->{TOURNNAME},
				start => $start,
				end => $end,
				foreign_site => $tourn_settings{"DownloadSite"},
				foreign_id => $tourn_id
			});

			my $tourn_admin = Tab::TournAdmin->create({
				account => $account->id,
				tourn => $tourn->id
			});

		}

	}

	#EVENTS
	my @events = @{$data->{EVENT}};
	my @event_settings = @{$data->{EVENT_SETTING}};

	#TIMESLOTS
	my @timeslots = @{$data->{TIMESLOT}};

	#ROOMS
	my @rooms = @{$data->{ROOM}};

	#STUDENTS
	my %student_by_id = ();
	my %students_by_chapter = ();
	foreach my $student (@{$data->{ENTRY_STUDENT}}) { 
		push @{$students_by_school{$student->{SCHOOL}}}, $student;
		$student_by_id{$student->{ID}} = $student;
	}

	my %schools_by_id = ();

	#SCHOOLS
	foreach my $xml_school (@{$data->{SCHOOL}}) { 

		my $school = Tab::School->retrieve($xml_school->{ID}) unless $foreign;

		if ($foreign || not defined $school) { 

			my @search = Tab::School->search( name => $xml_school->{SCHOOLNAME} );

			if (@search) { 

				$school = shift @search;

			} else { 

				my @chapters = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} );

				my $chapter; 

				CHAPTER:
				foreach my $xml_chapter (@chapters) { 

					# must have at least one matching student
					STUDENT:
					foreach my $xml_student (@{$students_by_school{$xml_school->{ID}}}) { 

						my ($student) = Tab::Student->search( 
							chapter => $xml_chapter->id, 
							first => $xml_student->{FIRST},
							last => $xml_student->{LAST}
						);

						if ($student) { 
							$chapter = $xml_chapter; 
							last STUDENT;
						} 
					}

					last CHAPTER if $chapter;

				} 

				unless ($chapter) { 

					$chapter => Tab::Chapter->create(
						name => $xml_school->{NAME}
					);

				}

				$school = Tab::School->create(
					chapter => $chapter->id,
					name => $chapter->name,
					tourn => $tourn->id,
					code => $xml_school->{CODE}
				)

			} #end of if $search
	
		} #end of if school

		$schools_by_id{$xml_school->{ID}} = $school;
	}

	foreach my $entry (@{$data->{ENTRY}}) { 

		my $entry = Tab::Entry->search($entry->{ID}) unless $foreign;

		if ($foreign) { 

		START HERE DIPSHIT
			

		}
	}

	my @rounds = @{$data->{ROUND}};

	my @judges = @{$data->{JUDGE}};
	my @judge_prefs = @{$data->{JUDGEPREF}};


</%init>
