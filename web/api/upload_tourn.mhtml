<%args>
	$username => 'palmer@tabroom.com'
	$password => 'Yis*meme.'
	$tourn_id => undef
#	$xml
	$debug => 1
</%args>
<%init>

	use XML::Simple;
	use Crypt::PasswdMD5;
	use Data::Dumper;

	my $now = DateTime->now;

	#ACCOUNT
	my ($account) = Tab::Account->search( email => lc($username) );
	unless ($account) { 
		$m->print("NO_SUCH_ACCOUNT");
		$m->abort;
	} else { 
		$m->print("YOU CLAIM TO BE ".$account->first." ".$account->last.".  I HAVE DOUBTS.  CHECKING PASSWORD...<br />") if $debug;
	}

	$m->flush_buffer;

	$password =~ s/\s+$//g;
	my $db_password = $account->passhash;
   	my $verify_password = unix_md5_crypt($password,$db_password);
   
   	unless ($verify_password eq $db_password) { 
	   	$m->print("PASSWORD_WRONG");
		$m->abort;
	} else { 
		$m->print("HEY, LOOK AT THAT, YOU REALLY ARE! PASSWORD IS OK</br>") if $debug;
	}

	$m->flush_buffer;

	#PROCESS THE XML

#	my $req = Apache2::Request->new($r);
#	my $xml = $req->upload(xml);

	my $xml = new XML::Simple ( ForceArray => [ qw(EVENT EVENT_SETTING TOURN_SETTING SCHOOL REGION) ]); 
#	my $data = $xml->XMLin($xml->tempname);
	my $data = $xml->XMLin("/tmp/MaryWashington-TourneyData.xml");

	#TOURNAMENT
	my $tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_id;

	my @tourn_sets = @{$data->{TOURN_SETTING}};
	my %tourn_settings = (); 

	foreach my $ts (@tourn_sets) { 
		$tourn_settings{$ts->{TAG}} = lc($ts->{VALUE});
	}  

	$m->print("<h2>Tournament</h2>") if $debug;
	$m->print("Name of the tournament is $data->{TOURN}->{NAME}<br />") if $debug;

	unless ($data->{TOURN}->{ID} == -99) { #-99 means "I have no idea where the hell this tournament came from"

		unless ($tourn) { 
			$tourn_id = $data->{TOURN}->{ID};
			$tourn = Tab::Tourn->retrieve($tourn_id) if $tourn_settings{"DownloadSite"} eq "idebate.org";
		}

		unless ($tourn) { 
			$tourn = Tab::Tourn->search(foreign_site => $tourn_settings{"DownloadSite"}, foreign_id => $tourn_id)->first;
		}

	}

	if ($tourn) { 
			
		$m->print("THIS IS MAH TOURNAMENT!  ID is ".$tourn->id,"<br/>") if $debug;

		unless (Tab::TournAdmin->search( account => $account->id, tourn => $tourn->id) ) { 
			$m->print("NOT_AUTHORIZED");
			$m->abort;
		}

	} else { 

		$m->print("I don't know diddly squat about this tournament.  Creating another<br/>") if $debug;

		my ($start, $through, $end) = split(/\ /, $data->{TOURN}->{STARTDATE});

		Tab::debuglog("Through is $through") if $debug;

		if ($through eq "through") {
			$start = Tab::dateme($start);
			$end = Tab::dateme($end);
		} else {
			$start = Tab::dateme($data->{TOURN}->{STARTDATE});
			$end = Tab::dateme($data->{TOURN}->{ENDDATE});
		}
		
		my $reg_start = $start->clone;
		$reg_start->subtract( months => 2);

		my $reg_end = $end->clone;
		$reg_end->subtract( weeks => 1);

		$tourn = Tab::Tourn->create({
			name => $data->{TOURN}->{TOURNNAME},
			start => $start,
			end => $end,
			reg_start => $reg_start,
			reg_end => $reg_end,
			foreign_site => $tourn_settings{"DownloadSite"},
			foreign_id => $tourn_id,
			tz => $account->tz
		});

		my $tourn_admin = Tab::TournAdmin->create({
			account => $account->id,
			tourn => $tourn->id
	   });

		foreach my $ts (@tourn_sets) { 
			$tourn->setting($ts->{TAG}, lc($ts->{VALUE}));
		}   

		$m->print("Created a new tournament, ".$tourn->id," for the nonce<br />") if $debug;

		my $judge_group = Tab::JudgeGroup->create({
			name => $tourn_settings{"TourneyType"},
			tourn => $tourn->id,
			abbr => substr($tourn_settings{"TourneyType"}, 0, 3)
		});

		$m->print("<h2>Events</h2>") if $debug;

	    #EVENTS
   		my @events = @{$data->{EVENT}};
    	my %event_by_id = ();

		foreach my $xml_event (@events) { 

			my $event = Tab::Event->create({
				tourn => $tourn->id,
				name => $xml_event->{EVENTNAME},
				type => $xml_event->{TYPE},
				abbr => $xml_event->{ABBR},
				judge_group => $judge_group->id
			});

			$event_by_id{$xml_event->{ID}} = $event;
			$m->print("Event ".$xml_event->{EVENTNAME}." has been created<br />") if $debug;

		} 

		my @event_settings = @{$data->{EVENT_SETTING}}; 
		
		foreach my $xml_setting (@event_settings) {

			foreach my $event (@{$xml_setting->{EVENT}}) { 
				my $event = $event_by_id{$event};
				$event->setting( $xml_setting->{TAG}, $xml_setting->{VALUE} );
			}
		}

		$m->print("<h2>Timeslots</h2>") if $debug;
	    #TIMESLOTS
		my @timeslots = sort {$a->{ID} <=> $b->{ID}} @{$data->{TIMESLOT}};
		my %timeslots_by_id = ();

		foreach my $xml_timeslot (@timeslots) {

			my $timeslot = Tab::Timeslot->create({
				name => $xml_timeslot->{TIMESLOTNAME},
				tourn => $tourn->id
			});

			$timeslots_by_id{$xml_timeslot->{ID}} = $timeslot;

			$m->print("Timeslot ".$timeslot->name." has been created<br />") if $debug;
		}

		$m->print("<h2>Rooms</h2>") if $debug;

		#ROOMS 
		my $sname = $tourn->name;
		$sname =~ s/Invitation$//g;
		$sname =~ s/Invitational$//g;
		$sname =~ s/Classic$//g;
		$sname =~ s/Tournament$//g;
		my $newsite;

		my @sites = Tab::Site->search_like( name => $sname."%" );
		my $site = shift @sites if @sites; 
		
		if ($site) { 
			$m->print("Using existing site ".$site->name." for the rooms. <br />") if $debug;
		} else { 
			$newsite++;
			$site = Tab::Site->create({
				name => $sname,
				host => $account->id
			});
		
			$m->print("Creating site ".$site->name." for the rooms. <br />") if $debug;
		}

	    my @rooms = @{$data->{ROOM}};
	    my %room_by_id = ();

	    foreach my $xml_room (@rooms) {
			
			my $room = Tab::Room->search( site => $site->id, name => $xml_room->{NAME})->first unless $newsite;

			if ($room) { 
				$m->print("Room name ".$room->name." found already <br />") if $debug;
			} else { 
				$room = Tab::Room->create({
					name => $xml_room->{ROOMNAME},
					quality => $xml_room->{QUALITY},
					capacity => $xml_room->{CAPACITY},
					site => $site->id
				});
				$m->print("Room name ".$room->name." created <br />") if $debug;
			}

			$room_by_id{$xml_room->{ID}} = $room;
		}

		$m->print("<h2>Schools</h2>") if $debug;
		#SCHOOLS

    	my %student_by_id = ();
    	my %students_by_entry = ();
   		my %students_by_school = ();

    	foreach my $student (@{$data->{ENTRY_STUDENT}}) {
			my $school = shift @{$student->{SCHOOL}};
        	push @{$students_by_school{$school}}, $student;
        	push @{$students_by_entry{$student->{ENTRY}}}, $student;
        	$student_by_id{$student->{ID}} = $student;
    	}

    	my %school_by_id = ();
    	my %chapter_by_id = ();
		my %chapter_new = ();

		SCHOOL:
		foreach my $xml_school (@{$data->{SCHOOL}}) {

			if ($xml_school->{SCHOOLNAME} eq "Hired") { 
				$m->print("Not creating a school for Hireds <br /><br />") if $debug;
				next SCHOOL;
			}

			unless ($students_by_school{$xml_school->{ID}}) { 
				$m->print("School $xml_school->{NAME} has no entries; not bothering <br /><br />") if $debug;
				next SCHOOL;
			}

			my @chapters = Tab::Chapter->search( name => $xml_school->{SCHOOLNAME} );
			my $chapter;

			$m->print("Searching for a chapter named $xml_school->{SCHOOLNAME} with a student name match <br />") if $debug;
		
			foreach my $candidate (@chapters) { 

				next if $chapter;
	
				#Find at least one matching student
				foreach my $xml_student (@{$students_by_school{$xml_school->{ID}}}) {
					next if $chapter;

					my ($student) = Tab::Student->search( chapter => $candidate->id, first => $xml_student->{FIRST}, last => $xml_student->{LAST});

					if ($student) {
						$m->print("SUCCESS! Chapter match made with chapter ".$candidate->id." student $xml_student->{FIRST} $xml_student->{LAST} <br />") if $debug;
						$chapter = $candidate;
					}
				}
			}

			unless ($chapter) { 

				$chapter = Tab::Chapter->create({
					name => $xml_school->{SCHOOLNAME}
				});

				$chapter_new{$xml_school->{ID}}++;
				
				$m->print("No match found.  Creating new chapter ".$chapter->id." for ".$chapter->name." <br />") if $chapter && $debug;

			} 
					
			$chapter_by_id{$xml_school->{ID}} = $chapter;
			
			my $school = Tab::School->create({
				chapter => $chapter->id,
				name => $chapter->name,
				tourn => $tourn->id,
				code => $xml_school->{CODE}
			});

			$school_by_id{$xml_school->{ID}} = $school;

			$m->print("School ".$school->name." created within chapter ".$chapter->name." ".$chapter->id." <br />") if $debug;
			$m->print("<br />") if $debug;

		}

		$m->print("<h2>Entries</h2>") if $debug;

		#ENTRIES
		foreach my $xml_entry (@{$data->{ENTRY}}) {
			

			my $xml_school;
			foreach my $can_school (@{$xml_entry->{SCHOOL}}) { 
				$xml_school = $can_school;
			}

			my $xml_event;
			foreach my $can_event (@{$xml_entry->{EVENT}}) { 
				$xml_event = $can_event;
			}
			
				
			my $entry = Tab::Entry->create({
				tourn => $tourn->id,
				name => $xml_entry->{FULLNAME},
				code => $xml_entry->{CODE},
				dropped => $xml_entry->{DROPPED},
				ada => $xml_entry->{TUBDISABILITY},
				seed => $xml_entry->{RATING},
				school => $school_by_id{$xml_school},
				event => $event_by_id{$xml_event}
			});

			$m->print("Entry with event $xml_event from school $xml_school chapter $chapter_by_id{$xml_school}") if $debug;
			$m->print(" and has ".scalar @{$students_by_entry{$xml_entry->{ID}}}." students <br />") if $debug;

			foreach my $xml_student (@{$students_by_entry{$xml_entry->{ID}}}) { 

				my $student;

				if ($chapter_new{$xml_school}) { 
					$m->print("Chapter ".$chapter_by_id{$xml_school}." is new; not searching for students <br />");
				} else { 
					$student = Tab::Student->search( first => $xml_student->{FIRST}, last => $xml_student->{LAST}, chapter => $chapter_by_id{$xml_school})->first;
					$m->print("Student ".$student->id." found for $xml_student->{FIRST} $xml_student->{LAST} <br />") if $debug && $student;
				}
			
				unless ($student) { 

					$m->print("Creating new student $xml_student->{FIRST} $xml_student->{LAST} as part of entry $xml_entry->{CODE} <br />") if $debug;

					$student = Tab::Student->create({
						first => $xml_student->{FIRST}, 
						last => $xml_student->{LAST}, 
						chapter => $chapter_by_id{$xml_school}
					});

				}
	
				Tab::EntryStudent->create({
					entry => $entry->id,
					student => $student->id
				});

			}

			$m->print("<br />") if $debug;

		}

	} 

	$m->print("<BR/><bR/>THE SCRIPT, SHE IS FINISHED<br />") if $debug;

</%init>

