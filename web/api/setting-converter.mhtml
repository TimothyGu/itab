<%args>

</%args>
<%init>


	my @tourns = Tab::Tourn->retrieve_all;

	foreach my $tourn (@tourns) { 

		my @events = $tourn->events;
		my @groups = $tourn->groups;
		my @tb_sets = $tourn->tiebreak_sets;
		next unless @events || @groups;

		Tab::debuglog("Converting tournament ".$tourn->name." ".$tourn->start->year);		

		foreach my $setting ($tourn->settings) { 

			my $tag = $setting->tag;

			if (
					$tag eq "ask_quals" ||
					$tag eq "more_quals" ||
					$tag eq "at_larges" ||
					$tag eq "min_panel_size" ||
					$tag eq "max_panel_size" ||
					$tag eq "default_panel_size" ||
					$tag eq "min_chamber_size" ||
					$tag eq "max_chamber_size" ||
					$tag eq "default_chamber_size" ||
					$tag eq "elim_method" ||
					$tag eq "school_percent_limit" ||
					$tag eq "novices" ||
					$tag eq "honorable_mentions"
													) { 

				next if $event->type eq "congress" && ($tag eq "min_panel_size" || $tag eq "max_panel_size" || $tag eq "default_panel_size");
				next if $event->type eq "speech" && ($tag eq "min_chamber_size" || $tag eq "max_chamber_size" || $tag eq "default_chamber_size");

				$tag = "min_panel_size" if $tag eq "min_chamber_size";
				$tag = "max_panel_size" if $tag eq "max_chamber_size";
				$tag = "default_panel_size" if $tag eq "default_chamber_size";
				$tag = "top_novice" if $tag eq "novices";

				foreach my $event (@events) { 
					Tab::EventSetting->create({
						event => $event->id,
						tag => $tag,
						value = $setting->value
					});
				}


			} elsif (
				$tag eq "no_back_to_back" ||
				$tag eq "judge_event_twice" ||
				$tag eq "allow_school_panels" ||
				$tag eq "judge_cells" ||
				$tag eq "judge_randomize"
											) { 

				foreach my $group (@groups) { 
					Tab::JudgeGroupSetting->create({
						judge_group => $group->id,
						tag => $tag,
						value = $setting->value
					});
				}

			} elsif (

				$tag eq "truncate_to_smallest" ||
				$tag eq "truncate_ranks_to" ||
				$tag eq "noshows_never_break" ||
				$tag eq "mfl_time_violation" ||
				$tag eq "master_printout" || 
				$tag eq "audit_method"  ) { 

				$tag = "master_ballot" if $tag eq "master_printout";

				foreach my $tb_set (@tb_sets) { 
					Tab::TiebreakSetting->create({
						tiebreak_set => $tb_set->id,
						tag => $tag,
						value = $setting->value
					});
				}

			}

		}

	}

	Tab::debuglog("Converting tiebreak sets");

	my @tb_sets = Tab::TiebreakSet->retrieve_all;

	foreach my $tb_set (@tb_sets) { 
		$tb_set->setting("equal_elims", $tb_set->elim);
	}

</%init>
