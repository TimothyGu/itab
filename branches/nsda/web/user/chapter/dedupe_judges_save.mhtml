<%args>
	$account
	$chapter_id
</%args>
<%init>

	my $chapter = Tab::Chapter->retrieve($chapter_id);

	$m->print($account->email." is my email");

	my %judges_by_name = ();

	foreach my $judge ($chapter->chapter_judges) { 
		next unless $judge->last;
		push @{$judges_by_name{$judge->first."-".$judge->last}}, $judge;
	}

	Tab::Judge->set_sql( steal => "
		update judge
		set chapter_judge = ?
		where chapter_judge = ?
	");

	Tab::AccountConflict->set_sql( steal => "
		update account_conflict
		set judge = ?
		where judge = ?
	");

	my $count;

	foreach my $key (keys %judges_by_name) { 

		next if scalar @{$judges_by_name{$key}} < 2;
		next unless $ARGS{$key};

		my $dest = shift @{$judges_by_name{$key}};

		my $account_id = $dest->account->id if $dest->account;
		my $started = $dest->started;
		my $paradigm = $dest->paradigm;
		my $retired = $dest->retired;

		foreach my $judge (@{$judges_by_name{$key}}) { 

			Tab::log($account->email." transferring ".$judge->id." records to ".$dest->id);

			$started = $judge->started unless $started;
			$paradigm = $judge->paradigm unless $paradigm;
			$retired = 0 unless $judge->retired;
			$account_id = $judge->account->id if $judge->account && not defined $account_id;
			Tab::Judge->sql_steal->execute($dest->id, $judge->id);
			Tab::AccountConflict->sql_steal->execute($dest->id, $judge->id);
			$judge->delete;
			$count++;
		}

		$dest->started($started);
		$dest->paradigm($paradigm);
		$dest->account($account_id);
		$dest->update;

	}

	my $msg = "$count judges de-duplicated.";

	$m->redirect("dedupe_judges.mhtml?chapter_id=$chapter_id&msg=$msg");


</%init>
